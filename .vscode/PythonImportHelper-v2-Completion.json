[
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "celery",
        "description": "celery",
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_response",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_response",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_response",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render_to_response",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ipho_core",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_core",
        "description": "ipho_core",
        "detail": "ipho_core",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ipho_core.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AccountRequest",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "PushSubscription",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "RandomDrawLog",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AccountRequest",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "PushSubscription",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "RandomDrawLog",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "RandomDrawLog",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_core.models",
        "description": "ipho_core.models",
        "isExtraImport": true,
        "detail": "ipho_core.models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "bytes",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "chr",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "chr",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "chr",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "object",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "range",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "chr",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "modelformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "HiddenInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "DateInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "RadioSelect",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "formset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "modelformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "MultiField",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Div",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Fieldset",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "MultiField",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Div",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Fieldset",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "MultiField",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Div",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "MultiField",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Div",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Fieldset",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "ButtonHolder",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "MultiField",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Div",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "AccordionGroup",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "FormActions",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "AccordionGroup",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "FormActions",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "AccordionGroup",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "Accordion",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "AccordionGroup",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "FormActions",
        "importPath": "crispy_forms.bootstrap",
        "description": "crispy_forms.bootstrap",
        "isExtraImport": true,
        "detail": "crispy_forms.bootstrap",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MultipleObjectsReturned",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "python_2_unicode_compatible",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "python_2_unicode_compatible",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "python_2_unicode_compatible",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "python_2_unicode_compatible",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "webpush",
        "importPath": "pywebpush",
        "description": "pywebpush",
        "isExtraImport": true,
        "detail": "pywebpush",
        "documentation": {}
    },
    {
        "label": "WebPushException",
        "importPath": "pywebpush",
        "description": "pywebpush",
        "isExtraImport": true,
        "detail": "pywebpush",
        "documentation": {}
    },
    {
        "label": "WebPushException",
        "importPath": "pywebpush",
        "description": "pywebpush",
        "isExtraImport": true,
        "detail": "pywebpush",
        "documentation": {}
    },
    {
        "label": "WebPushException",
        "importPath": "pywebpush",
        "description": "pywebpush",
        "isExtraImport": true,
        "detail": "pywebpush",
        "documentation": {}
    },
    {
        "label": "WebPushException",
        "importPath": "pywebpush",
        "description": "pywebpush",
        "isExtraImport": true,
        "detail": "pywebpush",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "old_div",
        "importPath": "past.utils",
        "description": "past.utils",
        "isExtraImport": true,
        "detail": "past.utils",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotModified",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "AccountRequestForm",
        "importPath": "ipho_core.forms",
        "description": "ipho_core.forms",
        "isExtraImport": true,
        "detail": "ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "SendPushForm",
        "importPath": "ipho_core.forms",
        "description": "ipho_core.forms",
        "isExtraImport": true,
        "detail": "ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "RandomDrawForm",
        "importPath": "ipho_core.forms",
        "description": "ipho_core.forms",
        "isExtraImport": true,
        "detail": "ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "patch_response_headers",
        "importPath": "django.utils.cache",
        "description": "django.utils.cache",
        "isExtraImport": true,
        "detail": "django.utils.cache",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.core",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core",
        "description": "django.core",
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "ipho_exam.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "RawFigure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationImportTmp",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "CachedAutoTranslation",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "DocumentTask",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "AttributeChange",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "DocumentTask",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationImportTmp",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_FIGURE_EXTENSIONS",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "CompiledFigure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "RawFigure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationImportTmp",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "DocumentTask",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PrintLog",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "CachedAutoTranslation",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_RAW_FIGURE_EXTENSIONS",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_COMPILED_FIGURE_EXTENSIONS",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_FIGURE_EXTENSIONS",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ipho_exam.models",
        "description": "ipho_exam.models",
        "isExtraImport": true,
        "detail": "ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.manager",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.manager",
        "description": "django.db.models.manager",
        "detail": "django.db.models.manager",
        "documentation": {}
    },
    {
        "label": "ipho_exam.utils.natural_id",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_exam.utils.natural_id",
        "description": "ipho_exam.utils.natural_id",
        "detail": "ipho_exam.utils.natural_id",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ipho_exam",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "compile_utils",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "views_api",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "cached_responses",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "question_utils",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "check_points",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tex",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "pdf",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qquery",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "fonts",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "iphocode",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "qml",
        "importPath": "ipho_exam",
        "description": "ipho_exam",
        "isExtraImport": true,
        "detail": "ipho_exam",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "QMLfigure",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "make_qml",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLquestion",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLpart",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsubquestion",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsubanswer",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "make_qml",
        "importPath": "ipho_exam.qml",
        "description": "ipho_exam.qml",
        "isExtraImport": true,
        "detail": "ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "django.template.defaulttags",
        "description": "django.template.defaulttags",
        "isExtraImport": true,
        "detail": "django.template.defaulttags",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "django.template.defaulttags",
        "description": "django.template.defaulttags",
        "isExtraImport": true,
        "detail": "django.template.defaulttags",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "AceWidget",
        "importPath": "django_ace",
        "description": "django_ace",
        "isExtraImport": true,
        "detail": "django_ace",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_crispy_form",
        "importPath": "crispy_forms.utils",
        "description": "crispy_forms.utils",
        "isExtraImport": true,
        "detail": "crispy_forms.utils",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "formset_factory",
        "importPath": "django.forms.formsets",
        "description": "django.forms.formsets",
        "isExtraImport": true,
        "detail": "django.forms.formsets",
        "documentation": {}
    },
    {
        "label": "formset_factory",
        "importPath": "django.forms.formsets",
        "description": "django.forms.formsets",
        "isExtraImport": true,
        "detail": "django.forms.formsets",
        "documentation": {}
    },
    {
        "label": "formset_factory",
        "importPath": "django.forms.formsets",
        "description": "django.forms.formsets",
        "isExtraImport": true,
        "detail": "django.forms.formsets",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "printer",
        "importPath": "ipho_print",
        "description": "ipho_print",
        "isExtraImport": true,
        "detail": "ipho_print",
        "documentation": {}
    },
    {
        "label": "printer",
        "importPath": "ipho_print",
        "description": "ipho_print",
        "isExtraImport": true,
        "detail": "ipho_print",
        "documentation": {}
    },
    {
        "label": "barcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "barcode",
        "description": "barcode",
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "SVGWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "SVGWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "qrcode.image.svg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode.image.svg",
        "description": "qrcode.image.svg",
        "detail": "qrcode.image.svg",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "cairosvg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cairosvg",
        "description": "cairosvg",
        "detail": "cairosvg",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "PolymorphicModel",
        "importPath": "polymorphic.models",
        "description": "polymorphic.models",
        "isExtraImport": true,
        "detail": "polymorphic.models",
        "documentation": {}
    },
    {
        "label": "PolymorphicManager",
        "importPath": "polymorphic.manager",
        "description": "polymorphic.manager",
        "isExtraImport": true,
        "detail": "polymorphic.manager",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "PdfFileWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "renderers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "standard_library",
        "importPath": "future",
        "description": "future",
        "isExtraImport": true,
        "detail": "future",
        "documentation": {}
    },
    {
        "label": "standard_library",
        "importPath": "future",
        "description": "future",
        "isExtraImport": true,
        "detail": "future",
        "documentation": {}
    },
    {
        "label": "urllib.request,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request.",
        "description": "urllib.request.",
        "detail": "urllib.request.",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "NavigableString",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "html_diff",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html_diff",
        "description": "html_diff",
        "detail": "html_diff",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "unescape_entities",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "unescape_entities",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.template.context_processors",
        "description": "django.template.context_processors",
        "isExtraImport": true,
        "detail": "django.template.context_processors",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.template.context_processors",
        "description": "django.template.context_processors",
        "isExtraImport": true,
        "detail": "django.template.context_processors",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.template.context_processors",
        "description": "django.template.context_processors",
        "isExtraImport": true,
        "detail": "django.template.context_processors",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.template.context_processors",
        "description": "django.template.context_processors",
        "isExtraImport": true,
        "detail": "django.template.context_processors",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.template.context_processors",
        "description": "django.template.context_processors",
        "isExtraImport": true,
        "detail": "django.template.context_processors",
        "documentation": {}
    },
    {
        "label": "AsyncResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "AsyncResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "AsyncResult",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "Renderer",
        "importPath": "appy.pod.renderer",
        "description": "appy.pod.renderer",
        "isExtraImport": true,
        "detail": "appy.pod.renderer",
        "documentation": {}
    },
    {
        "label": "TemplateDoesNotExist",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "RequestContext",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "RequestContext",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "importPath": "exam_tools.settings",
        "description": "exam_tools.settings",
        "isExtraImport": true,
        "detail": "exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_PATH",
        "importPath": "exam_tools.settings",
        "description": "exam_tools.settings",
        "isExtraImport": true,
        "detail": "exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "QueryDict",
        "importPath": "django.http.request",
        "description": "django.http.request",
        "isExtraImport": true,
        "detail": "django.http.request",
        "documentation": {}
    },
    {
        "label": "ensure_csrf_cookie",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "ensure_csrf_cookie",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "ensure_csrf_cookie",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Lower",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Now",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "any_permission_required",
        "importPath": "ipho_core.views",
        "description": "ipho_core.views",
        "isExtraImport": true,
        "detail": "ipho_core.views",
        "documentation": {}
    },
    {
        "label": "render_odt_response",
        "importPath": "ipho_exam.response",
        "description": "ipho_exam.response",
        "isExtraImport": true,
        "detail": "ipho_exam.response",
        "documentation": {}
    },
    {
        "label": "LanguageForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FigureForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "TranslationForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ExamQuestionForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "DeleteForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "VersionNodeForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PDFNodeForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FeedbackForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockAttributeFormSet",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockAttributeHelper",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "SubmissionAssignForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AssignTranslationForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "TranslationImportForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminImportForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PrintDocsForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ScanForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ExtraSheetForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PublishForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FeedbackCommentForm",
        "importPath": "ipho_exam.forms",
        "description": "ipho_exam.forms",
        "isExtraImport": true,
        "detail": "ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "translate",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "translate",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "DocumentSerializer",
        "importPath": "ipho_exam.serializers",
        "description": "ipho_exam.serializers",
        "isExtraImport": true,
        "detail": "ipho_exam.serializers",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "OpenAPIRenderer",
        "importPath": "rest_framework_swagger.renderers",
        "description": "rest_framework_swagger.renderers",
        "isExtraImport": true,
        "detail": "rest_framework_swagger.renderers",
        "documentation": {}
    },
    {
        "label": "SwaggerUIRenderer",
        "importPath": "rest_framework_swagger.renderers",
        "description": "rest_framework_swagger.renderers",
        "isExtraImport": true,
        "detail": "rest_framework_swagger.renderers",
        "documentation": {}
    },
    {
        "label": "HasValidApiKeyOrAdmin",
        "importPath": "ipho_exam.permissions",
        "description": "ipho_exam.permissions",
        "isExtraImport": true,
        "detail": "ipho_exam.permissions",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.templatetags.static",
        "description": "django.templatetags.static",
        "isExtraImport": true,
        "detail": "django.templatetags.static",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "BaseInlineFormSet",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Choice",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "VotingRight",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "VotingRight",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "VotingRight",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Choice",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "VotingRight",
        "importPath": "ipho_poll.models",
        "description": "ipho_poll.models",
        "isExtraImport": true,
        "detail": "ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "_thread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_thread",
        "description": "_thread",
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "tz",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "install_aliases",
        "importPath": "future.standard_library",
        "description": "future.standard_library",
        "isExtraImport": true,
        "detail": "future.standard_library",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "dbbackup",
        "description": "dbbackup",
        "isExtraImport": true,
        "detail": "dbbackup",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "dbbackup",
        "description": "dbbackup",
        "isExtraImport": true,
        "detail": "dbbackup",
        "documentation": {}
    },
    {
        "label": "Storage",
        "importPath": "dbbackup.storage",
        "description": "dbbackup.storage",
        "isExtraImport": true,
        "detail": "dbbackup.storage",
        "documentation": {}
    },
    {
        "label": "StorageError",
        "importPath": "dbbackup.storage",
        "description": "dbbackup.storage",
        "isExtraImport": true,
        "detail": "dbbackup.storage",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.core.context_processors",
        "description": "django.core.context_processors",
        "isExtraImport": true,
        "detail": "django.core.context_processors",
        "documentation": {}
    },
    {
        "label": "ipho_marking.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "Marking",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "MarkingMeta",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "MarkingMeta",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "Marking",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "Marking",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "Marking",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "MarkingMeta",
        "importPath": "ipho_marking.models",
        "description": "ipho_marking.models",
        "isExtraImport": true,
        "detail": "ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "css",
        "importPath": "cssutils",
        "description": "cssutils",
        "isExtraImport": true,
        "detail": "cssutils",
        "documentation": {}
    },
    {
        "label": "stylesheets",
        "importPath": "cssutils",
        "description": "cssutils",
        "isExtraImport": true,
        "detail": "cssutils",
        "documentation": {}
    },
    {
        "label": "pdfkit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfkit",
        "description": "pdfkit",
        "detail": "pdfkit",
        "documentation": {}
    },
    {
        "label": "ImportForm",
        "importPath": "ipho_marking.forms",
        "description": "ipho_marking.forms",
        "isExtraImport": true,
        "detail": "ipho_marking.forms",
        "documentation": {}
    },
    {
        "label": "PointsForm",
        "importPath": "ipho_marking.forms",
        "description": "ipho_marking.forms",
        "isExtraImport": true,
        "detail": "ipho_marking.forms",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "mkdocs",
        "description": "mkdocs",
        "isExtraImport": true,
        "detail": "mkdocs",
        "documentation": {}
    },
    {
        "label": "ConfigurationError",
        "importPath": "mkdocs.exceptions",
        "description": "mkdocs.exceptions",
        "isExtraImport": true,
        "detail": "mkdocs.exceptions",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "importPath": "mkdocs.plugins",
        "description": "mkdocs.plugins",
        "isExtraImport": true,
        "detail": "mkdocs.plugins",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "mkdocs.commands",
        "description": "mkdocs.commands",
        "isExtraImport": true,
        "detail": "mkdocs.commands",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "mkdocs.commands",
        "description": "mkdocs.commands",
        "isExtraImport": true,
        "detail": "mkdocs.commands",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "mkdocs.structure",
        "description": "mkdocs.structure",
        "isExtraImport": true,
        "detail": "mkdocs.structure",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.exam_tools.celery",
        "description": "src.components.Exam.exam_tools.exam_tools.celery",
        "peekOfCode": "def debug_task(self):\n    print('Request: {0!r}'.format(self.request))",
        "detail": "src.components.Exam.exam_tools.exam_tools.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.celery",
        "description": "src.components.Exam.exam_tools.exam_tools.celery",
        "peekOfCode": "app = Celery('exam_tools')\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))",
        "detail": "src.components.Exam.exam_tools.exam_tools.celery",
        "documentation": {}
    },
    {
        "label": "ipho_context",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.exam_tools.context_processors",
        "description": "src.components.Exam.exam_tools.exam_tools.context_processors",
        "peekOfCode": "def ipho_context(request):\n    return {\n        'DEMO_MODE': settings.DEMO_MODE,\n        'DEMO_SIGN_UP': settings.DEMO_SIGN_UP,\n        'VERSION': settings.VERSION,\n        'VERSION_DATE': settings.VERSION_DATE,\n        'DOCS_URL': settings.DOCS_URL,\n        'STATIC_PATH': settings.STATIC_PATH,\n    }",
        "detail": "src.components.Exam.exam_tools.exam_tools.context_processors",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "DEBUG = True\n#TEMPLATE_DEBUG = DEBUG\nNO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "#TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "#TEMPLATE_DEBUG = DEBUG\nNO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "NO_ANSWER_SHEETS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "NO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "ONLY_OFFICIAL_ANSWER_SHEETS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "ONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "VOTING_FULLSCREEN_DISPLAY_REMAINING_USERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "VOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "AUTO_TRANSLATE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "AUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "AUTO_TRANSLATE_LANGUAGES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "AUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "GOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "ADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "MANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',  # Set to empty string for default.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',  # Set to empty string for default.\n    }",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings",
        "description": "src.components.Exam.exam_tools.exam_tools.settings",
        "peekOfCode": "SECRET_KEY = '^t-a=sbo_05wq!*(x4mpv7kw&u_n=5js$lwadn_yx(bzx*fzjw'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings",
        "documentation": {}
    },
    {
        "label": "SETTINGS_DIR",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "SETTINGS_DIR = os.path.dirname(__file__)\nPROJECT_PATH = os.path.join(SETTINGS_DIR, os.pardir)\nPROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\nEVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "PROJECT_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "PROJECT_PATH = os.path.join(SETTINGS_DIR, os.pardir)\nPROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\nEVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "PROJECT_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "PROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\nEVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "TEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\nEVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:\n    GIT_HEAD_DATE = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "STATIC_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "STATIC_PATH = os.path.join(PROJECT_PATH, 'static')\nEVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:\n    GIT_HEAD_DATE = ''\ntry:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "EVENT_TEMPLATE_PATH = os.path.join(TEMPLATE_PATH, 'events', 'demo')\nSITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:\n    GIT_HEAD_DATE = ''\ntry:\n    GIT_HEAD_SHA = '({})'.format(str(subprocess.check_output([\"git\", \"rev-parse\", \"--short\", \"HEAD\"]), 'utf-8').strip())",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "SITE_URL = 'http://127.0.0.1:8000'\nVERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:\n    GIT_HEAD_DATE = ''\ntry:\n    GIT_HEAD_SHA = '({})'.format(str(subprocess.check_output([\"git\", \"rev-parse\", \"--short\", \"HEAD\"]), 'utf-8').strip())\nexcept Exception:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "VERSION = '3.0.0'\ntry:\n    GIT_HEAD_DATE = str(subprocess.check_output([\"git\", \"log\", \"-1\", \"--date=short\", \"--pretty=format:%ci\"]),\n                        'utf-8').strip()\nexcept Exception:\n    GIT_HEAD_DATE = ''\ntry:\n    GIT_HEAD_SHA = '({})'.format(str(subprocess.check_output([\"git\", \"rev-parse\", \"--short\", \"HEAD\"]), 'utf-8').strip())\nexcept Exception:\n    GIT_HEAD_SHA = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "VERSION_DATE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "VERSION_DATE = '{} {}'.format(GIT_HEAD_DATE, GIT_HEAD_SHA)\nOFFICIAL_DELEGATION = 'Official'\n# Demo mode shows watermark and turns off some functionality\nDEMO_MODE = False\n# Allow user sign-up for demo\nDEMO_SIGN_UP = False\n# Adds a watermark to PDFs shown to non-staff\nADD_DELEGATION_WATERMARK = False\n# Defines if there is a 'banner' page for the delegation prints\nADD_DELEGATION_PRINT_BANNER = False",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "OFFICIAL_DELEGATION = 'Official'\n# Demo mode shows watermark and turns off some functionality\nDEMO_MODE = False\n# Allow user sign-up for demo\nDEMO_SIGN_UP = False\n# Adds a watermark to PDFs shown to non-staff\nADD_DELEGATION_WATERMARK = False\n# Defines if there is a 'banner' page for the delegation prints\nADD_DELEGATION_PRINT_BANNER = False\n# Defines whether a QR code should be printed on the cover sheets",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "DEMO_MODE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "DEMO_MODE = False\n# Allow user sign-up for demo\nDEMO_SIGN_UP = False\n# Adds a watermark to PDFs shown to non-staff\nADD_DELEGATION_WATERMARK = False\n# Defines if there is a 'banner' page for the delegation prints\nADD_DELEGATION_PRINT_BANNER = False\n# Defines whether a QR code should be printed on the cover sheets\nCODE_ON_COVER_SHEET = False\n# Url of documentation",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "DEMO_SIGN_UP",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "DEMO_SIGN_UP = False\n# Adds a watermark to PDFs shown to non-staff\nADD_DELEGATION_WATERMARK = False\n# Defines if there is a 'banner' page for the delegation prints\nADD_DELEGATION_PRINT_BANNER = False\n# Defines whether a QR code should be printed on the cover sheets\nCODE_ON_COVER_SHEET = False\n# Url of documentation\nDOCS_URL = '/docs'\n# Path to tex binaries and Inkscape binary",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "ADD_DELEGATION_WATERMARK",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "ADD_DELEGATION_WATERMARK = False\n# Defines if there is a 'banner' page for the delegation prints\nADD_DELEGATION_PRINT_BANNER = False\n# Defines whether a QR code should be printed on the cover sheets\nCODE_ON_COVER_SHEET = False\n# Url of documentation\nDOCS_URL = '/docs'\n# Path to tex binaries and Inkscape binary\ntry:\n    TEXBIN = os.path.dirname(str(subprocess.check_output([\"which\", \"xelatex\"]), 'utf-8').strip())",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "ADD_DELEGATION_PRINT_BANNER",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "ADD_DELEGATION_PRINT_BANNER = False\n# Defines whether a QR code should be printed on the cover sheets\nCODE_ON_COVER_SHEET = False\n# Url of documentation\nDOCS_URL = '/docs'\n# Path to tex binaries and Inkscape binary\ntry:\n    TEXBIN = os.path.dirname(str(subprocess.check_output([\"which\", \"xelatex\"]), 'utf-8').strip())\nexcept:\n    TEXBIN = '/opt/texbin'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "CODE_ON_COVER_SHEET",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "CODE_ON_COVER_SHEET = False\n# Url of documentation\nDOCS_URL = '/docs'\n# Path to tex binaries and Inkscape binary\ntry:\n    TEXBIN = os.path.dirname(str(subprocess.check_output([\"which\", \"xelatex\"]), 'utf-8').strip())\nexcept:\n    TEXBIN = '/opt/texbin'\nINKSCAPE_BIN = 'inkscape'\n# Celery SETTINGS_DIR",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "DOCS_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "DOCS_URL = '/docs'\n# Path to tex binaries and Inkscape binary\ntry:\n    TEXBIN = os.path.dirname(str(subprocess.check_output([\"which\", \"xelatex\"]), 'utf-8').strip())\nexcept:\n    TEXBIN = '/opt/texbin'\nINKSCAPE_BIN = 'inkscape'\n# Celery SETTINGS_DIR\nCELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']\nCELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "INKSCAPE_BIN",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "INKSCAPE_BIN = 'inkscape'\n# Celery SETTINGS_DIR\nCELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']\nCELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'\nCELERYD_TASK_TIME_LIMIT = 15*60  # task execution time limit in seconds before the workers are killed using SIGKILL\n# Printing system\nPRINTER_QUEUES = {\n    # 'technopark.printer-1': {\n    #   'name': 'Technopark 1',\n    #   'host': '',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']\nCELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'\nCELERYD_TASK_TIME_LIMIT = 15*60  # task execution time limit in seconds before the workers are killed using SIGKILL\n# Printing system\nPRINTER_QUEUES = {\n    # 'technopark.printer-1': {\n    #   'name': 'Technopark 1',\n    #   'host': '',\n    #   'queue': 'printer-1',\n    #   'auth_token': '',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'\nCELERYD_TASK_TIME_LIMIT = 15*60  # task execution time limit in seconds before the workers are killed using SIGKILL\n# Printing system\nPRINTER_QUEUES = {\n    # 'technopark.printer-1': {\n    #   'name': 'Technopark 1',\n    #   'host': '',\n    #   'queue': 'printer-1',\n    #   'auth_token': '',\n    #   'opts': {'Duplex': 'None', 'ColourModel': 'Greyscale', 'Staple': '1PLU'},",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "CELERYD_TASK_TIME_LIMIT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "CELERYD_TASK_TIME_LIMIT = 15*60  # task execution time limit in seconds before the workers are killed using SIGKILL\n# Printing system\nPRINTER_QUEUES = {\n    # 'technopark.printer-1': {\n    #   'name': 'Technopark 1',\n    #   'host': '',\n    #   'queue': 'printer-1',\n    #   'auth_token': '',\n    #   'opts': {'Duplex': 'None', 'ColourModel': 'Greyscale', 'Staple': '1PLU'},\n    #   'required_perm': 'ipho_core.print_technopark',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "PRINTER_QUEUES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "PRINTER_QUEUES = {\n    # 'technopark.printer-1': {\n    #   'name': 'Technopark 1',\n    #   'host': '',\n    #   'queue': 'printer-1',\n    #   'auth_token': '',\n    #   'opts': {'Duplex': 'None', 'ColourModel': 'Greyscale', 'Staple': '1PLU'},\n    #   'required_perm': 'ipho_core.print_technopark',\n    # },\n    # 'technopark.printer-2': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "EXAM_TOOLS_API_KEYS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "EXAM_TOOLS_API_KEYS = {\n    'PDF Worker': 'KeyChangeMe',\n    'Scan Worker': 'KeyChangeMe',\n}\n# Random draw\nRANDOM_DRAW_ON_SUBMISSION = True\n# Push Notifications\nENABLE_PUSH = False\nPUSH_PUBLIC_KEY = ''\nPUSH_PRIVATE_KEY = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "RANDOM_DRAW_ON_SUBMISSION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "RANDOM_DRAW_ON_SUBMISSION = True\n# Push Notifications\nENABLE_PUSH = False\nPUSH_PUBLIC_KEY = ''\nPUSH_PRIVATE_KEY = ''\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "ENABLE_PUSH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "ENABLE_PUSH = False\nPUSH_PUBLIC_KEY = ''\nPUSH_PRIVATE_KEY = ''\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "PUSH_PUBLIC_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "PUSH_PUBLIC_KEY = ''\nPUSH_PRIVATE_KEY = ''\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "PUSH_PRIVATE_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "PUSH_PRIVATE_KEY = ''\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Zurich'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "ALLOWED_HOSTS = []\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\nSITE_ID = 1",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "TIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\nSITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nSITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "SITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "USE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "USE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "USE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "MEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "MEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n# Additional locations of static files",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "STATIC_ROOT = ''\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "STATIC_URL = '/static/'\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,\n)\n# List of finder classes that know how to find static files in\n# various locations.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "STATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,\n)\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "STATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            TEMPLATE_PATH,",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            TEMPLATE_PATH,\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "MIDDLEWARE = (\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'ipho_exam.middleware.IphoExamExceptionsMiddleware',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'ipho_core.backends.TokenLoginBackend',\n    'django.contrib.auth.backends.ModelBackend',\n)\nROOT_URLCONF = 'exam_tools.urls'\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'exam_tools.wsgi.application'\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "ROOT_URLCONF = 'exam_tools.urls'\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'exam_tools.wsgi.application'\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "WSGI_APPLICATION = 'exam_tools.wsgi.application'\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "INSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap3'\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n        'ipho_exam.permissions.HasValidApiKey',\n    ],\n    'PAGE_SIZE': 10\n}\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n        'ipho_exam.permissions.HasValidApiKey',\n    ],\n    'PAGE_SIZE': 10\n}\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Api Token': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Api Token': {\n            'type': 'apiKey',\n            'name': 'APIKEY',\n            'in': 'header',\n        }\n    },\n    'DOC_EXPANSION': 'list',\n    'VALIDATOR_URL': None,",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'formatters': {\n        'default': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common",
        "documentation": {}
    },
    {
        "label": "SETTINGS_DIR",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "SETTINGS_DIR = os.path.dirname(__file__)\nPROJECT_PATH = os.path.join(SETTINGS_DIR, os.pardir)\nPROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\n# Printing paths for sanity's sake\nif False:\n    print(\"Settings directory:\", SETTINGS_DIR, file=sys.stderr)\n    print(\"Project root:\", PROJECT_PATH, file=sys.stderr)\n    print(\"Templates:\", TEMPLATE_PATH, file=sys.stderr)",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "PROJECT_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "PROJECT_PATH = os.path.join(SETTINGS_DIR, os.pardir)\nPROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\n# Printing paths for sanity's sake\nif False:\n    print(\"Settings directory:\", SETTINGS_DIR, file=sys.stderr)\n    print(\"Project root:\", PROJECT_PATH, file=sys.stderr)\n    print(\"Templates:\", TEMPLATE_PATH, file=sys.stderr)\n    print(\"Static:\", STATIC_PATH, file=sys.stderr)",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "PROJECT_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "PROJECT_PATH = os.path.abspath(PROJECT_PATH)\nTEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\n# Printing paths for sanity's sake\nif False:\n    print(\"Settings directory:\", SETTINGS_DIR, file=sys.stderr)\n    print(\"Project root:\", PROJECT_PATH, file=sys.stderr)\n    print(\"Templates:\", TEMPLATE_PATH, file=sys.stderr)\n    print(\"Static:\", STATIC_PATH, file=sys.stderr)\n# Hosts/domain names that are valid for this site; required if DEBUG is False",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "TEMPLATE_PATH = os.path.join(PROJECT_PATH, 'templates')\nSTATIC_PATH = os.path.join(PROJECT_PATH, 'static')\n# Printing paths for sanity's sake\nif False:\n    print(\"Settings directory:\", SETTINGS_DIR, file=sys.stderr)\n    print(\"Project root:\", PROJECT_PATH, file=sys.stderr)\n    print(\"Templates:\", TEMPLATE_PATH, file=sys.stderr)\n    print(\"Static:\", STATIC_PATH, file=sys.stderr)\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "STATIC_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "STATIC_PATH = os.path.join(PROJECT_PATH, 'static')\n# Printing paths for sanity's sake\nif False:\n    print(\"Settings directory:\", SETTINGS_DIR, file=sys.stderr)\n    print(\"Project root:\", PROJECT_PATH, file=sys.stderr)\n    print(\"Templates:\", TEMPLATE_PATH, file=sys.stderr)\n    print(\"Static:\", STATIC_PATH, file=sys.stderr)\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = ['.uzh.ch', '.uzh.ch.']",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "ALLOWED_HOSTS = ['.uzh.ch', '.uzh.ch.']\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\nSITE_ID = 1",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "TIME_ZONE = 'Europe/Zurich'\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\nSITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nSITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = False",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "SITE_ID = 1\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = False\n# Absolute filesystem path to the directory that will hold user-uploaded files.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "USE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = False\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "USE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = False\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "USE_TZ = False\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "MEDIA_ROOT = ''\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "MEDIA_URL = ''\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n# Additional locations of static files",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "STATIC_ROOT = ''\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "STATIC_URL = '/static/'\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,\n)\n# List of finder classes that know how to find static files in\n# various locations.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "STATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    STATIC_PATH,\n)\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "STATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            TEMPLATE_PATH,",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            TEMPLATE_PATH,\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE_CLASSES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "MIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\nROOT_URLCONF = 'exam_tools.urls'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "ROOT_URLCONF = 'exam_tools.urls'\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'exam_tools.wsgi.application'\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "WSGI_APPLICATION = 'exam_tools.wsgi.application'\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "INSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    #'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap3'\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_common_uzh",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "DEBUG = True\n#TEMPLATE_DEBUG = DEBUG\nNO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "#TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "#TEMPLATE_DEBUG = DEBUG\nNO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "NO_ANSWER_SHEETS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "NO_ANSWER_SHEETS = False\nONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "ONLY_OFFICIAL_ANSWER_SHEETS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "ONLY_OFFICIAL_ANSWER_SHEETS = False\nVOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "VOTING_FULLSCREEN_DISPLAY_REMAINING_USERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "VOTING_FULLSCREEN_DISPLAY_REMAINING_USERS = False\nAUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "AUTO_TRANSLATE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "AUTO_TRANSLATE = True\nAUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "AUTO_TRANSLATE_LANGUAGES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "AUTO_TRANSLATE_LANGUAGES = [{\"language\": \"af\", \"name\": \"Afrikaans\"}, {\"language\": \"sq\", \"name\": \"Albanian\"}, {\"language\": \"am\", \"name\": \"Amharic\"}, {\"language\": \"ar\", \"name\": \"Arabic\"}, {\"language\": \"hy\", \"name\": \"Armenian\"}, {\"language\": \"az\", \"name\": \"Azerbaijani\"}, {\"language\": \"eu\", \"name\": \"Basque\"}, {\"language\": \"be\", \"name\": \"Belarusian\"}, {\"language\": \"bn\", \"name\": \"Bengali\"}, {\"language\": \"bs\", \"name\": \"Bosnian\"}, {\"language\": \"bg\", \"name\": \"Bulgarian\"}, {\"language\": \"ca\", \"name\": \"Catalan\"}, {\"language\": \"ceb\", \"name\": \"Cebuano\"}, {\"language\": \"ny\", \"name\": \"Chichewa\"}, {\"language\": \"zh\", \"name\": \"Chinese (Simplified)\"}, {\"language\": \"zh-TW\", \"name\": \"Chinese (Traditional)\"}, {\"language\": \"co\", \"name\": \"Corsican\"}, {\"language\": \"hr\", \"name\": \"Croatian\"}, {\"language\": \"cs\", \"name\": \"Czech\"}, {\"language\": \"da\", \"name\": \"Danish\"}, {\"language\": \"nl\", \"name\": \"Dutch\"}, {\"language\": \"en\", \"name\": \"English\"}, {\"language\": \"eo\", \"name\": \"Esperanto\"}, {\"language\": \"et\", \"name\": \"Estonian\"}, {\"language\": \"tl\", \"name\": \"Filipino\"}, {\"language\": \"fi\", \"name\": \"Finnish\"}, {\"language\": \"fr\", \"name\": \"French\"}, {\"language\": \"fy\", \"name\": \"Frisian\"}, {\"language\": \"gl\", \"name\": \"Galician\"}, {\"language\": \"ka\", \"name\": \"Georgian\"}, {\"language\": \"de\", \"name\": \"German\"}, {\"language\": \"el\", \"name\": \"Greek\"}, {\"language\": \"gu\", \"name\": \"Gujarati\"}, {\"language\": \"ht\", \"name\": \"Haitian Creole\"}, {\"language\": \"ha\", \"name\": \"Hausa\"}, {\"language\": \"haw\", \"name\": \"Hawaiian\"}, {\"language\": \"iw\", \"name\": \"Hebrew\"}, {\"language\": \"hi\", \"name\": \"Hindi\"}, {\"language\": \"hmn\", \"name\": \"Hmong\"}, {\"language\": \"hu\", \"name\": \"Hungarian\"}, {\"language\": \"is\", \"name\": \"Icelandic\"}, {\"language\": \"ig\", \"name\": \"Igbo\"}, {\"language\": \"id\", \"name\": \"Indonesian\"}, {\"language\": \"ga\", \"name\": \"Irish\"}, {\"language\": \"it\", \"name\": \"Italian\"}, {\"language\": \"ja\", \"name\": \"Japanese\"}, {\"language\": \"jw\", \"name\": \"Javanese\"}, {\"language\": \"kn\", \"name\": \"Kannada\"}, {\"language\": \"kk\", \"name\": \"Kazakh\"}, {\"language\": \"km\", \"name\": \"Khmer\"}, {\"language\": \"ko\", \"name\": \"Korean\"}, {\"language\": \"ku\", \"name\": \"Kurdish (Kurmanji)\"}, {\"language\": \"ky\", \"name\": \"Kyrgyz\"}, {\"language\": \"lo\", \"name\": \"Lao\"}, {\"language\": \"la\", \"name\": \"Latin\"}, {\"language\": \"lv\", \"name\": \"Latvian\"}, {\"language\": \"lt\", \"name\": \"Lithuanian\"}, {\"language\": \"lb\", \"name\": \"Luxembourgish\"}, {\"language\": \"mk\", \"name\": \"Macedonian\"}, {\"language\": \"mg\", \"name\": \"Malagasy\"}, {\"language\": \"ms\", \"name\": \"Malay\"}, {\"language\": \"ml\", \"name\": \"Malayalam\"}, {\"language\": \"mt\", \"name\": \"Maltese\"}, {\"language\": \"mi\", \"name\": \"Maori\"}, {\"language\": \"mr\", \"name\": \"Marathi\"}, {\"language\": \"mn\", \"name\": \"Mongolian\"}, {\"language\": \"my\", \"name\": \"Myanmar (Burmese)\"}, {\"language\": \"ne\", \"name\": \"Nepali\"}, {\"language\": \"no\", \"name\": \"Norwegian\"}, {\"language\": \"ps\", \"name\": \"Pashto\"}, {\"language\": \"fa\", \"name\": \"Persian\"}, {\"language\": \"pl\", \"name\": \"Polish\"}, {\"language\": \"pt\", \"name\": \"Portuguese\"}, {\"language\": \"pa\", \"name\": \"Punjabi\"}, {\"language\": \"ro\", \"name\": \"Romanian\"}, {\"language\": \"ru\", \"name\": \"Russian\"}, {\"language\": \"sm\", \"name\": \"Samoan\"}, {\"language\": \"gd\", \"name\": \"Scots Gaelic\"}, {\"language\": \"sr\", \"name\": \"Serbian\"}, {\"language\": \"st\", \"name\": \"Sesotho\"}, {\"language\": \"sn\", \"name\": \"Shona\"}, {\"language\": \"sd\", \"name\": \"Sindhi\"}, {\"language\": \"si\", \"name\": \"Sinhala\"}, {\"language\": \"sk\", \"name\": \"Slovak\"}, {\"language\": \"sl\", \"name\": \"Slovenian\"}, {\"language\": \"so\", \"name\": \"Somali\"}, {\"language\": \"es\", \"name\": \"Spanish\"}, {\"language\": \"su\", \"name\": \"Sundanese\"}, {\"language\": \"sw\", \"name\": \"Swahili\"}, {\"language\": \"sv\", \"name\": \"Swedish\"}, {\"language\": \"tg\", \"name\": \"Tajik\"}, {\"language\": \"ta\", \"name\": \"Tamil\"}, {\"language\": \"te\", \"name\": \"Telugu\"}, {\"language\": \"th\", \"name\": \"Thai\"}, {\"language\": \"tr\", \"name\": \"Turkish\"}, {\"language\": \"uk\", \"name\": \"Ukrainian\"}, {\"language\": \"ur\", \"name\": \"Urdu\"}, {\"language\": \"uz\", \"name\": \"Uzbek\"}, {\"language\": \"vi\", \"name\": \"Vietnamese\"}, {\"language\": \"cy\", \"name\": \"Welsh\"}, {\"language\": \"xh\", \"name\": \"Xhosa\"}, {\"language\": \"yi\", \"name\": \"Yiddish\"}, {\"language\": \"yo\", \"name\": \"Yoruba\"}, {\"language\": \"zu\", \"name\": \"Zulu\"}]\nGOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "GOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "GOOGLE_TRANSLATE_SERVICE_ACCOUNT_KEY = r\"\"\"{}\"\"\"\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "ADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n    ('Michele Dolfi', 'michele.dolfi@gmail.com'),\n)\nMANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "MANAGERS = ADMINS\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',  # Set to empty string for default.",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'ipho.db',  # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',  # Set to empty string for default.\n    }",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "description": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "peekOfCode": "SECRET_KEY = '^t-a=sbo_05wq!*(x4mpv7kw&u_n=5js$lwadn_yx(bzx*fzjw'",
        "detail": "src.components.Exam.exam_tools.exam_tools.settings_example",
        "documentation": {}
    },
    {
        "label": "render_page",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.exam_tools.static_views",
        "description": "src.components.Exam.exam_tools.exam_tools.static_views",
        "peekOfCode": "def render_page(request, p, **kwargs):\n    return render(request, p, **kwargs)",
        "detail": "src.components.Exam.exam_tools.exam_tools.static_views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.urls",
        "description": "src.components.Exam.exam_tools.exam_tools.urls",
        "peekOfCode": "urlpatterns = [\n    # Examples:\n    # url(r'^$', 'exam_tools.views.home', name='home'),\n    # url(r'^exam_tools/', include('exam_tools.foo.urls')),\n    url(\n        r'^$',\n        static_views.render_page, {\n            'p': 'pages/home.html',\n            'context': {\n                'push': settings.ENABLE_PUSH,",
        "detail": "src.components.Exam.exam_tools.exam_tools.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.wsgi",
        "description": "src.components.Exam.exam_tools.exam_tools.wsgi",
        "peekOfCode": "application = get_wsgi_application()\n# Apply WSGI middleware here.\n# from helloworld.wsgi import HelloWorldApplication\n# application = HelloWorldApplication(application)",
        "detail": "src.components.Exam.exam_tools.exam_tools.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.exam_tools.wsgi_uzh",
        "description": "src.components.Exam.exam_tools.exam_tools.wsgi_uzh",
        "peekOfCode": "application = get_wsgi_application()\n# Apply WSGI middleware here.\n# from helloworld.wsgi import HelloWorldApplication\n# application = HelloWorldApplication(application)",
        "detail": "src.components.Exam.exam_tools.exam_tools.wsgi_uzh",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AccountRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.0002_delegation_auto_translate_char_count",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.0002_delegation_auto_translate_char_count",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='delegation',\n            name='auto_translate_char_count',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.0002_delegation_auto_translate_char_count",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Delegation',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(unique=True, max_length=3)),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0002_student_code",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0002_student_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='student',\n            name='code',\n            field=models.CharField(default='', unique=True, max_length=10),\n            preserve_default=False,",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0002_student_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0003_auto_20150222_2058",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0003_auto_20150222_2058",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0002_student_code'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='delegation',\n            name='members',\n            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, blank=True),\n            preserve_default=True,",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0003_auto_20150222_2058",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0004_auto_20150222_2105",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0004_auto_20150222_2105",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0003_auto_20150222_2058'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='student',\n            old_name='firstname',\n            new_name='first_name',\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0004_auto_20150222_2105",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0005_iphoperm",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0005_iphoperm",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0004_auto_20150222_2105'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='IphoPerm',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n            ],",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0005_iphoperm",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0006_auto_20160207_2210",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0006_auto_20160207_2210",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0005_iphoperm'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='delegation',\n            name='name',\n            field=models.CharField(unique=True, max_length=4),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0006_auto_20160207_2210",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0007_autologin",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0007_autologin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('ipho_core', '0006_auto_20160207_2210'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AutoLogin',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0007_autologin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0008_auto_20160528_1544",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0008_auto_20160528_1544",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0007_autologin'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='iphoperm',\n            options={\n                'permissions': (('is_leader', 'Is a leader'), ('is_staff', 'Is an organizer'),\n                                ('print_technopark',",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0008_auto_20160528_1544",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0009_auto_20160626_1205",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0009_auto_20160626_1205",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0008_auto_20160528_1544'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='iphoperm',\n            options={\n                'permissions':\n                (('is_delegation', 'Is a delegation'), ('is_marker', 'Is a marker'), ('can_vote', 'Can vote'),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0009_auto_20160626_1205",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0010_auto_20160707_1848",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0010_auto_20160707_1848",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0009_auto_20160626_1205'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='delegation',\n            options={'ordering': ['name']},\n        ),\n        migrations.AlterModelOptions(",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0010_auto_20160707_1848",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0011_auto_20170226_0947",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0011_auto_20170226_0947",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0010_auto_20160707_1848'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='delegation',\n            name='name',\n            field=models.CharField(unique=True, max_length=8),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0011_auto_20170226_0947",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0011_auto_20170226_0947'),\n    ]\n    operations = [migrations.RunPython(change_official)]",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "documentation": {}
    },
    {
        "label": "change_official",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "peekOfCode": "def change_official(apps, schema_editor):\n    Delegation = apps.get_model('ipho_core', 'Delegation')\n    try:\n        official_delegation = Delegation.objects.get(name='IPhO')\n        official_delegation.name = settings.OFFICIAL_DELEGATION\n        official_delegation.save()\n    except Delegation.DoesNotExist:\n        pass\nclass Migration(migrations.Migration):\n    dependencies = [",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0012_auto_20170226_0949",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0013_auto_20170415_1331",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0013_auto_20170415_1331",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0012_auto_20170226_0949'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='iphoperm',\n            options={\n                'permissions': (('is_delegation', 'Is a delegation'), ('is_marker',\n                                                                       'Is a marker'), ('can_vote', 'Can vote'),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0013_auto_20170415_1331",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0014_accountrequest",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0014_accountrequest",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('ipho_core', '0013_auto_20170415_1331'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AccountRequest',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0014_accountrequest",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0015_auto_20180704_1126",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0015_auto_20180704_1126",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0014_accountrequest'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='iphoperm',\n            options={'permissions': (('is_delegation', 'Is a delegation'), ('is_marker', 'Is a marker'), ('can_vote', 'Can vote'), ('is_staff', 'Is an organizer'), ('can_impersonate', 'Can impersonate delegations'), ('print_technopark', 'Can print in Technopark'), ('print_irchel', 'Can print in Irchel'), ('is_printstaff', 'Is a print staff'))},\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0015_auto_20180704_1126",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0016_pushsubscription",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0016_pushsubscription",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('ipho_core', '0015_auto_20180704_1126'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PushSubscription',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', auto_created=True, serialize=False, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0016_pushsubscription",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0017_randomdrawlog",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0017_randomdrawlog",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0016_pushsubscription'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='RandomDrawLog',\n            fields=[\n                ('id', models.AutoField(auto_created=True, serialize=False, primary_key=True, verbose_name='ID')),\n                ('timestamp', models.DateTimeField(auto_now=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0017_randomdrawlog",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0018_randomdrawlog_status",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0018_randomdrawlog_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0017_randomdrawlog'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='randomdrawlog',\n            name='status',\n            field=models.CharField(choices=[('pending', 'Pending'), ('received', 'Received')], default='pending', max_length=200),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0018_randomdrawlog_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0019_auto_20180725_0306",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0019_auto_20180725_0306",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0018_randomdrawlog_status'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='randomdrawlog',\n            name='status',\n            field=models.CharField(choices=[('pending', 'Pending'), ('received', 'Received'), ('failed', 'Failed')], default='pending', max_length=200),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0019_auto_20180725_0306",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0020_randomdrawlog_tag",
        "description": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0020_randomdrawlog_tag",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0019_auto_20180725_0306'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='randomdrawlog',\n            name='tag',\n            field=models.CharField(default='', max_length=200),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_core.migrations.bk.0020_randomdrawlog_tag",
        "documentation": {}
    },
    {
        "label": "AutoLoginInline",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class AutoLoginInline(admin.StackedInline):\n    model = AutoLogin\n    can_delete = False\n    verbose_name_plural = 'autologin'\nclass UserAdmin(BaseUserAdmin):\n    inlines = (AutoLoginInline, )\nclass DelegationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'country')\n    filter_horizontal = ('members', )\nclass StudentAdmin(admin.ModelAdmin):",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    inlines = (AutoLoginInline, )\nclass DelegationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'country')\n    filter_horizontal = ('members', )\nclass StudentAdmin(admin.ModelAdmin):\n    fields = (\n        'code',\n        ('first_name', 'last_name'),\n        'delegation',",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "DelegationAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class DelegationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'country')\n    filter_horizontal = ('members', )\nclass StudentAdmin(admin.ModelAdmin):\n    fields = (\n        'code',\n        ('first_name', 'last_name'),\n        'delegation',\n    )\n    list_display = (",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "StudentAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class StudentAdmin(admin.ModelAdmin):\n    fields = (\n        'code',\n        ('first_name', 'last_name'),\n        'delegation',\n    )\n    list_display = (\n        'code',\n        'last_name',\n        'first_name',",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "AccountRequestAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class AccountRequestAdmin(admin.ModelAdmin):\n    list_display = ('email', 'user', 'timestamp')\n    search_fields = ('user', 'email')\n    list_filter = ('user', )\nclass PushSubscriptionAdmin(admin.ModelAdmin):\n    pass\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\nadmin.site.register(Delegation, DelegationAdmin)\nadmin.site.register(Student, StudentAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "PushSubscriptionAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.admin",
        "description": "src.components.Exam.exam_tools.ipho_core.admin",
        "peekOfCode": "class PushSubscriptionAdmin(admin.ModelAdmin):\n    pass\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\nadmin.site.register(Delegation, DelegationAdmin)\nadmin.site.register(Student, StudentAdmin)\nadmin.site.register(AccountRequest, AccountRequestAdmin)\nadmin.site.register(PushSubscription, PushSubscriptionAdmin)\nadmin.site.register(RandomDrawLog)",
        "detail": "src.components.Exam.exam_tools.ipho_core.admin",
        "documentation": {}
    },
    {
        "label": "TokenLoginBackend",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.backends",
        "description": "src.components.Exam.exam_tools.ipho_core.backends",
        "peekOfCode": "class TokenLoginBackend(object):\n    def authenticate(self, token=None):\n        if token is None:\n            return None\n        try:\n            user = User.objects.get(autologin__token=token)\n            return user\n        except User.DoesNotExist:\n            return None\n    def get_user(self, user_id):",
        "detail": "src.components.Exam.exam_tools.ipho_core.backends",
        "documentation": {}
    },
    {
        "label": "AccountRequestForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.forms",
        "description": "src.components.Exam.exam_tools.ipho_core.forms",
        "peekOfCode": "class AccountRequestForm(ModelForm):\n    user = forms.ModelChoiceField(\n        queryset=User.objects.exclude(delegation__isnull=True\n                                      ).exclude(autologin__isnull=True).exclude(is_superuser=True).order_by('username'),\n        to_field_name='username',\n        label='Delegation'\n    )\n    def __init__(self, *args, **kwargs):\n        super(AccountRequestForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()",
        "detail": "src.components.Exam.exam_tools.ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "SendPushForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.forms",
        "description": "src.components.Exam.exam_tools.ipho_core.forms",
        "peekOfCode": "class SendPushForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(SendPushForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(Field('to_all'), Field('message'), Field('url'), FormActions(Submit('submit', 'Submit')), Field('users'))\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n    users = forms.ModelMultipleChoiceField(queryset=User.objects.exclude(is_superuser=True).order_by('username').all(),\n            label=\"select users\", required = False,\n            widget=forms.widgets.CheckboxSelectMultiple,",
        "detail": "src.components.Exam.exam_tools.ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "RandomDrawForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.forms",
        "description": "src.components.Exam.exam_tools.ipho_core.forms",
        "peekOfCode": "class RandomDrawForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(RandomDrawForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(Field('do_it'), FormActions(Submit('submit', 'Submit')),)\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n    do_it = forms.BooleanField()",
        "detail": "src.components.Exam.exam_tools.ipho_core.forms",
        "documentation": {}
    },
    {
        "label": "IphoPerm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class IphoPerm(models.Model):\n    pass\n    class Meta(object):\n        permissions = (\n            ('is_delegation', 'Is a delegation'),\n            ('is_marker', 'Is a marker'),\n            ('can_vote', 'Can vote'),\n            ('is_staff', 'Is an organizer'),\n            ('can_impersonate', 'Can impersonate delegations'),\n            ('print_technopark', 'Can print in Technopark'),",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLoginManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class AutoLoginManager(models.Manager):\n    def get_by_natural_key(self, username):\n        return self.get(user=User.objects.get_by_natural_key(username))\n@python_2_unicode_compatible\nclass AutoLogin(models.Model):\n    objects = AutoLoginManager()\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    token = models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)\n    def __str__(self):\n        return str(self.token)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AutoLogin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class AutoLogin(models.Model):\n    objects = AutoLoginManager()\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    token = models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)\n    def __str__(self):\n        return str(self.token)\n    def natural_key(self):\n        return self.user.natural_key()\nclass DelegationManager(models.Manager):\n    def get_by_natural_key(self, name):",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "DelegationManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class DelegationManager(models.Manager):\n    def get_by_natural_key(self, name):\n        return self.get(name=name)\n@python_2_unicode_compatible\nclass Delegation(models.Model):\n    objects = DelegationManager()\n    name = models.CharField(unique=True, max_length=max(3, len(settings.OFFICIAL_DELEGATION)))\n    country = models.CharField(unique=True, max_length=100)\n    members = models.ManyToManyField(User, blank=True)\n    auto_translate_char_count = models.IntegerField(default=0)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Delegation",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class Delegation(models.Model):\n    objects = DelegationManager()\n    name = models.CharField(unique=True, max_length=max(3, len(settings.OFFICIAL_DELEGATION)))\n    country = models.CharField(unique=True, max_length=100)\n    members = models.ManyToManyField(User, blank=True)\n    auto_translate_char_count = models.IntegerField(default=0)\n    class Meta(object):\n        ordering = ['name']\n    def natural_key(self):\n        return (self.name, )",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "StudentManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class StudentManager(models.Manager):\n    def get_by_natural_key(self, code):\n        return self.get(code=code)\n@python_2_unicode_compatible\nclass Student(models.Model):\n    objects = StudentManager()\n    code = models.CharField(max_length=10, unique=True)\n    first_name = models.CharField(max_length=200)\n    last_name = models.CharField(max_length=200)\n    delegation = models.ForeignKey(Delegation, on_delete=models.CASCADE)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class Student(models.Model):\n    objects = StudentManager()\n    code = models.CharField(max_length=10, unique=True)\n    first_name = models.CharField(max_length=200)\n    last_name = models.CharField(max_length=200)\n    delegation = models.ForeignKey(Delegation, on_delete=models.CASCADE)\n    # exam_languages = models.ManyToManyField(Language)\n    class Meta(object):\n        ordering = ['code']\n    def natural_key(self):",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "PushSubscriptionManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class PushSubscriptionManager(models.Manager):\n    def get_by_data(self, data):\n        subs_list = super(PushSubscriptionManager, self).get_queryset().all()\n        def compare_json(d1, d2):\n            return json.loads(d1) == json.loads(d2)\n        pk_list = []\n        for subs in subs_list:\n            if compare_json(subs.data, data):\n                pk_list.append(subs.pk)\n        qset = super(PushSubscriptionManager, self).get_queryset().filter(pk__in=pk_list)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "PushSubscription",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class PushSubscription(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    data = models.TextField(null=True, blank=True)\n    timestamp = models.DateTimeField(auto_now=True)\n    objects = PushSubscriptionManager()\n    def __str__(self):\n        return u'Push data of {}'.format(self.user)\n    def send(self, data):\n        sub_data = json.loads(self.data)\n        claims = {'sub':'mailto:noreply@oly-exams.org'}",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "AccountRequest",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class AccountRequest(models.Model):\n    email = models.EmailField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    timestamp = models.DateTimeField(auto_now=True)\n    class Meta(object):\n        ordering = ['-timestamp']\n    def __str__(self):\n        return u'{} ({}) - {}'.format(self.email, self.user, self.timestamp)\nclass RandomDrawLog(models.Model):\n    delegation = models.ForeignKey(Delegation, on_delete=models.CASCADE)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "RandomDrawLog",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_core.models",
        "description": "src.components.Exam.exam_tools.ipho_core.models",
        "peekOfCode": "class RandomDrawLog(models.Model):\n    delegation = models.ForeignKey(Delegation, on_delete=models.CASCADE)\n    timestamp = models.DateTimeField(auto_now=True)\n    status = models.CharField(max_length=200, default = 'pending', choices=(('pending','Pending'), ('received', 'Received'), ('failed', 'Failed')))\n    tag = models.CharField(max_length=200, default='')\n    def __str__(self):\n        return u'{} - {}'.format(self.delegation, self.status)",
        "detail": "src.components.Exam.exam_tools.ipho_core.models",
        "documentation": {}
    },
    {
        "label": "any_permission_required",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def any_permission_required(*args):\n    \"\"\"\n    A decorator which checks user has any of the given permissions.\n    permission required can not be used in its place as that takes only a\n    single permission.\n    \"\"\"\n    def test_func(user):\n        for perm in args:\n            if user.has_perm(perm):\n                return True",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "autologin",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def autologin(request, token):\n    if not DEMO_MODE and not request.user.has_perm('ipho_core.is_staff'):\n        return HttpResponseForbidden('Only the staff can use autologin.')\n    user = authenticate(token=token)\n    redirect_to = reverse('home')\n    if user:\n        login(request, user)\n        return redirect(redirect_to)\n    else:\n        return redirect(settings.LOGIN_URL + '?next={}'.format(redirect_to))",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "account_request",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def account_request(request):\n    if not DEMO_SIGN_UP and not request.user.has_perm('ipho_core.is_staff'):\n        return HttpResponseForbidden('Only the staff can use account-request.')\n    form = AccountRequestForm(request.POST or None)\n    if form.is_valid():\n        form.save()\n        selected_user = form.cleaned_data['user']\n        ## Redirect authenticated user\n        user = authenticate(token=selected_user.autologin.token)\n        redirect_to = reverse('home')",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "service_worker",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def service_worker(request):\n    if request.method == 'GET':\n        return render(request, 'service_worker.js', content_type=\"application/x-javascript\")\n    return HttpResponseForbidden('Nothing to see here')\n@login_required\ndef register_push_submission(request):\n    if request.method == 'POST' and settings.ENABLE_PUSH:\n        data = request.POST.copy()\n        del data['csrfmiddlewaretoken']\n        newdata = {}",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "register_push_submission",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def register_push_submission(request):\n    if request.method == 'POST' and settings.ENABLE_PUSH:\n        data = request.POST.copy()\n        del data['csrfmiddlewaretoken']\n        newdata = {}\n        def get_nd(d, keys):\n            for key in keys:\n                d = d[key]\n            return d\n        def set_nd(d, keys, value):",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "delete_push_submission",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def delete_push_submission(request):\n    if request.method == 'POST':\n        data = request.POST.copy()\n        del data['csrfmiddlewaretoken']\n        newdata = {}\n        def get_nd(d, keys):\n            for key in keys:\n                d = d[key]\n            return d\n        def set_nd(d, keys, value):",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "send_push",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def send_push(request):\n    if not settings.ENABLE_PUSH:\n        return HttpResponseForbidden('Push not enabled')\n    if request.method == 'POST':\n        form = SendPushForm(request.POST)\n        if form.is_valid():\n            if form.cleaned_data['to_all']:\n                ulist = User.objects.all()\n            else:\n                ulist = form.cleaned_data['users'].all()",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "random_draw",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def random_draw(request):\n    if not request.user.is_superuser:\n        return HttpResponse('It is not easter yet.')\n    if not settings.ENABLE_PUSH:\n        return HttpResponseForbidden('Push not enabled')\n    if request.method == 'POST':\n        import random\n        drawn_delegations = RandomDrawLog.objects.filter(tag='manual').values_list('delegation__pk', flat=True)\n        off_pk = Delegation.objects.get_by_natural_key(OFFICIAL_DELEGATION).pk\n        exclude_delegations = list(drawn_delegations.all())",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "list_impersonate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def list_impersonate(request):\n    users = User.objects.exclude(delegation__isnull=True).exclude(autologin__isnull=True).order_by('username')\n    chunk_size = max(old_div(len(users), 6) + 1, 1)\n    grouped_users = [users[x:x + chunk_size] for x in range(0, len(users), chunk_size)]\n    return render(request, 'ipho_core/impersonate.html', {'grouped_users': grouped_users})\n@login_required\ndef chocobunny(request):\n    print('Yay, chocolate!')\n    delegation = Delegation.objects.filter(members=request.user).first()\n    if delegation is None:",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "chocobunny",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "def chocobunny(request):\n    print('Yay, chocolate!')\n    delegation = Delegation.objects.filter(members=request.user).first()\n    if delegation is None:\n        name = request.user.username\n        message = \"Wait, you're not in a delegation.. how did you get here?\"\n    else:\n        name = delegation.country\n        if RandomDrawLog.objects.filter(delegation=delegation).exists():\n            draw_logs = RandomDrawLog.objects.filter(delegation=delegation)",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "DEMO_MODE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "DEMO_MODE = getattr(settings, 'DEMO_MODE')\nDEMO_SIGN_UP = getattr(settings, 'DEMO_SIGN_UP')\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\ndef any_permission_required(*args):\n    \"\"\"\n    A decorator which checks user has any of the given permissions.\n    permission required can not be used in its place as that takes only a\n    single permission.\n    \"\"\"\n    def test_func(user):",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "DEMO_SIGN_UP",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "DEMO_SIGN_UP = getattr(settings, 'DEMO_SIGN_UP')\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\ndef any_permission_required(*args):\n    \"\"\"\n    A decorator which checks user has any of the given permissions.\n    permission required can not be used in its place as that takes only a\n    single permission.\n    \"\"\"\n    def test_func(user):\n        for perm in args:",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_core.views",
        "description": "src.components.Exam.exam_tools.ipho_core.views",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\ndef any_permission_required(*args):\n    \"\"\"\n    A decorator which checks user has any of the given permissions.\n    permission required can not be used in its place as that takes only a\n    single permission.\n    \"\"\"\n    def test_func(user):\n        for perm in args:\n            if user.has_perm(perm):",
        "detail": "src.components.Exam.exam_tools.ipho_core.views",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_download.urls",
        "description": "src.components.Exam.exam_tools.ipho_download.urls",
        "peekOfCode": "app_name = 'download'\nurlpatterns = [\n    url(r'^$', views.main, {\n        'url': '',\n        'type': 'd'\n    }, name='main'),\n    url(r'^(?P<type>[fd])/(?P<url>.*)$', views.main, name='path'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_download.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_download.urls",
        "description": "src.components.Exam.exam_tools.ipho_download.urls",
        "peekOfCode": "urlpatterns = [\n    url(r'^$', views.main, {\n        'url': '',\n        'type': 'd'\n    }, name='main'),\n    url(r'^(?P<type>[fd])/(?P<url>.*)$', views.main, name='path'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_download.urls",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_download.views",
        "description": "src.components.Exam.exam_tools.ipho_download.views",
        "peekOfCode": "def hash(fname):\n    h = hashlib.sha256()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            h.update(chunk)\n    return h.hexdigest()\n@login_required\ndef main(request, type, url):\n    url = os.path.normpath(url)\n    basedir = os.path.join(MEDIA_ROOT, 'downloads')",
        "detail": "src.components.Exam.exam_tools.ipho_download.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_download.views",
        "description": "src.components.Exam.exam_tools.ipho_download.views",
        "peekOfCode": "def main(request, type, url):\n    url = os.path.normpath(url)\n    basedir = os.path.join(MEDIA_ROOT, 'downloads')\n    path = os.path.join(basedir, url)\n    rel_url = os.path.relpath(path, basedir)\n    if rel_url[0] == '.' and '/' in rel_url:\n        raise Http404('File path not valid.')\n    if not os.path.exists(path):\n        raise Http404('File not found.')\n    if type == 'f':",
        "detail": "src.components.Exam.exam_tools.ipho_download.views",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_download.views",
        "description": "src.components.Exam.exam_tools.ipho_download.views",
        "peekOfCode": "MEDIA_ROOT = getattr(settings, 'MEDIA_ROOT')\ndef hash(fname):\n    h = hashlib.sha256()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            h.update(chunk)\n    return h.hexdigest()\n@login_required\ndef main(request, type, url):\n    url = os.path.normpath(url)",
        "detail": "src.components.Exam.exam_tools.ipho_download.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.management.commands.export_exam",
        "description": "src.components.Exam.exam_tools.ipho_exam.management.commands.export_exam",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Export the exam that matches the name'\n    def add_arguments(self, parser):\n        parser.add_argument('--name', type=str, help='Search term in Exam name.')\n        parser.add_argument(\n            '--format', default='json', dest='format', help='Specifies the output serialization format for fixtures.'\n        )\n        parser.add_argument(\n            '--indent',\n            default=2,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.management.commands.export_exam",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('ipho_core', '0001_initial'),\n        ('contenttypes', '0002_remove_content_type_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AttributeChange',\n            fields=[",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.0002_auto_20190406_1503",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.0002_auto_20190406_1503",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='feedback',\n            name='org_comment',\n            field=models.TextField(blank=True, default=None, null=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.0002_auto_20190406_1503",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.0003_studentsubmission_with_question",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.0003_studentsubmission_with_question",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0002_auto_20190406_1503'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='studentsubmission',\n            name='with_question',\n            field=models.BooleanField(default=True, help_text='Deliver question sheets.'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.0003_studentsubmission_with_question",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.0004_cachedautotranslation",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.0004_cachedautotranslation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0003_studentsubmission_with_question'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CachedAutoTranslation',\n            fields=[\n                ('source_and_lang_hash', models.BinaryField(max_length=16, primary_key=True, serialize=False)),\n                ('source_length', models.IntegerField()),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.0004_cachedautotranslation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.0005_auto_20190711_2244",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.0005_auto_20190711_2244",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0004_cachedautotranslation'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='cachedautotranslation',\n            name='source_and_lang_hash',\n            field=models.CharField(max_length=32, primary_key=True, serialize=False),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.0005_auto_20190711_2244",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Exam',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=100)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0002_auto_20150222_1914",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0002_auto_20150222_1914",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='translationnode',\n            unique_together=set([('question', 'language')]),\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0002_auto_20150222_1914",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0003_auto_20150222_2101",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0003_auto_20150222_2101",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0002_auto_20150222_1914'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='delegation',\n            field=models.ManyToManyField(to='ipho_core.Delegation', blank=True),\n            preserve_default=True,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0003_auto_20150222_2101",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0004_auto_20150509_2028",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0004_auto_20150509_2028",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0003_auto_20150222_2101'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='extraheader',\n            field=models.TextField(default='', blank=True),\n            preserve_default=False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0004_auto_20150509_2028",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0005_auto_20150509_2109",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0005_auto_20150509_2109",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0004_auto_20150509_2028'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='polyglossia',\n            field=models.CharField(\n                default=b'english',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0005_auto_20150509_2109",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0006_language_delegation2",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0006_language_delegation2",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0004_auto_20150222_2105'),\n        ('ipho_exam', '0005_auto_20150509_2109'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='delegation2',\n            field=models.ForeignKey(related_name='lang_delegation', blank=True, to='ipho_core.Delegation', null=True),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0006_language_delegation2",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0004_auto_20150222_2105'),\n        ('ipho_exam', '0006_language_delegation2'),\n    ]\n    operations = [\n        migrations.RunPython(copy_delegation),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "documentation": {}
    },
    {
        "label": "copy_delegation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "peekOfCode": "def copy_delegation(apps, schema_editor):\n    # We can't import the Person model directly as it may be a newer\n    # version than this migration expects. We use the historical version.\n    Language = apps.get_model(\"ipho_exam\", \"Language\")\n    for lang in Language.objects.all():\n        for deleg in lang.delegation.all():\n            lang.delegation2 = deleg\n            lang.save()\nclass Migration(migrations.Migration):\n    dependencies = [",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0007_populate_delegation2",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0008_remove_language_delegation",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0008_remove_language_delegation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0007_populate_delegation2'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='language',\n            name='delegation',\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0008_remove_language_delegation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0009_rename_delegation",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0009_rename_delegation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0004_auto_20150222_2105'),\n        ('ipho_exam', '0008_remove_language_delegation'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='language',\n            old_name='delegation2',\n            new_name='delegation',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0009_rename_delegation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0010_auto_20150514_2346",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0010_auto_20150514_2346",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0009_rename_delegation'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Figure',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField(max_length=100)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0010_auto_20150514_2346",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0011_auto_20151006_2328",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0011_auto_20151006_2328",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0005_iphoperm'),\n        ('ipho_exam', '0010_auto_20150514_2346'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Feedback',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0011_auto_20151006_2328",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0012_exam_feedback_active",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0012_exam_feedback_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0011_auto_20151006_2328'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='feedback_active',\n            field=models.BooleanField(default=False, help_text=b'Are feedbacks allowed?'),\n            preserve_default=True,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0012_exam_feedback_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0013_auto_20151107_1041",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0013_auto_20151107_1041",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0012_exam_feedback_active'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='question',\n            name='position',\n            field=models.PositiveSmallIntegerField(help_text=b'Sorting index inside one exam'),\n            preserve_default=True,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0013_auto_20151107_1041",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0014_studentsubmission",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0014_studentsubmission",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0005_iphoperm'),\n        ('ipho_exam', '0013_auto_20151107_1041'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StudentSubmission',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0014_studentsubmission",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0015_examdelegationsubmission",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0015_examdelegationsubmission",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0005_iphoperm'),\n        ('ipho_exam', '0014_studentsubmission'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExamDelegationSubmission',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0015_examdelegationsubmission",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0016_auto_20151109_1835",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0016_auto_20151109_1835",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0015_examdelegationsubmission'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='examdelegationsubmission',\n            name='status',\n            field=models.CharField(\n                default=b'O',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0016_auto_20151109_1835",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0017_auto_20151109_2225",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0017_auto_20151109_2225",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0016_auto_20151109_1835'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='examdelegationsubmission',\n            unique_together=set([('exam', 'delegation')]),\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0017_auto_20151109_2225",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0018_auto_20151115_2204",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0018_auto_20151115_2204",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0017_auto_20151109_2225'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='studentsubmission',\n            name='with_answer',\n            field=models.BooleanField(default=False, help_text=b'Deliver also answer sheet.'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0018_auto_20151115_2204",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0019_question_type",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0019_question_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0018_auto_20151115_2204'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='type',\n            field=models.CharField(default=b'Q', max_length=1, choices=[(b'Q', b'Question'), (b'A', b'Answer')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0019_question_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0020_auto_20151206_1741",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0020_auto_20151206_1741",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0019_question_type'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='language',\n            unique_together=set([('name', 'delegation')]),\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0020_auto_20151206_1741",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0021_auto_20151222_1835",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0021_auto_20151222_1835",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0020_auto_20151206_1741'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='versionnode',\n            options={'ordering': ['-version', '-timestamp']},\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0021_auto_20151222_1835",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0022_language_direction",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0022_language_direction",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0021_auto_20151222_1835'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='direction',\n            field=models.CharField(\n                default=b'ltr', max_length=3, choices=[(b'ltr', b'Left-to-right'), (b'rtl', b'Right-to-left')]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0022_language_direction",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0023_auto_20160207_1820",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0023_auto_20160207_1820",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0022_language_direction'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='exam',\n            name='name',\n            field=models.CharField(unique=True, max_length=100),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0023_auto_20160207_1820",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0024_language_font",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0024_language_font",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0023_auto_20160207_1820'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='font',\n            field=models.CharField(\n                default=b'Arial Unicode MS',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0024_language_font",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0025_auto_20160228_1738",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0025_auto_20160228_1738",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0024_language_font'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='font',\n            field=models.CharField(\n                default=b'notosans',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0025_auto_20160228_1738",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0026_auto_20160229_2149",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0026_auto_20160229_2149",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0025_auto_20160228_1738'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='name',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0026_auto_20160229_2149",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0027_question_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0027_question_points",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0026_auto_20160229_2149'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='points',\n            field=models.PositiveSmallIntegerField(default=20),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0027_question_points",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0028_remove_question_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0028_remove_question_points",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0027_question_points'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='question',\n            name='points',\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0028_remove_question_points",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0029_auto_20160309_1515",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0029_auto_20160309_1515",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0028_remove_question_points'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='status',\n            field=models.CharField(\n                default=b'S', max_length=1, choices=[(b'S', b'Submitted'), (b'P', b'In progress'), (b'R', b'Resolved')]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0029_auto_20160309_1515",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0030_language_style",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0030_language_style",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0029_auto_20160309_1515'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='style',\n            field=models.CharField(\n                blank=True,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0030_language_style",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0031_auto_20160425_1752",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0031_auto_20160425_1752",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0030_language_style'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PDFNode',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('pdf', models.FileField(upload_to=b'', blank=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0031_auto_20160425_1752",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0032_auto_20160427_2319",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0032_auto_20160427_2319",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0031_auto_20160425_1752'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='pdfnode',\n            name='pdf',\n            field=models.FileField(upload_to=ipho_exam.models.get_file_path, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0032_auto_20160427_2319",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_auto_20160505_1109",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_auto_20160505_1109",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0032_auto_20160427_2319'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='examdelegationsubmission',\n            name='action',\n            field=models.CharField(\n                default='T', max_length=2, choices=[(b'T', b'Translation submission'), (b'P', b'Points submission')]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_auto_20160505_1109",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_translationimporttmp",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_translationimporttmp",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0032_auto_20160427_2319'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TranslationImportTmp',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('slug', models.UUIDField(default=uuid.uuid4, editable=False, db_index=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0033_translationimporttmp",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0034_rename_examdelegation_submission",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0034_rename_examdelegation_submission",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0033_auto_20160505_1109'),\n    ]\n    operations = [migrations.RenameModel('ExamDelegationSubmission', 'ExamAction')]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0034_rename_examdelegation_submission",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0035_auto_20160505_1150",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0035_auto_20160505_1150",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0034_rename_examdelegation_submission'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='examaction',\n            name='delegation',\n            field=models.ForeignKey(related_name='exam_status', to='ipho_core.Delegation'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0035_auto_20160505_1150",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0035_auto_20160505_1150'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    Exam = apps.get_model(\"ipho_exam\", \"Exam\")\n    ExamAction = apps.get_model(\"ipho_exam\", \"ExamAction\")\n    Delegation = apps.get_model(\"ipho_core\", \"Delegation\")\n    db_alias = schema_editor.connection.alias\n    for delegation in Delegation.objects.using(db_alias).all():\n        for exam in Exam.objects.using(db_alias).all():\n            for action in ['T', 'P']:  # would be nicer to have ExamAction.ACTION_CHOICES, but it is not accessible\n                exam_action, _ = ExamAction.objects.using(db_alias).get_or_create(\n                    exam=exam, delegation=delegation, action=action",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0036_create_default_actions_20160505_1725",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0037_merge",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0037_merge",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0033_translationimporttmp'),\n        ('ipho_exam', '0036_create_default_actions_20160505_1725'),\n    ]\n    operations = []",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0037_merge",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0038_auto_20160523_2126",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0038_auto_20160523_2126",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0007_autologin'),\n        ('ipho_exam', '0037_merge'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Document',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0038_auto_20160523_2126",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0039_auto_20160524_2155",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0039_auto_20160524_2155",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0038_auto_20160523_2126'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='document',\n            name='file',\n            field=models.FileField(upload_to=ipho_exam.models.exam_prints_filename, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0039_auto_20160524_2155",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0040_question_type_num",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0040_question_type_num",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0039_auto_20160524_2155'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='type_num',\n            field=models.PositiveSmallIntegerField(default=0, choices=[(0, b'Question'), (1, b'Answer')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0040_question_type_num",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0040_question_type_num'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    Question = apps.get_model(\"ipho_exam\", \"Question\")\n    db_alias = schema_editor.connection.alias\n    for q in Question.objects.using(db_alias).all():\n        if q.type == 'Q': q.type_num = 0\n        if q.type == 'A': q.type_num = 1\n        q.save()\ndef backwards_func(apps, schema_editor):\n    Question = apps.get_model(\"ipho_exam\", \"Question\")\n    db_alias = schema_editor.connection.alias",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "peekOfCode": "def backwards_func(apps, schema_editor):\n    Question = apps.get_model(\"ipho_exam\", \"Question\")\n    db_alias = schema_editor.connection.alias\n    for q in Question.objects.using(db_alias).all():\n        if q.type_num == 0: q.type = 'Q'\n        if q.type_num == 1: q.type = 'A'\n        q.save()\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0040_question_type_num'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0041_step1",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0042_step2",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0042_step2",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0041_step1'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='question',\n            name='type',\n        ),\n        migrations.RenameField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0042_step2",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0043_auto_20160528_1544",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0043_auto_20160528_1544",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0042_step2'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='question',\n            options={'ordering': ['position', 'type']},\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0043_auto_20160528_1544",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0044_documenttask",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0044_documenttask",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0043_auto_20160528_1544'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DocumentTask',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('task_id', models.CharField(unique=True, max_length=255)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0044_documenttask",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0045_auto_20160529_1458",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0045_auto_20160529_1458",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0044_documenttask'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='documenttask',\n            name='document',\n            field=models.OneToOneField(to='ipho_exam.Document'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0045_auto_20160529_1458",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0046_feedback_part",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0046_feedback_part",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0045_auto_20160529_1458'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='feedback',\n            name='part',\n            field=models.CharField(default='General', max_length=100),\n            preserve_default=False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0046_feedback_part",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0046_feedback_part'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    for node_name in ['VersionNode', 'TranslationNode']:\n        NodeType = apps.get_model(\"ipho_exam\", node_name)\n        for node in NodeType.objects.using(db_alias).all():\n            node.text = qpattern.sub('id=\"q0_', node.text)\n            node.text = qpattern2.sub('id=\"q0\"', node.text)\n            node.save()\ndef backwards_func(apps, schema_editor):\n    pass",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "peekOfCode": "def backwards_func(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0046_feedback_part'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "documentation": {}
    },
    {
        "label": "qpattern",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "peekOfCode": "qpattern = re.compile(r'id=\"q(\\d+)_')\nqpattern2 = re.compile(r'id=\"q(\\d+)\"')\ndef forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    for node_name in ['VersionNode', 'TranslationNode']:\n        NodeType = apps.get_model(\"ipho_exam\", node_name)\n        for node in NodeType.objects.using(db_alias).all():\n            node.text = qpattern.sub('id=\"q0_', node.text)\n            node.text = qpattern2.sub('id=\"q0\"', node.text)\n            node.save()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "documentation": {}
    },
    {
        "label": "qpattern2",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "peekOfCode": "qpattern2 = re.compile(r'id=\"q(\\d+)\"')\ndef forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    for node_name in ['VersionNode', 'TranslationNode']:\n        NodeType = apps.get_model(\"ipho_exam\", node_name)\n        for node in NodeType.objects.using(db_alias).all():\n            node.text = qpattern.sub('id=\"q0_', node.text)\n            node.text = qpattern2.sub('id=\"q0\"', node.text)\n            node.save()\ndef backwards_func(apps, schema_editor):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0047_remove_id_from_question_qml",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0048_auto_20160531_1921",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0048_auto_20160531_1921",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0047_remove_id_from_question_qml'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='code',\n            field=models.CharField(default='E', max_length=8),\n            preserve_default=False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0048_auto_20160531_1921",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0048_auto_20160531_1921'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    Question = apps.get_model(\"ipho_exam\", \"Question\")\n    for q in Question.objects.using(db_alias).all():\n        if q.type == 0:\n            q.code = 'Q'\n        elif q.type == 1:\n            q.code = 'A'\n            q.save()\ndef backwards_func(apps, schema_editor):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "peekOfCode": "def backwards_func(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0048_auto_20160531_1921'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0049_auto_20160531_1923",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0049_auto_20160531_1923'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "documentation": {}
    },
    {
        "label": "question_points",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "peekOfCode": "def question_points(root, part_num=-1, subq_num=0):\n    part_code = lambda num: chr(65 + num)\n    for obj in root.children:\n        if isinstance(obj, qml.QMLpart):\n            part_num += 1\n            subq_num = 0\n            if not 'Part' in obj.data:\n                obj.data = 'Part {}: '.format(part_code(part_num)) + obj.data\n        if isinstance(obj, qml.QMLsubquestion):\n            subq_num += 1",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    for node_name in ['VersionNode', 'TranslationNode']:\n        NodeType = apps.get_model(\"ipho_exam\", node_name)\n        for node in NodeType.objects.using(db_alias).all():\n            if not '<question' in node.text: continue\n            q = qml.QMLquestion(node.text)\n            question_points(q)\n            node.text = qml.xml2string(q.make_xml())\n            node.save()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "peekOfCode": "def backwards_func(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0049_auto_20160531_1923'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0050_auto_20160608_1016",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0051_auto_20160612_1348",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0051_auto_20160612_1348",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0050_auto_20160608_1016'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PrintLog',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('type', models.CharField(max_length=1, choices=[(b'P', b'Printout'), (b'S', b'Scan')])),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0051_auto_20160612_1348",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0052_like",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0052_like",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0008_auto_20160528_1544'),\n        ('ipho_exam', '0051_auto_20160612_1348'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Like',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0052_like",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0053_auto_20160605_1133",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0053_auto_20160605_1133",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0052_like'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='like',\n            old_name='Feedback',\n            new_name='feedback',\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0053_auto_20160605_1133",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0054_auto_20160606_2243",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0054_auto_20160606_2243",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0053_auto_20160605_1133'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='like',\n            name='status',\n            field=models.CharField(max_length=1, choices=[(b'L', b'Liked'), (b'U', b'Unliked')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0054_auto_20160606_2243",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0055_auto_20160619_1605",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0055_auto_20160619_1605",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0054_auto_20160606_2243'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='polyglossia',\n            field=models.CharField(\n                default=b'english',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0055_auto_20160619_1605",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0056_versionnode_tag",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0056_versionnode_tag",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0055_auto_20160619_1605'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='versionnode',\n            name='tag',\n            field=models.CharField(max_length=100, null=True, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0056_versionnode_tag",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0057_auto_20160619_1739",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0057_auto_20160619_1739",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0056_versionnode_tag'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='versionnode',\n            name='status',\n            field=models.CharField(\n                max_length=1, choices=[(b'P', b'Proposal'), (b'S', b'Staged'), (b'C', b'Confirmed')]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0057_auto_20160619_1739",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0058_auto_20160619_1855",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0058_auto_20160619_1855",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0057_auto_20160619_1739'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='exam',\n            name='feedback_active',\n        ),\n        migrations.AddField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0058_auto_20160619_1855",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0059_auto_20160620_2023",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0059_auto_20160620_2023",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0058_auto_20160619_1855'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='part',\n            field=models.CharField(default=None, max_length=100),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0059_auto_20160620_2023",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0060_auto_20160622_1351",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0060_auto_20160622_1351",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0059_auto_20160620_2023'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='font',\n            field=models.CharField(\n                default=b'notosans',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0060_auto_20160622_1351",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0061_question_working_pages",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0061_question_working_pages",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0060_auto_20160622_1351'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='working_pages',\n            field=models.PositiveSmallIntegerField(default=0, help_text=b'How many pages for working sheets'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0061_question_working_pages",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0062_language_polyglossia_options",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0062_language_polyglossia_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0061_question_working_pages'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='polyglossia_options',\n            field=models.TextField(null=True, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0062_language_polyglossia_options",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0063_auto_20160623_1659",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0063_auto_20160623_1659",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0062_language_polyglossia_options'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='document',\n            name='barcode_base',\n            field=models.TextField(),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0063_auto_20160623_1659",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0064_auto_20160623_1711",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0064_auto_20160623_1711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0063_auto_20160623_1659'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='figure',\n            name='name',\n            field=models.CharField(max_length=100, db_index=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0064_auto_20160623_1711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0065_auto_20160626_1624",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0065_auto_20160626_1624",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0064_auto_20160623_1711'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='document',\n            name='scan_msg',\n            field=models.TextField(null=True, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0065_auto_20160626_1624",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0066_exam_marking_active",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0066_exam_marking_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0065_auto_20160626_1624'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='marking_active',\n            field=models.BooleanField(default=False, help_text=b'Allow marking submission from delegations.'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0066_exam_marking_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0067_document_scan_file_orig",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0067_document_scan_file_orig",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0066_exam_marking_active'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='document',\n            name='scan_file_orig',\n            field=models.FileField(upload_to=ipho_exam.models.exam_scans_filename, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0067_document_scan_file_orig",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0068_auto_20160703_0941",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0068_auto_20160703_0941",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0067_document_scan_file_orig'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='document',\n            name='scan_file_orig',\n            field=models.FileField(upload_to=ipho_exam.models.exam_scans_orig_filename, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0068_auto_20160703_0941",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0069_document_extra_num_pages",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0069_document_extra_num_pages",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0068_auto_20160703_0941'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='document',\n            name='extra_num_pages',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0069_document_extra_num_pages",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0069_document_extra_num_pages'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "documentation": {}
    },
    {
        "label": "update_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "peekOfCode": "def update_question(root):\n    for obj in root.children:\n        if isinstance(obj, qml.QMLpart):\n            if not 'points' in obj.data:\n                obj.data = u'{} ({} points)'.format(obj.data, obj.attributes['points'])\n        if isinstance(obj, qml.QMLtitle):\n            if not 'points' in obj.data:\n                obj.data = u'{} ({} points)'.format(obj.data, 10)\n        update_question(obj)\ndef forwards_func(apps, schema_editor):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    for node_name in ['VersionNode', 'TranslationNode']:\n        NodeType = apps.get_model(\"ipho_exam\", node_name)\n        for node in NodeType.objects.using(db_alias).all():\n            if not '<question' in node.text: continue\n            try:\n                q = qml.QMLquestion(node.text)\n                update_question(q)\n                node.text = qml.xml2string(q.make_xml())",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "peekOfCode": "def backwards_func(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0069_document_extra_num_pages'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0070_auto_20160706_1727",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0071_place",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0071_place",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0009_auto_20160626_1205'),\n        ('ipho_exam', '0070_auto_20160706_1727'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Place',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0071_place",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0072_auto_20160706_2249",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0072_auto_20160706_2249",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0071_place'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='place',\n            unique_together=set([('student', 'exam')]),\n        ),\n        migrations.AlterIndexTogether(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0072_auto_20160706_2249",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0072_auto_20160706_2249'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n    Exam = apps.get_model(\"ipho_exam\", \"Exam\")\n    Student = apps.get_model(\"ipho_core\", \"Student\")\n    Place = apps.get_model(\"ipho_exam\", \"Place\")\n    for exam in Exam.objects.using(db_alias).all():\n        for student in Student.objects.using(db_alias).all():\n            Place(exam=exam, student=student, name='CHANGEME').save()\ndef backwards_func(*args, **kwargs):\n    pass",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "peekOfCode": "def backwards_func(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0072_auto_20160706_2249'),\n    ]\n    operations = [\n        migrations.RunPython(forwards_func, backwards_func),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0073_auto_20160707_1010",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0074_auto_20160707_1328",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0074_auto_20160707_1328",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0073_auto_20160707_1010'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='status',\n            field=models.CharField(\n                default=b'S',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0074_auto_20160707_1328",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0075_auto_20160707_1411",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0075_auto_20160707_1411",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0074_auto_20160707_1328'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='status',\n            field=models.CharField(\n                default=b'S',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0075_auto_20160707_1411",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0076_auto_20160707_2144",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0076_auto_20160707_2144",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0075_auto_20160707_1411'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AttributeChange',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('content', models.TextField(blank=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0076_auto_20160707_2144",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0077_auto_20160707_2157",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0077_auto_20160707_2157",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0076_auto_20160707_2144'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='attributechange',\n            name='node',\n            field=models.OneToOneField(to='ipho_exam.TranslationNode'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0077_auto_20160707_2157",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0078_auto_20170218_1212",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0078_auto_20170218_1212",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0077_auto_20160707_2157'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='language',\n            name='hidden_from_submission',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0078_auto_20170218_1212",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0079_compiledfigure",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0079_compiledfigure",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0078_auto_20170218_1212'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompiledFigure',\n            fields=[\n                (\n                    'figure_ptr',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0079_compiledfigure",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0079_compiledfigure'),\n    ]\n    operations = [migrations.RunPython(move_figures)]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "documentation": {}
    },
    {
        "label": "move_figures",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "peekOfCode": "def move_figures(apps, schema_editor):\n    Figure = apps.get_model('ipho_exam', 'Figure')\n    CompiledFigure = apps.get_model('ipho_exam', 'CompiledFigure')\n    for f in Figure.objects.all():\n        if not isinstance(f, CompiledFigure):\n            cf = CompiledFigure(id=f.id, name=f.name, content=f.content, params=f.params)\n            cf.save()\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0079_compiledfigure'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0080_auto_20170305_1555",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0080_auto_20170305_1555'),\n    ]\n    operations = [\n        migrations.RenameField('Figure', 'content', 'tmp_content'),\n        migrations.RenameField('Figure', 'params', 'tmp_params'),\n        migrations.AddField(\n            model_name='compiledfigure',\n            name='content',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "documentation": {}
    },
    {
        "label": "copy_content_params",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "peekOfCode": "def copy_content_params(apps, schema_editor):\n    CompiledFigure = apps.get_model('ipho_exam', 'CompiledFigure')\n    for cf in CompiledFigure.objects.all():\n        cf.params = cf.tmp_params\n        cf.content = cf.tmp_content\n        cf.save()\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0080_auto_20170305_1555'),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0081_auto_20170305_1605",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0082_auto_20170305_1640",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0082_auto_20170305_1640",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0081_auto_20170305_1605'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='figure',\n            name='tmp_content',\n        ),\n        migrations.RemoveField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0082_auto_20170305_1640",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('ipho_exam', '0082_auto_20170305_1640'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='figure',\n            name='polymorphic_ctype',\n            field=models.ForeignKey(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    Figure = apps.get_model('ipho_exam', 'Figure')\n    CompiledFigure = apps.get_model('ipho_exam', 'CompiledFigure')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    new_ct = ContentType.objects.get_for_model(CompiledFigure)\n    Figure.objects.filter(polymorphic_ctype__isnull=True).update(polymorphic_ctype=new_ct)\ndef backwards_func(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "peekOfCode": "def backwards_func(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('ipho_exam', '0082_auto_20170305_1640'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='figure',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0083_figure_polymorphic_ctype",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0084_rawfigure",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0084_rawfigure",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0083_figure_polymorphic_ctype'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='RawFigure',\n            fields=[\n                (\n                    'figure_ptr',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0084_rawfigure",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0085_auto_20170319_1521",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0085_auto_20170319_1521",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0084_rawfigure'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='question',\n            name='code',\n            field=models.CharField(\n                help_text=b'e.g. Q for Question, A for Answer Sheet, G for General Instruction', max_length=8",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0085_auto_20170319_1521",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0086_auto_20170325_1652",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0086_auto_20170325_1652",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0085_auto_20170319_1521'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='document',\n            name='barcode_base',\n            field=models.TextField(help_text=b'Common base barcode on all pages'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0086_auto_20170325_1652",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0087_exam_moderation_active",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0087_exam_moderation_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0086_auto_20170325_1652'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='moderation_active',\n            field=models.BooleanField(default=False, help_text=b'Allow access to moderation interface.'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0087_exam_moderation_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1725",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1725",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0087_exam_moderation_active'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='style',\n            field=models.CharField(blank=True, max_length=200, null=True, choices=[('afrikaans', 'Afrikaans'), ('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('azerbaijani', 'Azerbaijani'), ('basque', 'Basque'), ('belarusian', 'Belarusian'), ('bengali', 'Bengali'), ('bosnian', 'Bosnian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('burmese', 'Burmese'), ('cantonese', 'Cantonese'), ('catalan', 'Catalan'), ('chinese', 'Chinese'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('filipino', 'Filipino'), ('finnish', 'Finnish'), ('french', 'French'), ('friulian', 'Friulian'), ('galician', 'Galician'), ('georgian', 'Georgian'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('hungarian', 'Hungarian'), ('icelandic', 'Icelandic'), ('indonesian', 'Indonesian'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('japanese', 'Japanese'), ('kannada', 'Kannada'), ('kazakh', 'Kazakh'), ('khmer', 'Khmer'), ('korean', 'Korean'), ('kurdish', 'Kurdish'), ('kyrgyz', 'Kyrgyz'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('luxembourgish', 'Luxembourgish'), ('macedonian', 'Macedonian'), ('magyar', 'Magyar'), ('malay', 'Malay'), ('malayalam', 'Malayalam'), ('malaysian', 'Malaysian'), ('mandarin', 'Mandarin'), ('marathi', 'Marathi'), ('mongolian', 'Mongolian'), ('montenegrin', 'Montenegrin'), ('nepali', 'Nepali'), ('northern sotho', 'Northern Sotho'), ('norwegian bokm\\xe5l', 'Norwegian Bokm\\xe5l'), ('norwegian nynorsk', 'Norwegian Nynorsk'), ('occitan', 'Occitan'), ('persian', 'Persian'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuguese', 'Portuguese'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('sinhalese', 'Sinhalese'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('southern ndebele', 'Southern Ndebele'), ('southern sotho', 'Southern Sotho'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tajik', 'Tajik'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('tsonga', 'Tsonga'), ('tswana', 'Tswana'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('uzbek', 'Uzbek'), ('venda', 'Venda'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('xhosa', 'Xhosa'), ('zulu', 'Zulu')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1725",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1756",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1756",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0087_exam_moderation_active'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='document',\n            name='barcode_base',\n            field=models.TextField(help_text='Common base barcode on all pages'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0088_auto_20180317_1756",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0089_merge",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0089_merge",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0088_auto_20180317_1756'),\n        ('ipho_exam', '0088_auto_20180317_1725'),\n    ]\n    operations = [\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0089_merge",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_add-chinese-traditional-language",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_add-chinese-traditional-language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0089_merge'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='language',\n            name='style',\n            field=models.CharField(max_length=200, blank=True, null=True, choices=[('afrikaans', 'Afrikaans'), ('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('azerbaijani', 'Azerbaijani'), ('basque', 'Basque'), ('belarusian', 'Belarusian'), ('bengali', 'Bengali'), ('bosnian', 'Bosnian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('burmese', 'Burmese'), ('cantonese', 'Cantonese'), ('catalan', 'Catalan'), ('chinese', 'Chinese (simplified)'), ('chinese_tc', 'Chinese (traditional)'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('filipino', 'Filipino'), ('finnish', 'Finnish'), ('french', 'French'), ('friulian', 'Friulian'), ('galician', 'Galician'), ('georgian', 'Georgian'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('hungarian', 'Hungarian'), ('icelandic', 'Icelandic'), ('indonesian', 'Indonesian'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('japanese', 'Japanese'), ('kannada', 'Kannada'), ('kazakh', 'Kazakh'), ('khmer', 'Khmer'), ('korean', 'Korean'), ('kurdish', 'Kurdish'), ('kyrgyz', 'Kyrgyz'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('luxembourgish', 'Luxembourgish'), ('macedonian', 'Macedonian'), ('magyar', 'Magyar'), ('malay', 'Malay'), ('malayalam', 'Malayalam'), ('malaysian', 'Malaysian'), ('mandarin', 'Mandarin'), ('marathi', 'Marathi'), ('mongolian', 'Mongolian'), ('montenegrin', 'Montenegrin'), ('nepali', 'Nepali'), ('northern sotho', 'Northern Sotho'), ('norwegian bokmål', 'Norwegian Bokmål'), ('norwegian nynorsk', 'Norwegian Nynorsk'), ('occitan', 'Occitan'), ('persian', 'Persian'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuguese', 'Portuguese'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('sinhalese', 'Sinhalese'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('southern ndebele', 'Southern Ndebele'), ('southern sotho', 'Southern Sotho'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tajik', 'Tajik'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('tsonga', 'Tsonga'), ('tswana', 'Tswana'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('uzbek', 'Uzbek'), ('venda', 'Venda'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('xhosa', 'Xhosa'), ('zulu', 'Zulu')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_add-chinese-traditional-language",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0089_merge'),\n    ]\n    operations = [\n        # non-unique\n        migrations.AddField(\n            model_name='figure',\n            name='fig_id',\n            field=models.URLField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "get_updated_figid",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "def get_updated_figid(apps, figid):\n    Figure = apps.get_model('ipho_exam', 'Figure')\n    fig = Figure.objects.get(pk=int(figid))\n    return fig.fig_id\ndef migrate_version_node(apps, qml_obj):\n    if isinstance(qml_obj, QMLfigure):\n        qml_obj.attributes['figid'] = get_updated_figid(apps, qml_obj.attributes['figid'])\n    for child in qml_obj.children:\n        migrate_version_node(apps, child)\ndef migrate_attr_change(apps, mapping):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "migrate_version_node",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "def migrate_version_node(apps, qml_obj):\n    if isinstance(qml_obj, QMLfigure):\n        qml_obj.attributes['figid'] = get_updated_figid(apps, qml_obj.attributes['figid'])\n    for child in qml_obj.children:\n        migrate_version_node(apps, child)\ndef migrate_attr_change(apps, mapping):\n    for key, value in mapping.items():\n        if key == 'figid':\n            mapping[key] = get_updated_figid(apps, value)\n        elif isinstance(value, Mapping):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "migrate_attr_change",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "def migrate_attr_change(apps, mapping):\n    for key, value in mapping.items():\n        if key == 'figid':\n            mapping[key] = get_updated_figid(apps, value)\n        elif isinstance(value, Mapping):\n            migrate_attr_change(apps, mapping=value)\ndef forwards_func(apps, schema_editor):\n    Figure = apps.get_model('ipho_exam', 'Figure')\n    for fig in Figure.objects.all():\n        fig.fig_id = ipho_exam.utils.natural_id.generate_id()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "forwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "def forwards_func(apps, schema_editor):\n    Figure = apps.get_model('ipho_exam', 'Figure')\n    for fig in Figure.objects.all():\n        fig.fig_id = ipho_exam.utils.natural_id.generate_id()\n        fig.save()\n    VersionNode = apps.get_model('ipho_exam', 'VersionNode')\n    for version_node in VersionNode.objects.all():\n        version_qml = make_qml(version_node)\n        migrate_version_node(apps, version_qml)\n        version_node.text = qml.xml2string(version_qml.make_xml())",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "backwards_func",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "peekOfCode": "def backwards_func(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0089_merge'),\n    ]\n    operations = [\n        # non-unique\n        migrations.AddField(\n            model_name='figure',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0090_figure_natural_key",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0091_fix-voting-spelling-mistake",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0091_fix-voting-spelling-mistake",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0090_add-chinese-traditional-language'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='status',\n            field=models.CharField(max_length=1, default='S', choices=[('S', 'Submitted'), ('V', 'Scheduled for voting'), ('I', 'Implemented'), ('T', 'Settled')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0091_fix-voting-spelling-mistake",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0092_merge",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0092_merge",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0091_fix-voting-spelling-mistake'),\n        ('ipho_exam', '0090_figure_natural_key'),\n    ]\n    operations = [\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0092_merge",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0093_auto_20180606_2330",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0093_auto_20180606_2330",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0092_merge'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='figure',\n            name='fig_id',\n            field=models.URLField(max_length=100, unique=True, db_index=True, default=ipho_exam.utils.natural_id.generate_id),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0093_auto_20180606_2330",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0094_document_timestamp",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0094_document_timestamp",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0093_auto_20180606_2330'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='document',\n            name='timestamp',\n            field=models.DateTimeField(null=True, auto_now=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0094_document_timestamp",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0095_auto_20180721_1344",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0095_auto_20180721_1344",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0094_document_timestamp'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='feedback',\n            name='status',\n            field=models.CharField(choices=[('S', 'Submitted'), ('V', 'Scheduled for voting'), ('I', 'Implemented'), ('T', 'Settled'), ('R', 'Rejected')], default='S', max_length=1),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0095_auto_20180721_1344",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0096_auto_20180724_1310",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0096_auto_20180724_1310",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0095_auto_20180721_1344'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='show_scans',\n            field=models.BooleanField(default=False, help_text='Show successful scans to delegation.'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0096_auto_20180724_1310",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0097_exam_hide_feedback",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0097_exam_hide_feedback",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0096_auto_20180724_1310'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='exam',\n            name='hide_feedback',\n            field=models.BooleanField(default=False, help_text='Hide feedback from delegations'),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0097_exam_hide_feedback",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0098_auto_20190309_2303",
        "description": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0098_auto_20190309_2303",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0097_exam_hide_feedback'),\n    ]\n    operations = [\n        migrations.AlterModelManagers(\n            name='compiledfigure',\n            managers=[\n                ('objects', django.db.models.manager.Manager()),\n                ('base_objects', django.db.models.manager.Manager()),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.migrations.bk.0098_auto_20190309_2303",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.templatetags.editor_extras",
        "description": "src.components.Exam.exam_tools.ipho_exam.templatetags.editor_extras",
        "peekOfCode": "def lookup(value, arg):\n    return value[arg]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.templatetags.editor_extras",
        "documentation": {}
    },
    {
        "label": "to_intlist",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "description": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "peekOfCode": "def to_intlist(raw_list):\n    return [int(li) for li in raw_list]\n@register.simple_tag(takes_context=True)\ndef this_url(context, **kwargs):\n    func = context['this_url_builder']\n    return func(**kwargs)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "documentation": {}
    },
    {
        "label": "this_url",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "description": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "peekOfCode": "def this_url(context, **kwargs):\n    func = context['this_url_builder']\n    return func(**kwargs)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.templatetags.exam_utils_tags",
        "documentation": {}
    },
    {
        "label": "generate_id",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "description": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "peekOfCode": "def generate_id():\n    adj_choice = random.choice(ADJ_LIST)\n    noun_choice = random.choice(NOUN_LIST)\n    return adj_choice + '_' + noun_choice",
        "detail": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "documentation": {}
    },
    {
        "label": "ADJ_LIST",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "description": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "peekOfCode": "ADJ_LIST = ['different', 'used', 'important', 'every', 'large', 'available', 'popular', 'able', 'basic', 'known', 'various', 'difficult', 'several', 'united', 'historical', 'hot', 'useful', 'mental', 'scared', 'additional', 'emotional', 'old', 'political', 'similar', 'healthy', 'financial', 'medical', 'traditional', 'federal', 'entire', 'strong', 'actual', 'significant', 'successful', 'electrical', 'expensive', 'pregnant', 'intelligent', 'interesting', 'poor', 'happy', 'responsible', 'cute', 'helpful', 'recent', 'willing', 'nice', 'wonderful', 'impossible', 'serious', 'huge', 'rare', 'technical', 'typical', 'competitive', 'critical', 'electronic', 'immediate', 'aware', 'educational', 'environmental', 'global', 'legal', 'relevant', 'accurate', 'capable', 'dangerous', 'dramatic', 'efficient', 'powerful', 'foreign', 'hungry', 'practical', 'psychological', 'severe', 'suitable', 'numerous', 'sufficient', 'unusual', 'consistent', 'cultural', 'existing', 'famous', 'pure', 'afraid', 'obvious', 'careful', 'latter', 'obviously', 'unhappy', 'acceptable', 'aggressive', 'boring', 'distinct', 'eastern', 'logical', 'reasonable', 'strict', 'successfully', 'administrative', 'automatic', 'civil', 'former', 'massive', 'southern', 'unfair', 'visible', 'alive', 'angry', 'desperate', 'exciting', 'friendly', 'lucky', 'realistic', 'sorry', 'ugly', 'unlikely', 'anxious', 'comprehensive', 'curious', 'impressive', 'informal', 'inner', 'pleasant', 'sexual', 'sudden', 'terrible', 'unable', 'weak', 'wooden', 'asleep', 'confident', 'conscious', 'decent', 'embarrassed', 'guilty', 'lonely', 'mad', 'nervous', 'odd', 'remarkable', 'substantial', 'suspicious', 'tall', 'tiny', 'more', 'some', 'all', 'many', 'most', 'other', 'such', 'even', 'new', 'just', 'good', 'any', 'each', 'much', 'own', 'great', 'another', 'same', 'few', 'free', 'right', 'still', 'best', 'public', 'human', 'both', 'local', 'sure', 'better', 'general', 'specific', 'enough', 'long', 'small', 'less', 'high', 'certain', 'little', 'common', 'next', 'simple', 'hard', 'past', 'big', 'possible', 'particular', 'real', 'major', 'personal', 'current', 'left', 'national', 'least', 'natural', 'physical', 'short', 'last', 'single', 'individual', 'main', 'potential', 'professional', 'international', 'lower', 'open', 'according', 'alternative', 'special', 'working', 'true', 'whole', 'clear', 'dry', 'easy', 'cold', 'commercial', 'full', 'low', 'primary', 'worth', 'necessary', 'positive', 'present', 'close', 'creative', 'green', 'late', 'fit', 'glad', 'proper', 'complex', 'content', 'due', 'effective', 'middle', 'regular', 'fast', 'independent', 'original', 'wide', 'beautiful', 'complete', 'active', 'negative', 'safe', 'visual', 'wrong', 'ago', 'quick', 'ready', 'straight', 'white', 'direct', 'excellent', 'extra', 'junior', 'pretty', 'unique', 'classic', 'final', 'overall', 'private', 'separate', 'western', 'alone', 'familiar', 'official', 'perfect', 'bright', 'broad', 'comfortable', 'flat', 'rich', 'warm', 'young', 'heavy', 'valuable', 'correct', 'leading', 'slow', 'clean', 'fresh', 'normal', 'secret', 'tough', 'brown', 'cheap', 'deep', 'objective', 'secure', 'thin', 'chemical', 'cool', 'extreme', 'exact', 'fair', 'fine', 'formal', 'opposite', 'remote', 'total', 'vast', 'lost', 'smooth', 'dark', 'double', 'equal', 'firm', 'frequent', 'internal', 'sensitive', 'constant', 'minor', 'previous', 'raw', 'soft', 'solid', 'weird', 'amazing', 'annual', 'busy', 'dead', 'false', 'round', 'sharp', 'thick', 'wise', 'equivalent', 'initial', 'narrow', 'nearby', 'proud', 'spiritual', 'wild', 'adult', 'apart', 'brief', 'crazy', 'prior', 'rough', 'sad', 'sick', 'strange', 'external', 'illegal', 'loud', 'mobile', 'nasty', 'ordinary', 'royal', 'senior', 'super', 'tight', 'upper', 'yellow', 'dependent', 'funny', 'gross', 'ill', 'spare', 'sweet', 'upstairs', 'usual', 'brave', 'calm', 'dirty', 'downtown', 'grand', 'honest', 'loose', 'male', 'quiet', 'brilliant', 'dear', 'drunk', 'empty', 'female', 'inevitable', 'neat', 'ok', 'representative', 'silly', 'slight', 'smart', 'stupid', 'temporary', 'weekly', 'that', 'this', 'what', 'which', 'time', 'these', 'work', 'only', 'then', 'first', 'money', 'over', 'business', 'his', 'game', 'think', 'after', 'life', 'day', 'home', 'economy', 'away', 'either', 'fat', 'key', 'training', 'top', 'level', 'far', 'fun', 'house', 'kind', 'future', 'action', 'live', 'period', 'subject', 'mean', 'stock', 'chance', 'beginning', 'upset', 'chicken', 'head', 'material', 'salt', 'car', 'appropriate', 'inside', 'outside', 'standard', 'medium', 'choice', 'north', 'square', 'born', 'capital', 'shot', 'front', 'living', 'plastic', 'express', 'feeling', 'otherwise', 'plus', 'savings', 'animal', 'budget', 'minute', 'character', 'maximum', 'novel', 'plenty', 'select', 'background', 'forward', 'glass', 'joint', 'master', 'red', 'vegetable', 'ideal', 'kitchen', 'mother', 'party', 'relative', 'signal', 'street', 'connect', 'minimum', 'sea', 'south', 'status', 'daughter', 'hour', 'trick', 'afternoon', 'gold', 'mission', 'agent', 'corner', 'east', 'neither', 'parking', 'routine', 'swimming', 'winter', 'airline', 'designer', 'dress', 'emergency', 'evening', 'extension', 'holiday', 'horror', 'mountain', 'patient', 'proof', 'west', 'wine', 'expert', 'native', 'opening', 'silver', 'waste', 'plane', 'leather', 'purple', 'specialist', 'bitter', 'incident', 'motor', 'pretend', 'prize', 'resident'] # yapf:disable\nNOUN_LIST = ['people', 'history', 'way', 'art', 'world', 'information', 'map', 'family', 'government', 'health', 'system', 'computer', 'meat', 'year', 'thanks', 'music', 'person', 'reading', 'method', 'data', 'food', 'understanding', 'theory', 'law', 'bird', 'literature', 'problem', 'software', 'control', 'knowledge', 'power', 'ability', 'economics', 'love', 'internet', 'television', 'science', 'library', 'nature', 'fact', 'product', 'idea', 'temperature', 'investment', 'area', 'society', 'activity', 'story', 'industry', 'media', 'thing', 'oven', 'community', 'definition', 'safety', 'quality', 'development', 'language', 'management', 'player', 'variety', 'video', 'week', 'security', 'country', 'exam', 'movie', 'organization', 'equipment', 'physics', 'analysis', 'policy', 'series', 'thought', 'basis', 'boyfriend', 'direction', 'strategy', 'technology', 'army', 'camera', 'freedom', 'paper', 'environment', 'child', 'instance', 'month', 'truth', 'marketing', 'university', 'writing', 'article', 'department', 'difference', 'goal', 'news', 'audience', 'fishing', 'growth', 'income', 'marriage', 'user', 'combination', 'failure', 'meaning', 'medicine', 'philosophy', 'teacher', 'communication', 'night', 'chemistry', 'disease', 'disk', 'energy', 'nation', 'road', 'role', 'soup', 'advertising', 'location', 'success', 'addition', 'apartment', 'education', 'math', 'moment', 'painting', 'politics', 'attention', 'decision', 'event', 'property', 'shopping', 'student', 'wood', 'competition', 'distribution', 'entertainment', 'office', 'population', 'president', 'unit', 'category', 'cigarette', 'context', 'introduction', 'opportunity', 'performance', 'driver', 'flight', 'length', 'magazine', 'newspaper', 'relationship', 'teaching', 'cell', 'dealer', 'finding', 'lake', 'member', 'message', 'phone', 'scene', 'appearance', 'association', 'concept', 'customer', 'death', 'discussion', 'housing', 'inflation', 'insurance', 'mood', 'woman', 'advice', 'blood', 'effort', 'expression', 'importance', 'opinion', 'payment', 'reality', 'responsibility', 'situation', 'skill', 'statement', 'wealth', 'application', 'city', 'county', 'depth', 'estate', 'foundation', 'grandmother', 'heart', 'perspective', 'photo', 'recipe', 'studio', 'topic', 'collection', 'depression', 'imagination', 'passion', 'percentage', 'resource', 'setting', 'ad', 'agency', 'college', 'connection', 'criticism', 'debt', 'description', 'memory', 'patience', 'secretary', 'solution', 'administration', 'aspect', 'attitude', 'director', 'personality', 'psychology', 'recommendation', 'response', 'selection', 'storage', 'version', 'alcohol', 'argument', 'complaint', 'contract', 'emphasis', 'highway', 'loss', 'membership', 'possession', 'preparation', 'steak', 'union', 'agreement', 'cancer', 'currency', 'employment', 'engineering', 'entry', 'interaction', 'mixture', 'preference', 'region', 'republic', 'tradition', 'virus', 'actor', 'classroom', 'delivery', 'device', 'difficulty', 'drama', 'election', 'engine', 'football', 'guidance', 'hotel', 'owner', 'priority', 'protection', 'suggestion', 'tension', 'variation', 'anxiety', 'atmosphere', 'awareness', 'bath', 'bread', 'candidate', 'climate', 'comparison', 'confusion', 'construction', 'elevator', 'emotion', 'employee', 'employer', 'guest', 'height', 'leadership', 'mall', 'manager', 'operation', 'recording', 'sample', 'transportation', 'charity', 'cousin', 'disaster', 'editor', 'efficiency', 'excitement', 'extent', 'feedback', 'guitar', 'homework', 'leader', 'mom', 'outcome', 'permission', 'presentation', 'promotion', 'reflection', 'refrigerator', 'resolution', 'revenue', 'session', 'singer', 'tennis', 'basket', 'bonus', 'cabinet', 'childhood', 'church', 'clothes', 'coffee', 'dinner', 'drawing', 'hair', 'hearing', 'initiative', 'judgment', 'lab', 'measurement', 'mode', 'mud', 'orange', 'poetry', 'police', 'possibility', 'procedure', 'queen', 'ratio', 'relation', 'restaurant', 'satisfaction', 'sector', 'signature', 'significance', 'song', 'tooth', 'town', 'vehicle', 'volume', 'wife', 'accident', 'airport', 'appointment', 'arrival', 'assumption', 'baseball', 'chapter', 'committee', 'conversation', 'database', 'enthusiasm', 'error', 'explanation', 'farmer', 'gate', 'girl', 'hall', 'historian', 'hospital', 'injury', 'instruction', 'maintenance', 'manufacturer', 'meal', 'perception', 'pie', 'poem', 'presence', 'proposal', 'reception', 'replacement', 'revolution', 'river', 'son', 'speech', 'tea', 'village', 'warning', 'winner', 'worker', 'writer', 'assistance', 'breath', 'buyer', 'chest', 'chocolate', 'conclusion', 'contribution', 'cookie', 'courage', 'desk', 'drawer', 'establishment', 'examination', 'garbage', 'grocery', 'honey', 'impression', 'improvement', 'independence', 'insect', 'inspection', 'inspector', 'king', 'ladder', 'menu', 'penalty', 'piano', 'potato', 'profession', 'professor', 'quantity', 'reaction', 'requirement', 'salad', 'sister', 'supermarket', 'tongue', 'weakness', 'wedding', 'affair', 'ambition', 'analyst', 'apple', 'assignment', 'assistant', 'bathroom', 'bedroom', 'beer', 'birthday', 'celebration', 'championship', 'cheek', 'client', 'consequence', 'departure', 'diamond', 'dirt', 'ear', 'fortune', 'friendship', 'funeral', 'gene', 'girlfriend', 'hat', 'indication', 'intention', 'lady', 'midnight', 'negotiation', 'obligation', 'passenger', 'pizza', 'platform', 'poet', 'pollution', 'recognition', 'reputation', 'shirt', 'sir', 'speaker', 'stranger', 'surgery', 'sympathy', 'tale', 'throat', 'trainer', 'uncle', 'youth', 'time', 'work', 'film', 'water', 'money', 'example', 'while', 'business', 'study', 'game', 'life', 'form', 'air', 'day', 'place', 'number', 'part', 'field', 'fish', 'back', 'process', 'heat', 'hand', 'experience', 'job', 'book', 'end', 'point', 'type', 'home', 'economy', 'value', 'body', 'market', 'guide', 'interest', 'state', 'radio', 'course', 'company', 'price', 'size', 'card', 'list', 'mind', 'trade', 'line', 'care', 'group', 'risk', 'word', 'fat', 'force', 'key', 'light', 'training', 'name', 'school', 'top', 'amount', 'level', 'order', 'practice', 'research', 'sense', 'service', 'piece', 'web', 'boss', 'sport', 'fun', 'house', 'page', 'term', 'test', 'answer', 'sound', 'focus', 'matter', 'kind', 'soil', 'board', 'oil', 'picture', 'access', 'garden', 'range', 'rate', 'reason', 'future', 'site', 'demand', 'exercise', 'image', 'case', 'cause', 'coast', 'action', 'age', 'bad', 'boat', 'record', 'result', 'section', 'building', 'mouse', 'cash', 'class', 'nothing', 'period', 'plan', 'store', 'tax', 'side', 'subject', 'space', 'rule', 'stock', 'weather', 'chance', 'figure', 'man', 'model', 'source', 'beginning', 'earth', 'program', 'chicken', 'design', 'feature', 'head', 'material', 'purpose', 'question', 'rock', 'salt', 'act', 'birth', 'car', 'dog', 'object', 'scale', 'sun', 'note', 'profit', 'rent', 'speed', 'style', 'war', 'bank', 'craft', 'half', 'inside', 'outside', 'standard', 'bus', 'exchange', 'eye', 'fire', 'position', 'pressure', 'stress', 'advantage', 'benefit', 'box', 'frame', 'issue', 'step', 'cycle', 'face', 'item', 'metal', 'paint', 'review', 'room', 'screen', 'structure', 'view', 'account', 'ball', 'discipline', 'medium', 'share', 'balance', 'bit', 'black', 'bottom', 'choice', 'gift', 'impact', 'machine', 'shape', 'tool', 'wind', 'address', 'average', 'career', 'culture', 'morning', 'pot', 'sign', 'table', 'task', 'condition', 'contact', 'credit', 'egg', 'hope', 'ice', 'network', 'north', 'square', 'attempt', 'date', 'effect', 'link', 'post', 'star', 'voice', 'capital', 'challenge', 'friend', 'self', 'shot', 'brush', 'couple', 'debate', 'exit', 'front', 'function', 'lack', 'living', 'plant', 'plastic', 'spot', 'summer', 'taste', 'theme', 'track', 'wing', 'brain', 'button', 'click', 'desire', 'foot', 'gas', 'influence', 'notice', 'rain', 'wall', 'base', 'damage', 'distance', 'feeling', 'pair', 'savings', 'staff', 'sugar', 'target', 'text', 'animal', 'author', 'budget', 'discount', 'file', 'ground', 'lesson', 'minute', 'officer', 'phase', 'reference', 'register', 'sky', 'stage', 'stick', 'title', 'trouble', 'bowl', 'bridge', 'campaign', 'character', 'club', 'edge', 'evidence', 'fan', 'letter', 'lock', 'maximum', 'novel', 'option', 'pack', 'park', 'plenty', 'quarter', 'skin', 'sort', 'weight', 'baby', 'background', 'carry', 'dish', 'factor', 'fruit', 'glass', 'joint', 'master', 'muscle', 'red', 'strength', 'traffic', 'trip', 'vegetable', 'appeal', 'chart', 'gear', 'ideal', 'kitchen', 'land', 'log', 'mother', 'net', 'party', 'principle', 'relative', 'sale', 'season', 'signal', 'spirit', 'street', 'tree', 'wave', 'belt', 'bench', 'commission', 'copy', 'drop', 'minimum', 'path', 'progress', 'project', 'sea', 'south', 'status', 'stuff', 'ticket', 'tour', 'angle', 'blue', 'breakfast', 'confidence', 'daughter', 'degree', 'doctor', 'dot', 'dream', 'duty', 'essay', 'father', 'fee', 'finance', 'hour', 'juice', 'limit', 'luck', 'milk', 'mouth', 'peace', 'pipe', 'seat', 'stable', 'storm', 'substance', 'team', 'trick', 'afternoon', 'bat', 'beach', 'blank', 'catch', 'chain', 'consideration', 'cream', 'crew', 'detail', 'gold', 'interview', 'kid', 'mark', 'match', 'mission', 'pain', 'pleasure', 'score', 'screw', 'sex', 'shop', 'shower', 'suit', 'tone', 'window', 'agent', 'band', 'block', 'bone', 'calendar', 'cap', 'coat', 'contest', 'corner', 'court', 'cup', 'district', 'door', 'east', 'finger', 'garage', 'guarantee', 'hole', 'hook', 'implement', 'layer', 'lecture', 'lie', 'manner', 'meeting', 'nose', 'parking', 'partner', 'profile', 'respect', 'rice', 'routine', 'schedule', 'swimming', 'telephone', 'tip', 'winter', 'airline', 'bag', 'battle', 'bed', 'bill', 'bother', 'cake', 'code', 'curve', 'designer', 'dimension', 'dress', 'ease', 'emergency', 'evening', 'extension', 'farm', 'fight', 'gap', 'grade', 'holiday', 'horror', 'horse', 'host', 'husband', 'loan', 'mistake', 'mountain', 'nail', 'noise', 'occasion', 'package', 'patient', 'pause', 'phrase', 'proof', 'race', 'relief', 'sand', 'sentence', 'shoulder', 'smoke', 'stomach', 'string', 'tourist', 'towel', 'vacation', 'west', 'wheel', 'wine', 'arm', 'aside', 'associate', 'bet', 'blow', 'border', 'branch', 'breast', 'brother', 'buddy', 'bunch', 'chip', 'coach', 'cross', 'document', 'draft', 'dust', 'expert', 'floor', 'god', 'golf', 'habit', 'iron', 'judge', 'knife', 'landscape', 'league', 'mail', 'mess', 'native', 'opening', 'parent', 'pattern', 'pin', 'pool', 'pound', 'request', 'salary', 'shame', 'shelter', 'shoe', 'silver', 'tackle', 'tank', 'trust', 'assist', 'bake', 'bar', 'bell', 'bike', 'blame', 'boy', 'brick', 'chair', 'closet', 'clue', 'collar', 'comment', 'conference', 'devil', 'diet', 'fear', 'fuel', 'glove', 'jacket', 'lunch', 'monitor', 'mortgage', 'nurse', 'pace', 'panic', 'peak', 'plane', 'reward', 'row', 'sandwich', 'shock', 'spite', 'spray', 'surprise', 'till', 'transition', 'weekend', 'welcome', 'yard', 'alarm', 'bend', 'bicycle', 'bite', 'blind', 'bottle', 'cable', 'candle', 'clerk', 'cloud', 'concert', 'counter', 'flower', 'grandfather', 'harm', 'knee', 'lawyer', 'leather', 'load', 'mirror', 'neck', 'pension', 'plate', 'purple', 'ruin', 'ship', 'skirt', 'slice', 'snow', 'specialist', 'stroke', 'switch', 'trash', 'tune', 'zone', 'anger', 'award', 'bid', 'bitter', 'boot', 'bug', 'camp', 'candy', 'carpet', 'cat', 'champion', 'channel', 'clock', 'comfort', 'cow', 'crack', 'engineer', 'entrance', 'fault', 'grass', 'guy', 'hell', 'highlight', 'incident', 'island', 'joke', 'jury', 'leg', 'lip', 'mate', 'motor', 'nerve', 'passage', 'pen', 'pride', 'priest', 'prize', 'promise', 'resident', 'resort', 'ring', 'roof', 'rope', 'sail', 'scheme', 'script', 'sock', 'station', 'toe', 'tower', 'truck', 'witness', 'a', 'you', 'it', 'can', 'will', 'if', 'many', 'most', 'other', 'use', 'make', 'good', 'look', 'help', 'go', 'great', 'being', 'few', 'might', 'still', 'public', 'read', 'keep', 'start', 'give', 'human', 'local', 'general', 'she', 'specific', 'long', 'play', 'feel', 'high', 'tonight', 'put', 'common', 'set', 'change', 'simple', 'past', 'big', 'possible', 'particular', 'today', 'major', 'personal', 'current', 'national', 'cut', 'natural', 'physical', 'show', 'try', 'check', 'second', 'call', 'move', 'pay', 'let', 'increase', 'single', 'individual', 'turn', 'ask', 'buy', 'guard', 'hold', 'main', 'offer', 'potential', 'professional', 'international', 'travel', 'cook', 'alternative', 'following', 'special', 'working', 'whole', 'dance', 'excuse', 'cold', 'commercial', 'low', 'purchase', 'deal', 'primary', 'worth', 'fall', 'necessary', 'positive', 'produce', 'search', 'present', 'spend', 'talk', 'creative', 'tell', 'cost', 'drive', 'green', 'support', 'glad', 'remove', 'return', 'run', 'complex', 'due', 'effective', 'middle', 'regular', 'reserve', 'independent', 'leave', 'original', 'reach', 'rest', 'serve', 'watch', 'beautiful', 'charge', 'active', 'break', 'negative', 'safe', 'stay', 'visit', 'visual', 'affect', 'cover', 'report', 'rise', 'walk', 'white', 'beyond', 'junior', 'pick', 'unique', 'anything', 'classic', 'final', 'lift', 'mix', 'private', 'stop', 'teach', 'western', 'concern', 'familiar', 'fly', 'official', 'broad', 'comfortable', 'gain', 'maybe', 'rich', 'save', 'stand', 'young', 'fail', 'heavy', 'hello', 'lead', 'listen', 'valuable', 'worry', 'handle', 'leading', 'meet', 'release', 'sell', 'finish', 'normal', 'press', 'ride', 'secret', 'spread', 'spring', 'tough', 'wait', 'brown', 'deep', 'display', 'flow', 'hit', 'objective', 'shoot', 'touch', 'cancel', 'chemical', 'cry', 'dump', 'extreme', 'push', 'conflict', 'eat', 'fill', 'formal', 'jump', 'kick', 'opposite', 'pass', 'pitch', 'remote', 'total', 'treat', 'vast', 'abuse', 'beat', 'burn', 'deposit', 'print', 'raise', 'sleep', 'somewhere', 'advance', 'anywhere', 'consist', 'dark', 'double', 'draw', 'equal', 'fix', 'hire', 'internal', 'join', 'kill', 'sensitive', 'tap', 'win', 'attack', 'claim', 'constant', 'drag', 'drink', 'guess', 'minor', 'pull', 'raw', 'soft', 'solid', 'wear', 'weird', 'wonder', 'annual', 'count', 'dead', 'doubt', 'feed', 'forever', 'impress', 'nobody', 'repeat', 'round', 'sing', 'slide', 'strip', 'whereas', 'wish', 'combine', 'command', 'dig', 'divide', 'equivalent', 'hang', 'hunt', 'initial', 'march', 'mention', 'smell', 'spiritual', 'survey', 'tie', 'adult', 'brief', 'crazy', 'escape', 'gather', 'hate', 'prior', 'repair', 'rough', 'sad', 'scratch', 'sick', 'strike', 'employ', 'external', 'hurt', 'illegal', 'laugh', 'lay', 'mobile', 'nasty', 'ordinary', 'respond', 'royal', 'senior', 'split', 'strain', 'struggle', 'swim', 'train', 'upper', 'wash', 'yellow', 'convert', 'crash', 'dependent', 'fold', 'funny', 'grab', 'hide', 'miss', 'permit', 'quote', 'recover', 'resolve', 'roll', 'sink', 'slip', 'spare', 'suspect', 'sweet', 'swing', 'twist', 'upstairs', 'usual', 'abroad', 'brave', 'calm', 'concentrate', 'estimate', 'grand', 'male', 'mine', 'prompt', 'quiet', 'refuse', 'regret', 'reveal', 'rush', 'shake', 'shift', 'shine', 'steal', 'suck', 'surround', 'anybody', 'bear', 'brilliant', 'dare', 'dear', 'delay', 'drunk', 'female', 'hurry', 'inevitable', 'invite', 'kiss', 'neat', 'pop', 'punch', 'quit', 'reply', 'representative', 'resist', 'rip', 'rub', 'silly', 'smile', 'spell', 'stretch', 'stupid', 'tear', 'temporary', 'tomorrow', 'wake', 'wrap', 'yesterday'] # yapf:disable\ndef generate_id():\n    adj_choice = random.choice(ADJ_LIST)\n    noun_choice = random.choice(NOUN_LIST)\n    return adj_choice + '_' + noun_choice",
        "detail": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "documentation": {}
    },
    {
        "label": "NOUN_LIST",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "description": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "peekOfCode": "NOUN_LIST = ['people', 'history', 'way', 'art', 'world', 'information', 'map', 'family', 'government', 'health', 'system', 'computer', 'meat', 'year', 'thanks', 'music', 'person', 'reading', 'method', 'data', 'food', 'understanding', 'theory', 'law', 'bird', 'literature', 'problem', 'software', 'control', 'knowledge', 'power', 'ability', 'economics', 'love', 'internet', 'television', 'science', 'library', 'nature', 'fact', 'product', 'idea', 'temperature', 'investment', 'area', 'society', 'activity', 'story', 'industry', 'media', 'thing', 'oven', 'community', 'definition', 'safety', 'quality', 'development', 'language', 'management', 'player', 'variety', 'video', 'week', 'security', 'country', 'exam', 'movie', 'organization', 'equipment', 'physics', 'analysis', 'policy', 'series', 'thought', 'basis', 'boyfriend', 'direction', 'strategy', 'technology', 'army', 'camera', 'freedom', 'paper', 'environment', 'child', 'instance', 'month', 'truth', 'marketing', 'university', 'writing', 'article', 'department', 'difference', 'goal', 'news', 'audience', 'fishing', 'growth', 'income', 'marriage', 'user', 'combination', 'failure', 'meaning', 'medicine', 'philosophy', 'teacher', 'communication', 'night', 'chemistry', 'disease', 'disk', 'energy', 'nation', 'road', 'role', 'soup', 'advertising', 'location', 'success', 'addition', 'apartment', 'education', 'math', 'moment', 'painting', 'politics', 'attention', 'decision', 'event', 'property', 'shopping', 'student', 'wood', 'competition', 'distribution', 'entertainment', 'office', 'population', 'president', 'unit', 'category', 'cigarette', 'context', 'introduction', 'opportunity', 'performance', 'driver', 'flight', 'length', 'magazine', 'newspaper', 'relationship', 'teaching', 'cell', 'dealer', 'finding', 'lake', 'member', 'message', 'phone', 'scene', 'appearance', 'association', 'concept', 'customer', 'death', 'discussion', 'housing', 'inflation', 'insurance', 'mood', 'woman', 'advice', 'blood', 'effort', 'expression', 'importance', 'opinion', 'payment', 'reality', 'responsibility', 'situation', 'skill', 'statement', 'wealth', 'application', 'city', 'county', 'depth', 'estate', 'foundation', 'grandmother', 'heart', 'perspective', 'photo', 'recipe', 'studio', 'topic', 'collection', 'depression', 'imagination', 'passion', 'percentage', 'resource', 'setting', 'ad', 'agency', 'college', 'connection', 'criticism', 'debt', 'description', 'memory', 'patience', 'secretary', 'solution', 'administration', 'aspect', 'attitude', 'director', 'personality', 'psychology', 'recommendation', 'response', 'selection', 'storage', 'version', 'alcohol', 'argument', 'complaint', 'contract', 'emphasis', 'highway', 'loss', 'membership', 'possession', 'preparation', 'steak', 'union', 'agreement', 'cancer', 'currency', 'employment', 'engineering', 'entry', 'interaction', 'mixture', 'preference', 'region', 'republic', 'tradition', 'virus', 'actor', 'classroom', 'delivery', 'device', 'difficulty', 'drama', 'election', 'engine', 'football', 'guidance', 'hotel', 'owner', 'priority', 'protection', 'suggestion', 'tension', 'variation', 'anxiety', 'atmosphere', 'awareness', 'bath', 'bread', 'candidate', 'climate', 'comparison', 'confusion', 'construction', 'elevator', 'emotion', 'employee', 'employer', 'guest', 'height', 'leadership', 'mall', 'manager', 'operation', 'recording', 'sample', 'transportation', 'charity', 'cousin', 'disaster', 'editor', 'efficiency', 'excitement', 'extent', 'feedback', 'guitar', 'homework', 'leader', 'mom', 'outcome', 'permission', 'presentation', 'promotion', 'reflection', 'refrigerator', 'resolution', 'revenue', 'session', 'singer', 'tennis', 'basket', 'bonus', 'cabinet', 'childhood', 'church', 'clothes', 'coffee', 'dinner', 'drawing', 'hair', 'hearing', 'initiative', 'judgment', 'lab', 'measurement', 'mode', 'mud', 'orange', 'poetry', 'police', 'possibility', 'procedure', 'queen', 'ratio', 'relation', 'restaurant', 'satisfaction', 'sector', 'signature', 'significance', 'song', 'tooth', 'town', 'vehicle', 'volume', 'wife', 'accident', 'airport', 'appointment', 'arrival', 'assumption', 'baseball', 'chapter', 'committee', 'conversation', 'database', 'enthusiasm', 'error', 'explanation', 'farmer', 'gate', 'girl', 'hall', 'historian', 'hospital', 'injury', 'instruction', 'maintenance', 'manufacturer', 'meal', 'perception', 'pie', 'poem', 'presence', 'proposal', 'reception', 'replacement', 'revolution', 'river', 'son', 'speech', 'tea', 'village', 'warning', 'winner', 'worker', 'writer', 'assistance', 'breath', 'buyer', 'chest', 'chocolate', 'conclusion', 'contribution', 'cookie', 'courage', 'desk', 'drawer', 'establishment', 'examination', 'garbage', 'grocery', 'honey', 'impression', 'improvement', 'independence', 'insect', 'inspection', 'inspector', 'king', 'ladder', 'menu', 'penalty', 'piano', 'potato', 'profession', 'professor', 'quantity', 'reaction', 'requirement', 'salad', 'sister', 'supermarket', 'tongue', 'weakness', 'wedding', 'affair', 'ambition', 'analyst', 'apple', 'assignment', 'assistant', 'bathroom', 'bedroom', 'beer', 'birthday', 'celebration', 'championship', 'cheek', 'client', 'consequence', 'departure', 'diamond', 'dirt', 'ear', 'fortune', 'friendship', 'funeral', 'gene', 'girlfriend', 'hat', 'indication', 'intention', 'lady', 'midnight', 'negotiation', 'obligation', 'passenger', 'pizza', 'platform', 'poet', 'pollution', 'recognition', 'reputation', 'shirt', 'sir', 'speaker', 'stranger', 'surgery', 'sympathy', 'tale', 'throat', 'trainer', 'uncle', 'youth', 'time', 'work', 'film', 'water', 'money', 'example', 'while', 'business', 'study', 'game', 'life', 'form', 'air', 'day', 'place', 'number', 'part', 'field', 'fish', 'back', 'process', 'heat', 'hand', 'experience', 'job', 'book', 'end', 'point', 'type', 'home', 'economy', 'value', 'body', 'market', 'guide', 'interest', 'state', 'radio', 'course', 'company', 'price', 'size', 'card', 'list', 'mind', 'trade', 'line', 'care', 'group', 'risk', 'word', 'fat', 'force', 'key', 'light', 'training', 'name', 'school', 'top', 'amount', 'level', 'order', 'practice', 'research', 'sense', 'service', 'piece', 'web', 'boss', 'sport', 'fun', 'house', 'page', 'term', 'test', 'answer', 'sound', 'focus', 'matter', 'kind', 'soil', 'board', 'oil', 'picture', 'access', 'garden', 'range', 'rate', 'reason', 'future', 'site', 'demand', 'exercise', 'image', 'case', 'cause', 'coast', 'action', 'age', 'bad', 'boat', 'record', 'result', 'section', 'building', 'mouse', 'cash', 'class', 'nothing', 'period', 'plan', 'store', 'tax', 'side', 'subject', 'space', 'rule', 'stock', 'weather', 'chance', 'figure', 'man', 'model', 'source', 'beginning', 'earth', 'program', 'chicken', 'design', 'feature', 'head', 'material', 'purpose', 'question', 'rock', 'salt', 'act', 'birth', 'car', 'dog', 'object', 'scale', 'sun', 'note', 'profit', 'rent', 'speed', 'style', 'war', 'bank', 'craft', 'half', 'inside', 'outside', 'standard', 'bus', 'exchange', 'eye', 'fire', 'position', 'pressure', 'stress', 'advantage', 'benefit', 'box', 'frame', 'issue', 'step', 'cycle', 'face', 'item', 'metal', 'paint', 'review', 'room', 'screen', 'structure', 'view', 'account', 'ball', 'discipline', 'medium', 'share', 'balance', 'bit', 'black', 'bottom', 'choice', 'gift', 'impact', 'machine', 'shape', 'tool', 'wind', 'address', 'average', 'career', 'culture', 'morning', 'pot', 'sign', 'table', 'task', 'condition', 'contact', 'credit', 'egg', 'hope', 'ice', 'network', 'north', 'square', 'attempt', 'date', 'effect', 'link', 'post', 'star', 'voice', 'capital', 'challenge', 'friend', 'self', 'shot', 'brush', 'couple', 'debate', 'exit', 'front', 'function', 'lack', 'living', 'plant', 'plastic', 'spot', 'summer', 'taste', 'theme', 'track', 'wing', 'brain', 'button', 'click', 'desire', 'foot', 'gas', 'influence', 'notice', 'rain', 'wall', 'base', 'damage', 'distance', 'feeling', 'pair', 'savings', 'staff', 'sugar', 'target', 'text', 'animal', 'author', 'budget', 'discount', 'file', 'ground', 'lesson', 'minute', 'officer', 'phase', 'reference', 'register', 'sky', 'stage', 'stick', 'title', 'trouble', 'bowl', 'bridge', 'campaign', 'character', 'club', 'edge', 'evidence', 'fan', 'letter', 'lock', 'maximum', 'novel', 'option', 'pack', 'park', 'plenty', 'quarter', 'skin', 'sort', 'weight', 'baby', 'background', 'carry', 'dish', 'factor', 'fruit', 'glass', 'joint', 'master', 'muscle', 'red', 'strength', 'traffic', 'trip', 'vegetable', 'appeal', 'chart', 'gear', 'ideal', 'kitchen', 'land', 'log', 'mother', 'net', 'party', 'principle', 'relative', 'sale', 'season', 'signal', 'spirit', 'street', 'tree', 'wave', 'belt', 'bench', 'commission', 'copy', 'drop', 'minimum', 'path', 'progress', 'project', 'sea', 'south', 'status', 'stuff', 'ticket', 'tour', 'angle', 'blue', 'breakfast', 'confidence', 'daughter', 'degree', 'doctor', 'dot', 'dream', 'duty', 'essay', 'father', 'fee', 'finance', 'hour', 'juice', 'limit', 'luck', 'milk', 'mouth', 'peace', 'pipe', 'seat', 'stable', 'storm', 'substance', 'team', 'trick', 'afternoon', 'bat', 'beach', 'blank', 'catch', 'chain', 'consideration', 'cream', 'crew', 'detail', 'gold', 'interview', 'kid', 'mark', 'match', 'mission', 'pain', 'pleasure', 'score', 'screw', 'sex', 'shop', 'shower', 'suit', 'tone', 'window', 'agent', 'band', 'block', 'bone', 'calendar', 'cap', 'coat', 'contest', 'corner', 'court', 'cup', 'district', 'door', 'east', 'finger', 'garage', 'guarantee', 'hole', 'hook', 'implement', 'layer', 'lecture', 'lie', 'manner', 'meeting', 'nose', 'parking', 'partner', 'profile', 'respect', 'rice', 'routine', 'schedule', 'swimming', 'telephone', 'tip', 'winter', 'airline', 'bag', 'battle', 'bed', 'bill', 'bother', 'cake', 'code', 'curve', 'designer', 'dimension', 'dress', 'ease', 'emergency', 'evening', 'extension', 'farm', 'fight', 'gap', 'grade', 'holiday', 'horror', 'horse', 'host', 'husband', 'loan', 'mistake', 'mountain', 'nail', 'noise', 'occasion', 'package', 'patient', 'pause', 'phrase', 'proof', 'race', 'relief', 'sand', 'sentence', 'shoulder', 'smoke', 'stomach', 'string', 'tourist', 'towel', 'vacation', 'west', 'wheel', 'wine', 'arm', 'aside', 'associate', 'bet', 'blow', 'border', 'branch', 'breast', 'brother', 'buddy', 'bunch', 'chip', 'coach', 'cross', 'document', 'draft', 'dust', 'expert', 'floor', 'god', 'golf', 'habit', 'iron', 'judge', 'knife', 'landscape', 'league', 'mail', 'mess', 'native', 'opening', 'parent', 'pattern', 'pin', 'pool', 'pound', 'request', 'salary', 'shame', 'shelter', 'shoe', 'silver', 'tackle', 'tank', 'trust', 'assist', 'bake', 'bar', 'bell', 'bike', 'blame', 'boy', 'brick', 'chair', 'closet', 'clue', 'collar', 'comment', 'conference', 'devil', 'diet', 'fear', 'fuel', 'glove', 'jacket', 'lunch', 'monitor', 'mortgage', 'nurse', 'pace', 'panic', 'peak', 'plane', 'reward', 'row', 'sandwich', 'shock', 'spite', 'spray', 'surprise', 'till', 'transition', 'weekend', 'welcome', 'yard', 'alarm', 'bend', 'bicycle', 'bite', 'blind', 'bottle', 'cable', 'candle', 'clerk', 'cloud', 'concert', 'counter', 'flower', 'grandfather', 'harm', 'knee', 'lawyer', 'leather', 'load', 'mirror', 'neck', 'pension', 'plate', 'purple', 'ruin', 'ship', 'skirt', 'slice', 'snow', 'specialist', 'stroke', 'switch', 'trash', 'tune', 'zone', 'anger', 'award', 'bid', 'bitter', 'boot', 'bug', 'camp', 'candy', 'carpet', 'cat', 'champion', 'channel', 'clock', 'comfort', 'cow', 'crack', 'engineer', 'entrance', 'fault', 'grass', 'guy', 'hell', 'highlight', 'incident', 'island', 'joke', 'jury', 'leg', 'lip', 'mate', 'motor', 'nerve', 'passage', 'pen', 'pride', 'priest', 'prize', 'promise', 'resident', 'resort', 'ring', 'roof', 'rope', 'sail', 'scheme', 'script', 'sock', 'station', 'toe', 'tower', 'truck', 'witness', 'a', 'you', 'it', 'can', 'will', 'if', 'many', 'most', 'other', 'use', 'make', 'good', 'look', 'help', 'go', 'great', 'being', 'few', 'might', 'still', 'public', 'read', 'keep', 'start', 'give', 'human', 'local', 'general', 'she', 'specific', 'long', 'play', 'feel', 'high', 'tonight', 'put', 'common', 'set', 'change', 'simple', 'past', 'big', 'possible', 'particular', 'today', 'major', 'personal', 'current', 'national', 'cut', 'natural', 'physical', 'show', 'try', 'check', 'second', 'call', 'move', 'pay', 'let', 'increase', 'single', 'individual', 'turn', 'ask', 'buy', 'guard', 'hold', 'main', 'offer', 'potential', 'professional', 'international', 'travel', 'cook', 'alternative', 'following', 'special', 'working', 'whole', 'dance', 'excuse', 'cold', 'commercial', 'low', 'purchase', 'deal', 'primary', 'worth', 'fall', 'necessary', 'positive', 'produce', 'search', 'present', 'spend', 'talk', 'creative', 'tell', 'cost', 'drive', 'green', 'support', 'glad', 'remove', 'return', 'run', 'complex', 'due', 'effective', 'middle', 'regular', 'reserve', 'independent', 'leave', 'original', 'reach', 'rest', 'serve', 'watch', 'beautiful', 'charge', 'active', 'break', 'negative', 'safe', 'stay', 'visit', 'visual', 'affect', 'cover', 'report', 'rise', 'walk', 'white', 'beyond', 'junior', 'pick', 'unique', 'anything', 'classic', 'final', 'lift', 'mix', 'private', 'stop', 'teach', 'western', 'concern', 'familiar', 'fly', 'official', 'broad', 'comfortable', 'gain', 'maybe', 'rich', 'save', 'stand', 'young', 'fail', 'heavy', 'hello', 'lead', 'listen', 'valuable', 'worry', 'handle', 'leading', 'meet', 'release', 'sell', 'finish', 'normal', 'press', 'ride', 'secret', 'spread', 'spring', 'tough', 'wait', 'brown', 'deep', 'display', 'flow', 'hit', 'objective', 'shoot', 'touch', 'cancel', 'chemical', 'cry', 'dump', 'extreme', 'push', 'conflict', 'eat', 'fill', 'formal', 'jump', 'kick', 'opposite', 'pass', 'pitch', 'remote', 'total', 'treat', 'vast', 'abuse', 'beat', 'burn', 'deposit', 'print', 'raise', 'sleep', 'somewhere', 'advance', 'anywhere', 'consist', 'dark', 'double', 'draw', 'equal', 'fix', 'hire', 'internal', 'join', 'kill', 'sensitive', 'tap', 'win', 'attack', 'claim', 'constant', 'drag', 'drink', 'guess', 'minor', 'pull', 'raw', 'soft', 'solid', 'wear', 'weird', 'wonder', 'annual', 'count', 'dead', 'doubt', 'feed', 'forever', 'impress', 'nobody', 'repeat', 'round', 'sing', 'slide', 'strip', 'whereas', 'wish', 'combine', 'command', 'dig', 'divide', 'equivalent', 'hang', 'hunt', 'initial', 'march', 'mention', 'smell', 'spiritual', 'survey', 'tie', 'adult', 'brief', 'crazy', 'escape', 'gather', 'hate', 'prior', 'repair', 'rough', 'sad', 'scratch', 'sick', 'strike', 'employ', 'external', 'hurt', 'illegal', 'laugh', 'lay', 'mobile', 'nasty', 'ordinary', 'respond', 'royal', 'senior', 'split', 'strain', 'struggle', 'swim', 'train', 'upper', 'wash', 'yellow', 'convert', 'crash', 'dependent', 'fold', 'funny', 'grab', 'hide', 'miss', 'permit', 'quote', 'recover', 'resolve', 'roll', 'sink', 'slip', 'spare', 'suspect', 'sweet', 'swing', 'twist', 'upstairs', 'usual', 'abroad', 'brave', 'calm', 'concentrate', 'estimate', 'grand', 'male', 'mine', 'prompt', 'quiet', 'refuse', 'regret', 'reveal', 'rush', 'shake', 'shift', 'shine', 'steal', 'suck', 'surround', 'anybody', 'bear', 'brilliant', 'dare', 'dear', 'delay', 'drunk', 'female', 'hurry', 'inevitable', 'invite', 'kiss', 'neat', 'pop', 'punch', 'quit', 'reply', 'representative', 'resist', 'rip', 'rub', 'silly', 'smile', 'spell', 'stretch', 'stupid', 'tear', 'temporary', 'tomorrow', 'wake', 'wrap', 'yesterday'] # yapf:disable\ndef generate_id():\n    adj_choice = random.choice(ADJ_LIST)\n    noun_choice = random.choice(NOUN_LIST)\n    return adj_choice + '_' + noun_choice",
        "detail": "src.components.Exam.exam_tools.ipho_exam.utils.natural_id",
        "documentation": {}
    },
    {
        "label": "VersionNodeAdminForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class VersionNodeAdminForm(forms.ModelForm):\n    text = forms.CharField(widget=AceWidget(mode='xml', wordwrap=True, width='100%'))\n    class Meta(object):\n        model = VersionNode\n        fields = '__all__'\n        # widgets = {\n        #     'body':AceWidget()\n        # }\nclass FigureAdminForm(forms.ModelForm):\n    content = forms.CharField(widget=AceWidget(mode='xml', wordwrap=True, width='100%'))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "FigureAdminForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class FigureAdminForm(forms.ModelForm):\n    content = forms.CharField(widget=AceWidget(mode='xml', wordwrap=True, width='100%'))\n    class Meta(object):\n        model = Figure\n        fields = '__all__'\nclass AttributeChangeForm(forms.ModelForm):\n    class Meta(object):\n        model = AttributeChange\n        fields = '__all__'\n    def clean(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "AttributeChangeForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class AttributeChangeForm(forms.ModelForm):\n    class Meta(object):\n        model = AttributeChange\n        fields = '__all__'\n    def clean(self):\n        super(AttributeChangeForm, self).clean()\n        try:\n            d = json.loads(self.cleaned_data['content'])\n            self.cleaned_data['content'] = json.dumps(d, indent=2)\n        except ValueError:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "QuestionInline",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class QuestionInline(admin.StackedInline):\n    model = Question\n    extra = 2\nclass ExamAdmin(admin.ModelAdmin):\n    list_display = ('name', 'active', 'hide_feedback', 'show_scans', 'marking_active', 'moderation_active', 'hidden')\n    inlines = [QuestionInline]\nclass QuestionAdmin(admin.ModelAdmin):\n    list_display = ('name', 'exam', 'feedback_active', 'position')\n    list_filter = ('exam', )\nclass LanguageAdmin(admin.ModelAdmin):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "ExamAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class ExamAdmin(admin.ModelAdmin):\n    list_display = ('name', 'active', 'hide_feedback', 'show_scans', 'marking_active', 'moderation_active', 'hidden')\n    inlines = [QuestionInline]\nclass QuestionAdmin(admin.ModelAdmin):\n    list_display = ('name', 'exam', 'feedback_active', 'position')\n    list_filter = ('exam', )\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'delegation', 'font', 'is_pdf')\n    list_filter = ('delegation', 'font')\n    search_fields = ['name']",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "QuestionAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class QuestionAdmin(admin.ModelAdmin):\n    list_display = ('name', 'exam', 'feedback_active', 'position')\n    list_filter = ('exam', )\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'delegation', 'font', 'is_pdf')\n    list_filter = ('delegation', 'font')\n    search_fields = ['name']\nclass VersionNodeAdmin(admin.ModelAdmin):\n    form = VersionNodeAdminForm\n    list_display = ('question', 'language', 'version', 'tag', 'status', 'timestamp')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "LanguageAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class LanguageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'delegation', 'font', 'is_pdf')\n    list_filter = ('delegation', 'font')\n    search_fields = ['name']\nclass VersionNodeAdmin(admin.ModelAdmin):\n    form = VersionNodeAdminForm\n    list_display = ('question', 'language', 'version', 'tag', 'status', 'timestamp')\n    list_filter = ('question', )\nclass TranslationNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "VersionNodeAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class VersionNodeAdmin(admin.ModelAdmin):\n    form = VersionNodeAdminForm\n    list_display = ('question', 'language', 'version', 'tag', 'status', 'timestamp')\n    list_filter = ('question', )\nclass TranslationNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')\n    list_filter = ('question', 'language__delegation')\nclass AttributeChangeAdmin(admin.ModelAdmin):\n    form = AttributeChangeForm\n    list_display = ('node', )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "TranslationNodeAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class TranslationNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')\n    list_filter = ('question', 'language__delegation')\nclass AttributeChangeAdmin(admin.ModelAdmin):\n    form = AttributeChangeForm\n    list_display = ('node', )\n    list_filter = ('node__question', 'node__language')\nclass PDFNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')\n    list_filter = ('question', 'language__delegation')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "AttributeChangeAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class AttributeChangeAdmin(admin.ModelAdmin):\n    form = AttributeChangeForm\n    list_display = ('node', )\n    list_filter = ('node__question', 'node__language')\nclass PDFNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')\n    list_filter = ('question', 'language__delegation')\nclass FeedbackAdmin(admin.ModelAdmin):\n    list_display = ('question', 'part', 'delegation', 'comment', 'status', 'timestamp')\n    list_filter = ('question', 'delegation', 'status')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "PDFNodeAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class PDFNodeAdmin(admin.ModelAdmin):\n    list_display = ('question', 'language', 'status', 'timestamp')\n    list_filter = ('question', 'language__delegation')\nclass FeedbackAdmin(admin.ModelAdmin):\n    list_display = ('question', 'part', 'delegation', 'comment', 'status', 'timestamp')\n    list_filter = ('question', 'delegation', 'status')\nclass LikeAdmin(admin.ModelAdmin):\n    list_display = ('status', 'feedback', 'delegation')\nclass FigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "FeedbackAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class FeedbackAdmin(admin.ModelAdmin):\n    list_display = ('question', 'part', 'delegation', 'comment', 'status', 'timestamp')\n    list_filter = ('question', 'delegation', 'status')\nclass LikeAdmin(admin.ModelAdmin):\n    list_display = ('status', 'feedback', 'delegation')\nclass FigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name')\nclass CompiledFigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "LikeAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class LikeAdmin(admin.ModelAdmin):\n    list_display = ('status', 'feedback', 'delegation')\nclass FigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name')\nclass CompiledFigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name', 'params')\nclass DelegationFilter(admin.SimpleListFilter):\n    title = 'delegation'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "FigureAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class FigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name')\nclass CompiledFigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name', 'params')\nclass DelegationFilter(admin.SimpleListFilter):\n    title = 'delegation'\n    parameter_name = 'delegation'\n    def lookups(self, request, model_admin):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "CompiledFigureAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class CompiledFigureAdmin(admin.ModelAdmin):\n    form = FigureAdminForm\n    list_display = ('pk', 'name', 'params')\nclass DelegationFilter(admin.SimpleListFilter):\n    title = 'delegation'\n    parameter_name = 'delegation'\n    def lookups(self, request, model_admin):\n        return ((d.name, d) for d in Delegation.objects.all())\n    def queryset(self, request, queryset):\n        value = self.value()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "DelegationFilter",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class DelegationFilter(admin.SimpleListFilter):\n    title = 'delegation'\n    parameter_name = 'delegation'\n    def lookups(self, request, model_admin):\n        return ((d.name, d) for d in Delegation.objects.all())\n    def queryset(self, request, queryset):\n        value = self.value()\n        if value is None:\n            return queryset.order_by('student')\n        return queryset.filter(language__delegation__name=value).order_by('student')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "StudentSubmissionAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class StudentSubmissionAdmin(admin.ModelAdmin):\n    list_display = ('exam', 'student', 'delegation', 'language', 'with_question', 'with_answer')\n    list_filter = ('exam', DelegationFilter, 'language')\n    def delegation(self, obj):\n        return obj.language.delegation\nclass PlaceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'exam', 'student')\n    list_filter = ('exam', 'student__delegation')\nclass ExamActionAdmin(admin.ModelAdmin):\n    list_display = ('exam', 'delegation', 'action', 'status', 'timestamp')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "PlaceAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class PlaceAdmin(admin.ModelAdmin):\n    list_display = ('name', 'exam', 'student')\n    list_filter = ('exam', 'student__delegation')\nclass ExamActionAdmin(admin.ModelAdmin):\n    list_display = ('exam', 'delegation', 'action', 'status', 'timestamp')\n    list_filter = ('action', 'exam', 'delegation')\nclass DocumentAdmin(admin.ModelAdmin):\n    list_display = (\n        'exam', 'position', 'student', 'num_pages', 'barcode_num_pages', 'extra_num_pages', 'barcode_base',\n        'scan_status'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "ExamActionAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class ExamActionAdmin(admin.ModelAdmin):\n    list_display = ('exam', 'delegation', 'action', 'status', 'timestamp')\n    list_filter = ('action', 'exam', 'delegation')\nclass DocumentAdmin(admin.ModelAdmin):\n    list_display = (\n        'exam', 'position', 'student', 'num_pages', 'barcode_num_pages', 'extra_num_pages', 'barcode_base',\n        'scan_status'\n    )\n    list_filter = ('exam', 'position', 'student__delegation', 'scan_status')\nadmin.site.register(Language, LanguageAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "DocumentAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.admin",
        "description": "src.components.Exam.exam_tools.ipho_exam.admin",
        "peekOfCode": "class DocumentAdmin(admin.ModelAdmin):\n    list_display = (\n        'exam', 'position', 'student', 'num_pages', 'barcode_num_pages', 'extra_num_pages', 'barcode_base',\n        'scan_status'\n    )\n    list_filter = ('exam', 'position', 'student__delegation', 'scan_status')\nadmin.site.register(Language, LanguageAdmin)\nadmin.site.register(Feedback, FeedbackAdmin)\nadmin.site.register(Like, LikeAdmin)\nadmin.site.register(Exam, ExamAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.admin",
        "documentation": {}
    },
    {
        "label": "compile_tex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "description": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "peekOfCode": "def compile_tex(request, body, ext_resources=[], filename='question.pdf'):\n    etag = md5(body.encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        logger.debug('Request to compile_tex contains valid etag. HttpResponseNotModified will be sended.')\n        return HttpResponseNotModified()\n    logger.debug('Request to compile_tex does not contain valid etag')\n    cache_key = \"%s:%s:%s\" % (CACHE_PREFIX, 'compile_tex', etag)\n    task_id = cache.get(cache_key)\n    if task_id is None:\n        logger.debug('The tex body of compile_tex is not in the cache. A new async task will be started.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "documentation": {}
    },
    {
        "label": "compile_tex_diff",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "description": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "peekOfCode": "def compile_tex_diff(request, old_body, new_body, ext_resources=[], filename='question.pdf'):\n    etag = md5((old_body + new_body).encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        logger.debug('Request to compile_tex_diff contains valid etag. HttpResponseNotModified will be sended.')\n        return HttpResponseNotModified()\n    logger.debug('Request to compile_tex_diff does not contain valid etag')\n    cache_key = \"%s:%s:%s\" % (CACHE_PREFIX, 'compile_tex_diff', etag)\n    task_id = cache.get(cache_key)\n    if task_id is None:\n        logger.debug('The tex body of compile_tex is not in the cache. A new async task will be started.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "description": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "peekOfCode": "logger = logging.getLogger('ipho_exam.cached_responses')\nCACHE_PREFIX = getattr(settings, 'CACHE_CACHED_RESPONSES_PREFIX', 'cached-responses')\nCACHE_TIMEOUT = getattr(settings, 'CACHE_CACHED_RESPONSES_TIMEOUT', 600)  # 10 min\ndef compile_tex(request, body, ext_resources=[], filename='question.pdf'):\n    etag = md5(body.encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        logger.debug('Request to compile_tex contains valid etag. HttpResponseNotModified will be sended.')\n        return HttpResponseNotModified()\n    logger.debug('Request to compile_tex does not contain valid etag')\n    cache_key = \"%s:%s:%s\" % (CACHE_PREFIX, 'compile_tex', etag)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "description": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "peekOfCode": "CACHE_PREFIX = getattr(settings, 'CACHE_CACHED_RESPONSES_PREFIX', 'cached-responses')\nCACHE_TIMEOUT = getattr(settings, 'CACHE_CACHED_RESPONSES_TIMEOUT', 600)  # 10 min\ndef compile_tex(request, body, ext_resources=[], filename='question.pdf'):\n    etag = md5(body.encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        logger.debug('Request to compile_tex contains valid etag. HttpResponseNotModified will be sended.')\n        return HttpResponseNotModified()\n    logger.debug('Request to compile_tex does not contain valid etag')\n    cache_key = \"%s:%s:%s\" % (CACHE_PREFIX, 'compile_tex', etag)\n    task_id = cache.get(cache_key)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "documentation": {}
    },
    {
        "label": "CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "description": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "peekOfCode": "CACHE_TIMEOUT = getattr(settings, 'CACHE_CACHED_RESPONSES_TIMEOUT', 600)  # 10 min\ndef compile_tex(request, body, ext_resources=[], filename='question.pdf'):\n    etag = md5(body.encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        logger.debug('Request to compile_tex contains valid etag. HttpResponseNotModified will be sended.')\n        return HttpResponseNotModified()\n    logger.debug('Request to compile_tex does not contain valid etag')\n    cache_key = \"%s:%s:%s\" % (CACHE_PREFIX, 'compile_tex', etag)\n    task_id = cache.get(cache_key)\n    if task_id is None:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.cached_responses",
        "documentation": {}
    },
    {
        "label": "PointValidationError",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "class PointValidationError(ValueError):\n    pass\ndef check_version(version):\n    \"\"\"\n    Check a given version node.\n    \"\"\"\n    question = version.question\n    code = question.code\n    if code == 'G':\n        return",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "check_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "def check_version(version):\n    \"\"\"\n    Check a given version node.\n    \"\"\"\n    question = version.question\n    code = question.code\n    if code == 'G':\n        return\n    check_sum_consistency(version)\n    other_code = ({'Q', 'A'} - {code}).pop()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "check_exam",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "def check_exam(exam):\n    \"\"\"\n    Check the sum and question / answer consistency of all questions in the\n    given exam.\n    \"\"\"\n    all_questions = Question.objects.filter(exam=exam, code__in=['Q', 'A']).order_by('position')\n    for q1, q2 in zip(all_questions[::2], all_questions[1::2]):\n        version_1 = qquery.latest_version(q1.pk, lang_id=OFFICIAL_LANGUAGE_PK).node\n        version_2 = qquery.latest_version(q2.pk, lang_id=OFFICIAL_LANGUAGE_PK).node\n        check_sum_consistency(version_1)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "check_question_answer_consistency",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "def check_question_answer_consistency(version_node_1, version_node_2):\n    \"\"\"\n    Check that the points in the two question given (question / answer sheet)\n    are the same.\n    \"\"\"\n    assert version_node_1.question.exam == version_node_2.question.exam\n    assert version_node_1.question.position == version_node_1.question.position\n    assert set([version_node_1.question.code, version_node_2.question.code]) == {'Q', 'A'}\n    qml_1 = make_qml(version_node_1)\n    qml_2 = make_qml(version_node_2)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "check_sum_consistency",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "def check_sum_consistency(version_node):\n    \"\"\"\n    Check that the points of a question are internally consistent, i.e. the sum\n    of points of 'sub-tasks' matches the points of a 'task'.\n    \"\"\"\n    qml_tree = make_qml(version_node)\n    nested_nodes = _get_nested_nodes(qml_tree)\n    _check_nested_sum_consistency(nested_nodes)\ndef _get_nested_nodes(qml_node):\n    \"\"\"",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "__all__ = ['check_version', 'check_exam', 'check_question_answer_consistency', 'check_sum_consistency']\nOFFICIAL_LANGUAGE_PK = 1\nNESTING_LEVELS = [(QMLquestion), (QMLpart), (QMLsubquestion, QMLsubanswer)]\nclass PointValidationError(ValueError):\n    pass\ndef check_version(version):\n    \"\"\"\n    Check a given version node.\n    \"\"\"\n    question = version.question",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE_PK",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "OFFICIAL_LANGUAGE_PK = 1\nNESTING_LEVELS = [(QMLquestion), (QMLpart), (QMLsubquestion, QMLsubanswer)]\nclass PointValidationError(ValueError):\n    pass\ndef check_version(version):\n    \"\"\"\n    Check a given version node.\n    \"\"\"\n    question = version.question\n    code = question.code",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "NESTING_LEVELS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "description": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "peekOfCode": "NESTING_LEVELS = [(QMLquestion), (QMLpart), (QMLsubquestion, QMLsubanswer)]\nclass PointValidationError(ValueError):\n    pass\ndef check_version(version):\n    \"\"\"\n    Check a given version node.\n    \"\"\"\n    question = version.question\n    code = question.code\n    if code == 'G':",
        "detail": "src.components.Exam.exam_tools.ipho_exam.check_points",
        "documentation": {}
    },
    {
        "label": "all_same",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "peekOfCode": "def all_same(items):\n    return all(x == items[0] for x in items)\ndef student_exam_document(questions, student_languages, cover=None, job_task=None):\n    meta = {}\n    meta['num_pages'] = 0\n    meta['barcode_num_pages'] = 0\n    meta['barcode_base'] = ''\n    meta['etag'] = ''\n    meta['filename'] = ''\n    all_barcodes = []",
        "detail": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "documentation": {}
    },
    {
        "label": "student_exam_document",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "peekOfCode": "def student_exam_document(questions, student_languages, cover=None, job_task=None):\n    meta = {}\n    meta['num_pages'] = 0\n    meta['barcode_num_pages'] = 0\n    meta['barcode_base'] = ''\n    meta['etag'] = ''\n    meta['filename'] = ''\n    all_barcodes = []\n    all_docs = []\n    if cover is not None:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n## utils\ndef all_same(items):\n    return all(x == items[0] for x in items)\ndef student_exam_document(questions, student_languages, cover=None, job_task=None):\n    meta = {}\n    meta['num_pages'] = 0\n    meta['barcode_num_pages'] = 0",
        "detail": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n## utils\ndef all_same(items):\n    return all(x == items[0] for x in items)\ndef student_exam_document(questions, student_languages, cover=None, job_task=None):\n    meta = {}\n    meta['num_pages'] = 0\n    meta['barcode_num_pages'] = 0\n    meta['barcode_base'] = ''",
        "detail": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n## utils\ndef all_same(items):\n    return all(x == items[0] for x in items)\ndef student_exam_document(questions, student_languages, cover=None, job_task=None):\n    meta = {}\n    meta['num_pages'] = 0\n    meta['barcode_num_pages'] = 0\n    meta['barcode_base'] = ''\n    meta['etag'] = ''",
        "detail": "src.components.Exam.exam_tools.ipho_exam.compile_utils",
        "documentation": {}
    },
    {
        "label": "IphoExamException",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "description": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "peekOfCode": "class IphoExamException(Exception):\n    def __init__(self, response):\n        self.response = response\n    def __str__(self):\n        return u'IPhO Exam Exception. Reponse: {}'.format(self.response)\nclass IphoExamForbidden(HttpResponseForbidden):\n    def __init__(self, msg):\n        super(IphoExamForbidden, self).__init__(msg)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "documentation": {}
    },
    {
        "label": "IphoExamForbidden",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "description": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "peekOfCode": "class IphoExamForbidden(HttpResponseForbidden):\n    def __init__(self, msg):\n        super(IphoExamForbidden, self).__init__(msg)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.exceptions",
        "documentation": {}
    },
    {
        "label": "ipho",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.fonts",
        "description": "src.components.Exam.exam_tools.ipho_exam.fonts",
        "peekOfCode": "ipho = {\n    \"notosanstagbanwa\": {\n        \"cjk\": 0,\n        \"font_regular\": \"NotoSansTagbanwa-Regular.ttf\",\n        \"font\": \"Noto Sans Tagbanwa\",\n        \"name\": \"notosanstagbanwa\",\n        \"css\": \"notosanstagbanwa.css\"\n    },\n    \"notoseriflao\": {\n        \"cjk\": 0,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.fonts",
        "documentation": {}
    },
    {
        "label": "LanguageForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class LanguageForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        self.user_delegation = kwargs.pop('user_delegation')\n        super(LanguageForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.pk:\n            self.fields['name'].widget.attrs['readonly'] = True\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Field('name', placeholder='Name'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FigureForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class FigureForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        valid_extensions = kwargs.pop('valid_extensions', VALID_FIGURE_EXTENSIONS)\n        super(FigureForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        self.fields['file'] = forms.FileField(\n            validators=[build_extension_validator(valid_extensions)],\n            label=\n            'Figure file <a href=\"#\" data-toggle=\"popover\" data-trigger=\"hover\" data-container=\"body\" data-content=\"Allowed filetypes: {}\"><span class=\"glyphicon glyphicon-info-sign\"></span></a>'.\n            format(' '.join('*' + ext for ext in valid_extensions))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "TranslationForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class TranslationForm(forms.Form):\n    language = forms.ModelChoiceField(queryset=Language.objects.none())\n    def __init__(self, *args, **kwargs):\n        super(TranslationForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        # self.helper.layout = Layout(Field('name', placeholder='Name'),\n        #                             Field('polyglossia'),\n        #                             )\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ExamQuestionForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class ExamQuestionForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ExamQuestionForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\n    class Meta(object):\n        model = Question",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "DeleteForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class DeleteForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        print(\"hello world from delete form\")\n        super(DeleteForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\n    verify = forms.CharField(max_length=100, label='Please type in the name of the question to confirm.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PublishForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class PublishForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super(PublishForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\n    # Cannot have a completely empty form\n    hidden_input = forms.CharField(widget=forms.HiddenInput(), required=False)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "VersionNodeForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class VersionNodeForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(VersionNodeForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\n    class Meta(object):\n        model = VersionNode",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PDFNodeForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class PDFNodeForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(PDFNodeForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\n    class Meta(object):\n        model = PDFNode",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "TranslationImportForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class TranslationImportForm(ModelForm):\n    file = forms.FileField(\n        validators=[build_extension_validator(['.xml', '.qml'])],\n        label=\n        'Question file <a href=\"#\" data-toggle=\"popover\" data-trigger=\"hover\" data-container=\"body\" data-content=\"Allowed filetypes: *.xml\"><span class=\"glyphicon glyphicon-info-sign\"></span></a>'\n    )\n    def __init__(self, *args, **kwargs):\n        super(TranslationImportForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FeedbackForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class FeedbackForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(FeedbackForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Field('comment', placeholder='Comment'),\n        )\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "FeedbackCommentForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class FeedbackCommentForm(forms.Form):\n    comment = forms.CharField(widget=forms.Textarea)\n    def __init__(self, *args, **kwargs):\n        super(FeedbackCommentForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = False\n        self.helper.disable_csrf = True\nclass SubmissionAssignForm(ModelForm):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "SubmissionAssignForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class SubmissionAssignForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(SubmissionAssignForm, self).__init__(*args, **kwargs)\n        self.fields['student'].label_from_instance = lambda obj: u'{} {}'.format(obj.first_name, obj.last_name)\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        # self.helper.disable_csrf = False\n        # self.disable_csrf = False\n        self.helper.form_tag = False",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AssignTranslationForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AssignTranslationForm(forms.Form):\n    languages = forms.ModelMultipleChoiceField(\n        queryset=Language.objects.none(), widget=forms.widgets.CheckboxSelectMultiple\n    )\n    answer_language = forms.ModelChoiceField(queryset=Language.objects.none(), widget=forms.widgets.RadioSelect)\n    def __init__(self, *args, **kwargs):\n        languages_queryset = kwargs.pop('languages_queryset')\n        answer_lang = kwargs.pop('answer_language', None)\n        super(AssignTranslationForm, self).__init__(*args, **kwargs)\n        self.fields['languages'].queryset = languages_queryset",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AssignTranslationFormSet",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AssignTranslationFormSet(BaseAssignTranslationFormSet):\n    def __init__(self, languages_queryset, *args, **kwargs):\n        self.languages_queryset = languages_queryset\n        super(AssignTranslationFormSet, self).__init__(*args, **kwargs)\n    def _construct_form(self, *args, **kwargs):\n        kwargs['languages_queryset'] = self.languages_queryset\n        return super(AssignTranslationFormSet, self)._construct_form(*args, **kwargs)\nclass AdminImportForm(forms.Form):\n    file = forms.FileField(\n        validators=[build_extension_validator(['.xml', '.qml'])],",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminImportForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AdminImportForm(forms.Form):\n    file = forms.FileField(\n        validators=[build_extension_validator(['.xml', '.qml'])],\n        label=\n        'Question file <a href=\"#\" data-toggle=\"popover\" data-trigger=\"hover\" data-container=\"body\" data-content=\"Allowed filetypes: *.xml\"><span class=\"glyphicon glyphicon-info-sign\"></span></a>'\n    )\n    def __init__(self, *args, **kwargs):\n        super(AdminImportForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.html5_required = True",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockAttributeForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AdminBlockAttributeForm(forms.Form):\n    key = forms.CharField()\n    value = forms.CharField()\n    def __init__(self, *args, **kwargs):\n        super(AdminBlockAttributeForm, self).__init__(*args, **kwargs)\n        self.disable_csrf = True\n    def clean(self):\n        cleaned_data = super(AdminBlockAttributeForm, self).clean()\n        if not cleaned_data['key'] or not cleaned_data['key'].isidentifier():\n            self.add_error('value', 'The key can only ontain alphanumeric characters or underscores.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockAttributeHelper",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AdminBlockAttributeHelper(FormHelper):\n    def __init__(self, *args, **kwargs):\n        super(AdminBlockAttributeHelper, self).__init__(*args, **kwargs)\n        self.layout = Layout(\n            Div(\n                Div(Field('key', placeholder='key'), css_class='form-group'),\n                Div(Field('value', placeholder='value'), css_class='form-group'),\n                css_class='form-inline'\n            )\n        )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class AdminBlockForm(forms.Form):\n    def __init__(self, node, *args, **kwargs):\n        super(AdminBlockForm, self).__init__(*args, **kwargs)\n        if node.has_text:\n            self.fields['block_content'] = node.form_element()\n            self.fields['block_content'].initial = mark_safe(node.content())\n            self.fields['block_content'].required = False\n            self.fields['block_content'].widget.attrs['class'] = 'block-content-editor'\n        # for k,v in node.attributes.items():\n        #     self.fields['attribute_'+k] = forms.CharField()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "PrintDocsForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class PrintDocsForm(forms.Form):\n    queue = forms.ChoiceField(choices=[], label='Print queue to use')\n    duplex = forms.ChoiceField(initial='None', choices=[('None', 'No'), ('DuplexNoTumble', 'Yes')])\n    color = forms.ChoiceField(initial='Colour', choices=[('Colour', 'Yes'), ('Gray', 'No')])\n    staple = forms.ChoiceField(initial='None', choices=[('None', 'No'), ('1PLU', 'Yes')])\n    copies = forms.IntegerField(initial=1, min_value=1, max_value=10)\n    def __init__(self, *args, **kwargs):\n        queue_list = kwargs.pop('queue_list')\n        super(PrintDocsForm, self).__init__(*args, **kwargs)\n        self.fields['queue'].choices = queue_list",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ScanForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class ScanForm(forms.Form):\n    question = forms.ModelChoiceField(queryset=Question.objects.all())\n    student = forms.ModelChoiceField(queryset=Student.objects.all())\n    file = forms.FileField(validators=[build_extension_validator(['.pdf'])])\n    def __init__(self, *args, **kwargs):\n        super(ScanForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Field('question'), Field('student'), Field('file'), FormActions(Submit('submit', 'Upload'))\n        )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "ExtraSheetForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "class ExtraSheetForm(forms.Form):\n    student = forms.ModelChoiceField(queryset=Student.objects.all())\n    quantity = forms.IntegerField()\n    template = forms.ChoiceField(\n        widget=forms.RadioSelect, choices=(\n            ('exam_blank.tex', 'Blank sheets'),\n            ('exam_graph.tex', 'Graph sheets'),\n        )\n    )\n    def __init__(self, exam_id, *args, **kwargs):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "build_extension_validator",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "def build_extension_validator(valid_extensions):\n    def validate_file_extension(value):\n        import os\n        ext = os.path.splitext(value.name)[1]  # [0] returns path+filename\n        # valid_extensions = ['.svg', '.svgz']\n        if not ext.lower() in set(ex.lower() for ex in valid_extensions):\n            raise ValidationError(u'Unsupported file extension.')\n    return validate_file_extension\nclass LanguageForm(ModelForm):\n    def __init__(self, *args, **kwargs):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "BaseAssignTranslationFormSet",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "BaseAssignTranslationFormSet = formset_factory(AssignTranslationForm)\nclass AssignTranslationFormSet(BaseAssignTranslationFormSet):\n    def __init__(self, languages_queryset, *args, **kwargs):\n        self.languages_queryset = languages_queryset\n        super(AssignTranslationFormSet, self).__init__(*args, **kwargs)\n    def _construct_form(self, *args, **kwargs):\n        kwargs['languages_queryset'] = self.languages_queryset\n        return super(AssignTranslationFormSet, self)._construct_form(*args, **kwargs)\nclass AdminImportForm(forms.Form):\n    file = forms.FileField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "AdminBlockAttributeFormSet",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.forms",
        "description": "src.components.Exam.exam_tools.ipho_exam.forms",
        "peekOfCode": "AdminBlockAttributeFormSet = formset_factory(AdminBlockAttributeForm, can_delete=True, extra=2)\nclass AdminBlockForm(forms.Form):\n    def __init__(self, node, *args, **kwargs):\n        super(AdminBlockForm, self).__init__(*args, **kwargs)\n        if node.has_text:\n            self.fields['block_content'] = node.form_element()\n            self.fields['block_content'].initial = mark_safe(node.content())\n            self.fields['block_content'].required = False\n            self.fields['block_content'].widget.attrs['class'] = 'block-content-editor'\n        # for k,v in node.attributes.items():",
        "detail": "src.components.Exam.exam_tools.ipho_exam.forms",
        "documentation": {}
    },
    {
        "label": "QuestionBarcodeGen",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.iphocode",
        "description": "src.components.Exam.exam_tools.ipho_exam.iphocode",
        "peekOfCode": "class QuestionBarcodeGen(object):\n    def __init__(self, exam, question, student, qcode=None, startnum=0, format='qr', suppress_code=False):\n        if qcode is None:\n            qcode = question.code\n        self.suppress_code = suppress_code\n        self.base = u'{stud} {ex}-{qpos}'.format(stud=student.code, ex=exam.code, qpos=question.position)\n        self.text = self.base + u' {qcode}'.format(qcode=qcode) + u'-{pg}'\n        self.format = format\n        self.startnum = startnum\n    def __call__(self, pg):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.iphocode",
        "documentation": {}
    },
    {
        "label": "IphoExamExceptionsMiddleware",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.middleware",
        "description": "src.components.Exam.exam_tools.ipho_exam.middleware",
        "peekOfCode": "class IphoExamExceptionsMiddleware(object):\n    def __init__(self, get_response):\n        self.get_response = get_response\n        # One-time configuration and initialization.\n    def __call__(self, request):\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n        response = self.get_response(request)\n        # Code to be executed for each request/response after\n        # the view is called.",
        "detail": "src.components.Exam.exam_tools.ipho_exam.middleware",
        "documentation": {}
    },
    {
        "label": "LanguageManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class LanguageManager(models.Manager):\n    def get_by_natural_key(self, name, delegation_name):\n        return self.get(name=name, delegation=Delegation.objects.get_by_natural_key(delegation_name))\n@python_2_unicode_compatible\nclass Language(models.Model):\n    objects = LanguageManager()\n    DIRECTION_CHOICES = (('ltr', 'Left-to-right'), ('rtl', 'Right-to-left'))\n    POLYGLOSSIA_CHOICES = (('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('bahasai', 'Bahasai'), ('bahasam', 'Bahasam'), ('basque', 'Basque'), ('bengali', 'Bengali'), ('brazilian', 'Brazilian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('catalan', 'Catalan'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('estonian', 'Estonian'), ('farsi', 'Farsi'), ('finnish', 'Finnish'), ('french', 'French'), ('friulan', 'Friulan'), ('galician', 'Galician'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('icelandic', 'Icelandic'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('kannada', 'Kannada'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('lsorbian', 'Lsorbian'), ('magyar', 'Magyar'), ('malayalam', 'Malayalam'), ('marathi', 'Marathi'), ('nko', 'Nko'), ('norsk', 'Norsk'), ('nynorsk', 'Nynorsk'), ('occitan', 'Occitan'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuges', 'Portuges'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('samin', 'Samin'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('usorbian', 'Usorbian'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('custom', 'Other')) # yapf:disable\n    STYLES_CHOICES = ((u'afrikaans', u'Afrikaans'), (u'albanian', u'Albanian'), (u'amharic', u'Amharic'), (u'arabic', u'Arabic'), (u'armenian', u'Armenian'), (u'asturian', u'Asturian'), (u'azerbaijani', u'Azerbaijani'), (u'basque', u'Basque'), (u'belarusian', u'Belarusian'), (u'bengali', u'Bengali'), (u'bosnian', u'Bosnian'), (u'breton', u'Breton'), (u'bulgarian', u'Bulgarian'), (u'burmese', u'Burmese'), (u'cantonese', u'Cantonese'), (u'catalan', u'Catalan'), (u'chinese', u'Chinese (simplified)'), (u'chinese_tc', u'Chinese (traditional)'), (u'coptic', u'Coptic'), (u'croatian', u'Croatian'), (u'czech', u'Czech'), (u'danish', u'Danish'), (u'divehi', u'Divehi'), (u'dutch', u'Dutch'), (u'english', u'English'), (u'esperanto', u'Esperanto'), (u'estonian', u'Estonian'), (u'filipino', u'Filipino'), (u'finnish', u'Finnish'), (u'french', u'French'), (u'friulian', u'Friulian'), (u'galician', u'Galician'), (u'georgian', u'Georgian'), (u'german', u'German'), (u'greek', u'Greek'), (u'hebrew', u'Hebrew'), (u'hindi', u'Hindi'), (u'hungarian', u'Hungarian'), (u'icelandic', u'Icelandic'), (u'indonesian', u'Indonesian'), (u'interlingua', u'Interlingua'), (u'irish', u'Irish'), (u'italian', u'Italian'), (u'japanese', u'Japanese'), (u'kannada', u'Kannada'), (u'kazakh', u'Kazakh'), (u'khmer', u'Khmer'), (u'korean', u'Korean'), (u'kurdish', u'Kurdish'), (u'kyrgyz', u'Kyrgyz'), (u'lao', u'Lao'), (u'latin', u'Latin'), (u'latvian', u'Latvian'), (u'lithuanian', u'Lithuanian'), (u'luxembourgish', u'Luxembourgish'), (u'macedonian', u'Macedonian'), (u'magyar', u'Magyar'), (u'malay', u'Malay'), (u'malayalam', u'Malayalam'), (u'malaysian', u'Malaysian'), (u'mandarin', u'Mandarin'), (u'marathi', u'Marathi'), (u'mongolian', u'Mongolian'), (u'montenegrin', u'Montenegrin'), (u'nepali', u'Nepali'), (u'northern sotho', u'Northern Sotho'), (u'norwegian bokmål', u'Norwegian Bokmål'), (u'norwegian nynorsk', u'Norwegian Nynorsk'), (u'occitan', u'Occitan'), (u'persian', u'Persian'), (u'piedmontese', u'Piedmontese'), (u'polish', u'Polish'), (u'portuguese', u'Portuguese'), (u'romanian', u'Romanian'), (u'romansh', u'Romansh'), (u'russian', u'Russian'), (u'sanskrit', u'Sanskrit'), (u'scottish', u'Scottish'), (u'serbian', u'Serbian'), (u'sinhalese', u'Sinhalese'), (u'slovak', u'Slovak'), (u'slovenian', u'Slovenian'), (u'southern ndebele', u'Southern Ndebele'), (u'southern sotho', u'Southern Sotho'), (u'spanish', u'Spanish'), (u'swedish', u'Swedish'), (u'syriac', u'Syriac'), (u'tajik', u'Tajik'), (u'tamil', u'Tamil'), (u'telugu', u'Telugu'), (u'thai', u'Thai'), (u'tibetan', u'Tibetan'), (u'tsonga', u'Tsonga'), (u'tswana', u'Tswana'), (u'turkish', u'Turkish'), (u'turkmen', u'Turkmen'), (u'ukrainian', u'Ukrainian'), (u'urdu', u'Urdu'), (u'uzbek', u'Uzbek'), (u'venda', u'Venda'), (u'vietnamese', u'Vietnamese'), (u'welsh', u'Welsh'), (u'xhosa', u'Xhosa'), (u'zulu', u'Zulu')) # yapf:disable\n    STYLES_TO_GOOGLE_TRANSLATE_MAPPING = {'irish': 'ga', 'montenegrin': '', 'telugu': 'te', 'tajik': 'tg', 'amharic': 'am', 'romanian': 'ro', 'filipino': 'tl', 'serbian': 'sr', 'icelandic': 'is', 'tamil': 'ta', 'czech': 'cs', 'malayalam': 'ml', 'danish': 'da', 'german': 'de', 'persian': 'fa', 'dutch': 'nl', 'welsh': 'cy', 'asturian': '', 'kurdish': 'ku', 'kyrgyz': 'ky', 'interlingua': '', 'arabic': 'ar', 'afrikaans': 'af', 'portuguese': 'pt', 'ukrainian': 'uk', 'thai': 'th', 'occitan': '', 'macedonian': 'mk', 'kannada': 'kn', 'cantonese': '', 'turkish': 'tr', 'southern sotho': '', 'hebrew': 'iw', 'urdu': 'ur', 'english': 'en', 'slovak': 'sk', 'malaysian': 'ms', 'latvian': 'lv', 'georgian': 'ka', 'lao': 'lo', 'bosnian': 'bs', 'armenian': 'hy', 'magyar': 'hu', 'finnish': 'fi', 'khmer': 'km', 'chinese': 'zh', 'spanish': 'es', 'romansh': '', 'norwegian nynorsk': 'no', 'russian': 'ru', 'mandarin': '', 'tsonga': '', 'luxembourgish': 'lb', 'polish': 'pl', 'latin': 'la', 'coptic': '', 'divehi': '', 'breton': '', 'tibetan': '', 'basque': 'eu', 'croatian': 'hr', 'norwegian bokmål': 'no', 'bulgarian': 'bg', 'hungarian': 'hu', 'indonesian': 'id', 'lithuanian': 'lt', 'burmese': 'my', 'swedish': 'sv', 'turkmen': '', 'greek': 'el', 'nepali': 'ne', 'bengali': 'bn', 'sinhalese': '', 'albanian': 'sq', 'galician': 'gl', 'uzbek': 'uz', 'azerbaijani': 'az', 'mongolian': 'mn', 'belarusian': 'be', 'southern ndebele': '', 'friulian': '', 'catalan': 'ca', 'estonian': 'et', 'kazakh': 'kk', 'tswana': '', 'italian': 'it', 'syriac': '', 'sanskrit': '', 'slovenian': 'sl', 'zulu': 'zu', 'marathi': 'mr', 'venda': '', 'vietnamese': 'vi', 'french': 'fr', 'chinese_tc': 'zh-TW', 'korean': 'ko', 'japanese': 'ja', 'esperanto': 'eo', 'piedmontese': '', 'northern sotho': '', 'scottish': '', 'hindi': 'hi', 'xhosa': 'xh', 'malay': 'ms'}",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Language(models.Model):\n    objects = LanguageManager()\n    DIRECTION_CHOICES = (('ltr', 'Left-to-right'), ('rtl', 'Right-to-left'))\n    POLYGLOSSIA_CHOICES = (('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('bahasai', 'Bahasai'), ('bahasam', 'Bahasam'), ('basque', 'Basque'), ('bengali', 'Bengali'), ('brazilian', 'Brazilian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('catalan', 'Catalan'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('estonian', 'Estonian'), ('farsi', 'Farsi'), ('finnish', 'Finnish'), ('french', 'French'), ('friulan', 'Friulan'), ('galician', 'Galician'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('icelandic', 'Icelandic'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('kannada', 'Kannada'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('lsorbian', 'Lsorbian'), ('magyar', 'Magyar'), ('malayalam', 'Malayalam'), ('marathi', 'Marathi'), ('nko', 'Nko'), ('norsk', 'Norsk'), ('nynorsk', 'Nynorsk'), ('occitan', 'Occitan'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuges', 'Portuges'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('samin', 'Samin'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('usorbian', 'Usorbian'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('custom', 'Other')) # yapf:disable\n    STYLES_CHOICES = ((u'afrikaans', u'Afrikaans'), (u'albanian', u'Albanian'), (u'amharic', u'Amharic'), (u'arabic', u'Arabic'), (u'armenian', u'Armenian'), (u'asturian', u'Asturian'), (u'azerbaijani', u'Azerbaijani'), (u'basque', u'Basque'), (u'belarusian', u'Belarusian'), (u'bengali', u'Bengali'), (u'bosnian', u'Bosnian'), (u'breton', u'Breton'), (u'bulgarian', u'Bulgarian'), (u'burmese', u'Burmese'), (u'cantonese', u'Cantonese'), (u'catalan', u'Catalan'), (u'chinese', u'Chinese (simplified)'), (u'chinese_tc', u'Chinese (traditional)'), (u'coptic', u'Coptic'), (u'croatian', u'Croatian'), (u'czech', u'Czech'), (u'danish', u'Danish'), (u'divehi', u'Divehi'), (u'dutch', u'Dutch'), (u'english', u'English'), (u'esperanto', u'Esperanto'), (u'estonian', u'Estonian'), (u'filipino', u'Filipino'), (u'finnish', u'Finnish'), (u'french', u'French'), (u'friulian', u'Friulian'), (u'galician', u'Galician'), (u'georgian', u'Georgian'), (u'german', u'German'), (u'greek', u'Greek'), (u'hebrew', u'Hebrew'), (u'hindi', u'Hindi'), (u'hungarian', u'Hungarian'), (u'icelandic', u'Icelandic'), (u'indonesian', u'Indonesian'), (u'interlingua', u'Interlingua'), (u'irish', u'Irish'), (u'italian', u'Italian'), (u'japanese', u'Japanese'), (u'kannada', u'Kannada'), (u'kazakh', u'Kazakh'), (u'khmer', u'Khmer'), (u'korean', u'Korean'), (u'kurdish', u'Kurdish'), (u'kyrgyz', u'Kyrgyz'), (u'lao', u'Lao'), (u'latin', u'Latin'), (u'latvian', u'Latvian'), (u'lithuanian', u'Lithuanian'), (u'luxembourgish', u'Luxembourgish'), (u'macedonian', u'Macedonian'), (u'magyar', u'Magyar'), (u'malay', u'Malay'), (u'malayalam', u'Malayalam'), (u'malaysian', u'Malaysian'), (u'mandarin', u'Mandarin'), (u'marathi', u'Marathi'), (u'mongolian', u'Mongolian'), (u'montenegrin', u'Montenegrin'), (u'nepali', u'Nepali'), (u'northern sotho', u'Northern Sotho'), (u'norwegian bokmål', u'Norwegian Bokmål'), (u'norwegian nynorsk', u'Norwegian Nynorsk'), (u'occitan', u'Occitan'), (u'persian', u'Persian'), (u'piedmontese', u'Piedmontese'), (u'polish', u'Polish'), (u'portuguese', u'Portuguese'), (u'romanian', u'Romanian'), (u'romansh', u'Romansh'), (u'russian', u'Russian'), (u'sanskrit', u'Sanskrit'), (u'scottish', u'Scottish'), (u'serbian', u'Serbian'), (u'sinhalese', u'Sinhalese'), (u'slovak', u'Slovak'), (u'slovenian', u'Slovenian'), (u'southern ndebele', u'Southern Ndebele'), (u'southern sotho', u'Southern Sotho'), (u'spanish', u'Spanish'), (u'swedish', u'Swedish'), (u'syriac', u'Syriac'), (u'tajik', u'Tajik'), (u'tamil', u'Tamil'), (u'telugu', u'Telugu'), (u'thai', u'Thai'), (u'tibetan', u'Tibetan'), (u'tsonga', u'Tsonga'), (u'tswana', u'Tswana'), (u'turkish', u'Turkish'), (u'turkmen', u'Turkmen'), (u'ukrainian', u'Ukrainian'), (u'urdu', u'Urdu'), (u'uzbek', u'Uzbek'), (u'venda', u'Venda'), (u'vietnamese', u'Vietnamese'), (u'welsh', u'Welsh'), (u'xhosa', u'Xhosa'), (u'zulu', u'Zulu')) # yapf:disable\n    STYLES_TO_GOOGLE_TRANSLATE_MAPPING = {'irish': 'ga', 'montenegrin': '', 'telugu': 'te', 'tajik': 'tg', 'amharic': 'am', 'romanian': 'ro', 'filipino': 'tl', 'serbian': 'sr', 'icelandic': 'is', 'tamil': 'ta', 'czech': 'cs', 'malayalam': 'ml', 'danish': 'da', 'german': 'de', 'persian': 'fa', 'dutch': 'nl', 'welsh': 'cy', 'asturian': '', 'kurdish': 'ku', 'kyrgyz': 'ky', 'interlingua': '', 'arabic': 'ar', 'afrikaans': 'af', 'portuguese': 'pt', 'ukrainian': 'uk', 'thai': 'th', 'occitan': '', 'macedonian': 'mk', 'kannada': 'kn', 'cantonese': '', 'turkish': 'tr', 'southern sotho': '', 'hebrew': 'iw', 'urdu': 'ur', 'english': 'en', 'slovak': 'sk', 'malaysian': 'ms', 'latvian': 'lv', 'georgian': 'ka', 'lao': 'lo', 'bosnian': 'bs', 'armenian': 'hy', 'magyar': 'hu', 'finnish': 'fi', 'khmer': 'km', 'chinese': 'zh', 'spanish': 'es', 'romansh': '', 'norwegian nynorsk': 'no', 'russian': 'ru', 'mandarin': '', 'tsonga': '', 'luxembourgish': 'lb', 'polish': 'pl', 'latin': 'la', 'coptic': '', 'divehi': '', 'breton': '', 'tibetan': '', 'basque': 'eu', 'croatian': 'hr', 'norwegian bokmål': 'no', 'bulgarian': 'bg', 'hungarian': 'hu', 'indonesian': 'id', 'lithuanian': 'lt', 'burmese': 'my', 'swedish': 'sv', 'turkmen': '', 'greek': 'el', 'nepali': 'ne', 'bengali': 'bn', 'sinhalese': '', 'albanian': 'sq', 'galician': 'gl', 'uzbek': 'uz', 'azerbaijani': 'az', 'mongolian': 'mn', 'belarusian': 'be', 'southern ndebele': '', 'friulian': '', 'catalan': 'ca', 'estonian': 'et', 'kazakh': 'kk', 'tswana': '', 'italian': 'it', 'syriac': '', 'sanskrit': '', 'slovenian': 'sl', 'zulu': 'zu', 'marathi': 'mr', 'venda': '', 'vietnamese': 'vi', 'french': 'fr', 'chinese_tc': 'zh-TW', 'korean': 'ko', 'japanese': 'ja', 'esperanto': 'eo', 'piedmontese': '', 'northern sotho': '', 'scottish': '', 'hindi': 'hi', 'xhosa': 'xh', 'malay': 'ms'}\n    name = models.CharField(max_length=100, db_index=True)\n    delegation = models.ForeignKey(Delegation, blank=True, null=True, on_delete=models.CASCADE)\n    hidden = models.BooleanField(default=False)\n    hidden_from_submission = models.BooleanField(default=False)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class ExamManager(models.Manager):\n    def get_by_natural_key(self, name):\n        return self.get(name=name)\n@python_2_unicode_compatible\nclass Exam(models.Model):\n    objects = ExamManager()\n    code = models.CharField(max_length=8)\n    name = models.CharField(max_length=100, unique=True)\n    active = models.BooleanField(default=True, help_text='Exam is editable and viewable by delegations.')\n    hidden = models.BooleanField(default=False, help_text='Exam is hidden from everyone except superusers.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Exam(models.Model):\n    objects = ExamManager()\n    code = models.CharField(max_length=8)\n    name = models.CharField(max_length=100, unique=True)\n    active = models.BooleanField(default=True, help_text='Exam is editable and viewable by delegations.')\n    hidden = models.BooleanField(default=False, help_text='Exam is hidden from everyone except superusers.')\n    marking_active = models.BooleanField(default=False, help_text='Allow marking submission from delegations. Activate only after official marks are entered.')\n    moderation_active = models.BooleanField(default=False, help_text='Allow access to moderation interface.')\n    show_scans = models.BooleanField(default=False, help_text='Show successful scans to delegation.')\n    hide_feedback = models.BooleanField(default=False, help_text='Hide feedback from delegations')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "QuestionManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class QuestionManager(models.Manager):\n    def get_by_natural_key(self, name, exam_name):\n        return self.get(name=name, exam=Exam.objects.get_by_natural_key(exam_name))\n@python_2_unicode_compatible\nclass Question(models.Model):\n    objects = QuestionManager()\n    QUESTION = 0\n    ANSWER = 1\n    QUESTION_TYPES = (\n        (QUESTION, 'Question'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Question(models.Model):\n    objects = QuestionManager()\n    QUESTION = 0\n    ANSWER = 1\n    QUESTION_TYPES = (\n        (QUESTION, 'Question'),\n        (ANSWER, 'Answer'),\n    )\n    code = models.CharField(\n        max_length=8, help_text=\"e.g. Q for Question, A for Answer Sheet, G for General Instruction\"",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNodeManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class VersionNodeManager(models.Manager):\n    def get_by_natural_key(self, version, question_name, exam_name, lang_name, delegation_name):\n        return self.get(\n            version=version,\n            language=Language.objects.get_by_natural_key(lang_name, delegation_name),\n            question=Question.objects.get_by_natural_key(question_name, exam_name)\n        )\n@python_2_unicode_compatible\nclass VersionNode(models.Model):\n    objects = VersionNodeManager()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VersionNode",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class VersionNode(models.Model):\n    objects = VersionNodeManager()\n    STATUS_CHOICES = (\n        ('P', 'Proposal'),\n        ('S', 'Staged'),\n        ('C', 'Confirmed'),\n    )\n    text = models.TextField()\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    version = models.IntegerField()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNodeManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class TranslationNodeManager(models.Manager):\n    def get_by_natural_key(self, question_name, exam_name, lang_name, delegation_name):\n        return self.get(\n            language=Language.objects.get_by_natural_key(lang_name, delegation_name),\n            question=Question.objects.get_by_natural_key(question_name, exam_name)\n        )\n@python_2_unicode_compatible\nclass TranslationNode(models.Model):\n    objects = TranslationNodeManager()\n    STATUS_CHOICES = (",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationNode",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class TranslationNode(models.Model):\n    objects = TranslationNodeManager()\n    STATUS_CHOICES = (\n        ('O', 'In progress'),\n        ('L', 'Locked'),\n        ('S', 'Submitted'),\n    )\n    text = models.TextField(blank=True)\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    language = models.ForeignKey(Language, on_delete=models.CASCADE)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "AttributeChangeManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class AttributeChangeManager(models.Manager):\n    def get_by_natural_key(self, *args, **kwargs):\n        return self.get(node=TranslationNode.objects.get_by_natural_key(*args, **kwargs))\n@python_2_unicode_compatible\nclass AttributeChange(models.Model):\n    objects = AttributeChangeManager()\n    content = models.TextField(blank=True)\n    node = models.OneToOneField(TranslationNode, on_delete=models.CASCADE)\n    def __str__(self):\n        return u'attrs:{}'.format(self.node)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "AttributeChange",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class AttributeChange(models.Model):\n    objects = AttributeChangeManager()\n    content = models.TextField(blank=True)\n    node = models.OneToOneField(TranslationNode, on_delete=models.CASCADE)\n    def __str__(self):\n        return u'attrs:{}'.format(self.node)\n    def natural_key(self):\n        return self.node.natural_key()\n    natural_key.dependencies = [\n        'ipho_exam.translationnode',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNodeManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class PDFNodeManager(models.Manager):\n    def get_by_natural_key(self, question_name, exam_name, lang_name, delegation_name):\n        return self.get(\n            language=Language.objects.get_by_natural_key(lang_name, delegation_name),\n            question=Question.objects.get_by_natural_key(question_name, exam_name)\n        )\ndef get_file_path(instance, filename):\n    ext = filename.split('.')[-1]\n    filename = \"%s.%s\" % (uuid.uuid4(), ext)\n    return os.path.join('pdfnodes/Lang{}Q{}'.format(instance.question.pk, instance.language.pk), filename)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PDFNode",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class PDFNode(models.Model):\n    objects = PDFNodeManager()\n    STATUS_CHOICES = (\n        ('O', 'In progress'),\n        ('L', 'Locked'),\n        ('S', 'Submitted'),\n    )\n    pdf = models.FileField(upload_to=get_file_path, blank=True)\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    language = models.ForeignKey(Language, on_delete=models.CASCADE)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TranslationImportTmp",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class TranslationImportTmp(models.Model):\n    slug = models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    language = models.ForeignKey(Language, on_delete=models.CASCADE)\n    content = models.TextField(blank=True)\n    def __str__(self):\n        return u'%s - %s, %s' % (self.slug, self.question, self.language)\n@python_2_unicode_compatible\nclass CachedAutoTranslation(models.Model):\n    source_and_lang_hash = models.CharField(max_length=32, primary_key=True)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "CachedAutoTranslation",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class CachedAutoTranslation(models.Model):\n    source_and_lang_hash = models.CharField(max_length=32, primary_key=True)\n    source_length = models.IntegerField()\n    source_lang = models.CharField(max_length=5)\n    target_lang = models.CharField(max_length=5)\n    target_text = models.TextField(blank=True)\n    hits = models.IntegerField(default=1)\n    def __str__(self):\n        return u'{} -> {} ({})'.format(self.source_lang, self.target_lang, self.source_length)\nVALID_RAW_FIGURE_EXTENSIONS = ('.png', '.jpg', '.jpeg')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "FigureManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class FigureManager(PolymorphicManager):\n    def get_by_natural_key(self, fig_id):\n        return self.get(fig_id=fig_id)\n@python_2_unicode_compatible\nclass Figure(PolymorphicModel):\n    objects = FigureManager()\n    name = models.CharField(max_length=100, db_index=True)\n    fig_id = models.URLField(max_length=100, db_index=True, default=natural_id.generate_id, unique=True, blank=False)\n    def natural_key(self):\n        return (self.fig_id, )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Figure",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Figure(PolymorphicModel):\n    objects = FigureManager()\n    name = models.CharField(max_length=100, db_index=True)\n    fig_id = models.URLField(max_length=100, db_index=True, default=natural_id.generate_id, unique=True, blank=False)\n    def natural_key(self):\n        return (self.fig_id, )\n    def __str__(self):\n        return u'%s' % (self.name)\nclass CompiledFigure(Figure):\n    content = models.TextField(blank=True)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "CompiledFigure",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class CompiledFigure(Figure):\n    content = models.TextField(blank=True)\n    params = models.TextField(blank=True)\n    def params_as_list(self):\n        return list([si.trim() for si in self.params.split(',')])\n    def _to_svg(self, query, lang=None):\n        placeholders = self.params.split(',')\n        fig_svg = self.content\n        fonts_repl = u'@import url({host}/static/noto/notosans.css);'.format(host=SITE_URL)\n        font_name = u'Noto Sans'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "RawFigure",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class RawFigure(Figure):\n    content = models.BinaryField()\n    filetype = models.CharField(max_length=4)\n    params = ''\n    def params_as_list(self):\n        return []\n    def to_inline(self, *args, **kwargs):\n        return self.content, self.filetype\n    def to_file(self, fig_name, query, lang=None, format_default='auto', force_default=False):\n        with open('{name}.{ext}'.format(name=fig_name, ext=self.filetype), 'wb') as f:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PlaceManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class PlaceManager(models.Manager):\n    def get_by_natural_key(self, name, exam_name):\n        return self.get(name=name, exam__name=exam_name)\n@python_2_unicode_compatible\nclass Place(models.Model):\n    objects = PlaceManager()\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)\n    name = models.CharField(max_length=20)\n    def __str__(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Place",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Place(models.Model):\n    objects = PlaceManager()\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)\n    name = models.CharField(max_length=20)\n    def __str__(self):\n        return u'{} [{} {}]'.format(self.name, self.exam.name, self.student.code)\n    def natural_key(self):\n        return (self.name, self.exam.name)\n    class Meta(object):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Feedback(models.Model):\n    STATUS_CHOICES = (\n        ('S', 'Submitted'),\n        ('V', 'Scheduled for voting'),\n        ('I', 'Implemented'),\n        ('T', 'Settled after voting'),\n        ('W', 'Withdrawn'),\n    )\n    PARTS_CHOICES = (\n        ('General', 'General'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Like(models.Model):\n    CHOICES = (\n        ('L', 'Liked'),\n        ('U', 'Unliked'),\n    )\n    status = models.CharField(max_length=1, choices=CHOICES)\n    delegation = models.ForeignKey(Delegation, on_delete=models.CASCADE)\n    feedback = models.ForeignKey(Feedback, on_delete=models.CASCADE)\n    class Meta(object):\n        unique_together = index_together = ('delegation', 'feedback')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamActionManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class ExamActionManager(models.Manager):\n    def get_by_natural_key(self, exam_name, delegation_name, action):\n        return self.get(exam__name=exam_name, delegation__name=delegation_name, action=action)\nclass ExamAction(models.Model):\n    objects = ExamActionManager()\n    OPEN = 'O'\n    SUBMITTED = 'S'\n    STATUS_CHOICES = (\n        (OPEN, 'In progress'),\n        (SUBMITTED, 'Submitted'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "ExamAction",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class ExamAction(models.Model):\n    objects = ExamActionManager()\n    OPEN = 'O'\n    SUBMITTED = 'S'\n    STATUS_CHOICES = (\n        (OPEN, 'In progress'),\n        (SUBMITTED, 'Submitted'),\n    )\n    TRANSLATION = 'T'\n    POINTS = 'P'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "StudentSubmission",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class StudentSubmission(models.Model):\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)\n    language = models.ForeignKey(Language, on_delete=models.CASCADE)\n    with_question = models.BooleanField(default=True, help_text='Deliver question sheets.')\n    with_answer = models.BooleanField(default=False, help_text='Deliver also answer sheet.')\n    ## TODO: do we need a status? (in progress, submitted, printed)\n    class Meta(object):\n        unique_together = index_together = (('student', 'exam', 'language'), )\ndef exam_prints_filename(obj, fname):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class Document(models.Model):\n    SCAN_STATUS_CHOICES = (\n        ('S', 'Success'),\n        ('W', 'Warning'),\n        ('M', 'Missing pages'),\n    )\n    exam = models.ForeignKey(Exam, help_text='Exam', on_delete=models.CASCADE)\n    student = models.ForeignKey(Student, help_text='Student', on_delete=models.CASCADE)\n    timestamp = models.DateTimeField(auto_now=True, null=True)\n    position = models.IntegerField(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "DocumentTask",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class DocumentTask(models.Model):\n    task_id = models.CharField(unique=True, max_length=255)\n    document = models.OneToOneField(Document, on_delete=models.CASCADE)\n    def __str__(self):\n        return u'{} --> {}'.format(self.task_id, self.document)\n@python_2_unicode_compatible\nclass PrintLog(models.Model):\n    TYPE_CHOICES = (('P', 'Printout'), ('S', 'Scan'))\n    document = models.ForeignKey(Document, on_delete=models.CASCADE)\n    type = models.CharField(max_length=1, choices=TYPE_CHOICES)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "PrintLog",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "class PrintLog(models.Model):\n    TYPE_CHOICES = (('P', 'Printout'), ('S', 'Scan'))\n    document = models.ForeignKey(Document, on_delete=models.CASCADE)\n    type = models.CharField(max_length=1, choices=TYPE_CHOICES)\n    timestamp = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return u'{}-{} ({}) {}'.format(self.document.exam.code, self.document.position, self.type, self.timestamp)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "get_file_path",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def get_file_path(instance, filename):\n    ext = filename.split('.')[-1]\n    filename = \"%s.%s\" % (uuid.uuid4(), ext)\n    return os.path.join('pdfnodes/Lang{}Q{}'.format(instance.question.pk, instance.language.pk), filename)\n@python_2_unicode_compatible\nclass PDFNode(models.Model):\n    objects = PDFNodeManager()\n    STATUS_CHOICES = (\n        ('O', 'In progress'),\n        ('L', 'Locked'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "create_actions_on_exam_creation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def create_actions_on_exam_creation(instance, created, raw, **kwargs):\n    # Ignore fixtures and saves for existing courses.\n    if not created or raw:\n        return\n    for delegation in Delegation.objects.all():\n        for action, _ in ExamAction.ACTION_CHOICES:\n            exam_action, _ = ExamAction.objects.get_or_create(exam=instance, delegation=delegation, action=action)\n@receiver(post_save, sender=Delegation, dispatch_uid='create_actions_on_delegation_creation')\ndef create_actions_on_delegation_creation(instance, created, raw, **kwargs):\n    # Ignore fixtures and saves for existing courses.",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "create_actions_on_delegation_creation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def create_actions_on_delegation_creation(instance, created, raw, **kwargs):\n    # Ignore fixtures and saves for existing courses.\n    if not created or raw:\n        return\n    for exam in Exam.objects.all():\n        for action, _ in ExamAction.ACTION_CHOICES:\n            exam_action, _ = ExamAction.objects.get_or_create(exam=exam, delegation=instance, action=action)\nclass StudentSubmission(models.Model):\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "exam_prints_filename",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def exam_prints_filename(obj, fname):\n    basestr = 'exams-docs/{}/print/exam-{}-{}.pdf'\n    return basestr.format(obj.student.code, obj.exam.id, obj.position)\ndef exam_scans_filename(obj, fname):\n    basestr = 'exams-docs/{}/scan/exam-{}-{}.pdf'\n    return basestr.format(obj.student.code, obj.exam.id, obj.position)\ndef exam_scans_orig_filename(obj, fname):\n    basestr = 'scans-evaluated/{}__{}.pdf'\n    timestamp = timezone.now().strftime('%Y%m%d%H%M%S')\n    return basestr.format(obj.barcode_base, timestamp)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "exam_scans_filename",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def exam_scans_filename(obj, fname):\n    basestr = 'exams-docs/{}/scan/exam-{}-{}.pdf'\n    return basestr.format(obj.student.code, obj.exam.id, obj.position)\ndef exam_scans_orig_filename(obj, fname):\n    basestr = 'scans-evaluated/{}__{}.pdf'\n    timestamp = timezone.now().strftime('%Y%m%d%H%M%S')\n    return basestr.format(obj.barcode_base, timestamp)\n@python_2_unicode_compatible\nclass Document(models.Model):\n    SCAN_STATUS_CHOICES = (",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "exam_scans_orig_filename",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "def exam_scans_orig_filename(obj, fname):\n    basestr = 'scans-evaluated/{}__{}.pdf'\n    timestamp = timezone.now().strftime('%Y%m%d%H%M%S')\n    return basestr.format(obj.barcode_base, timestamp)\n@python_2_unicode_compatible\nclass Document(models.Model):\n    SCAN_STATUS_CHOICES = (\n        ('S', 'Success'),\n        ('W', 'Warning'),\n        ('M', 'Missing pages'),",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nSITE_URL = getattr(settings, 'SITE_URL')\nINKSCAPE_BIN = getattr(settings, 'INKSCAPE_BIN', 'inkscape')\nclass LanguageManager(models.Manager):\n    def get_by_natural_key(self, name, delegation_name):\n        return self.get(name=name, delegation=Delegation.objects.get_by_natural_key(delegation_name))\n@python_2_unicode_compatible\nclass Language(models.Model):\n    objects = LanguageManager()\n    DIRECTION_CHOICES = (('ltr', 'Left-to-right'), ('rtl', 'Right-to-left'))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "SITE_URL = getattr(settings, 'SITE_URL')\nINKSCAPE_BIN = getattr(settings, 'INKSCAPE_BIN', 'inkscape')\nclass LanguageManager(models.Manager):\n    def get_by_natural_key(self, name, delegation_name):\n        return self.get(name=name, delegation=Delegation.objects.get_by_natural_key(delegation_name))\n@python_2_unicode_compatible\nclass Language(models.Model):\n    objects = LanguageManager()\n    DIRECTION_CHOICES = (('ltr', 'Left-to-right'), ('rtl', 'Right-to-left'))\n    POLYGLOSSIA_CHOICES = (('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('bahasai', 'Bahasai'), ('bahasam', 'Bahasam'), ('basque', 'Basque'), ('bengali', 'Bengali'), ('brazilian', 'Brazilian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('catalan', 'Catalan'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('estonian', 'Estonian'), ('farsi', 'Farsi'), ('finnish', 'Finnish'), ('french', 'French'), ('friulan', 'Friulan'), ('galician', 'Galician'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('icelandic', 'Icelandic'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('kannada', 'Kannada'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('lsorbian', 'Lsorbian'), ('magyar', 'Magyar'), ('malayalam', 'Malayalam'), ('marathi', 'Marathi'), ('nko', 'Nko'), ('norsk', 'Norsk'), ('nynorsk', 'Nynorsk'), ('occitan', 'Occitan'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuges', 'Portuges'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('samin', 'Samin'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('usorbian', 'Usorbian'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('custom', 'Other')) # yapf:disable",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "INKSCAPE_BIN",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "INKSCAPE_BIN = getattr(settings, 'INKSCAPE_BIN', 'inkscape')\nclass LanguageManager(models.Manager):\n    def get_by_natural_key(self, name, delegation_name):\n        return self.get(name=name, delegation=Delegation.objects.get_by_natural_key(delegation_name))\n@python_2_unicode_compatible\nclass Language(models.Model):\n    objects = LanguageManager()\n    DIRECTION_CHOICES = (('ltr', 'Left-to-right'), ('rtl', 'Right-to-left'))\n    POLYGLOSSIA_CHOICES = (('albanian', 'Albanian'), ('amharic', 'Amharic'), ('arabic', 'Arabic'), ('armenian', 'Armenian'), ('asturian', 'Asturian'), ('bahasai', 'Bahasai'), ('bahasam', 'Bahasam'), ('basque', 'Basque'), ('bengali', 'Bengali'), ('brazilian', 'Brazilian'), ('breton', 'Breton'), ('bulgarian', 'Bulgarian'), ('catalan', 'Catalan'), ('coptic', 'Coptic'), ('croatian', 'Croatian'), ('czech', 'Czech'), ('danish', 'Danish'), ('divehi', 'Divehi'), ('dutch', 'Dutch'), ('english', 'English'), ('esperanto', 'Esperanto'), ('estonian', 'Estonian'), ('farsi', 'Farsi'), ('finnish', 'Finnish'), ('french', 'French'), ('friulan', 'Friulan'), ('galician', 'Galician'), ('german', 'German'), ('greek', 'Greek'), ('hebrew', 'Hebrew'), ('hindi', 'Hindi'), ('icelandic', 'Icelandic'), ('interlingua', 'Interlingua'), ('irish', 'Irish'), ('italian', 'Italian'), ('kannada', 'Kannada'), ('lao', 'Lao'), ('latin', 'Latin'), ('latvian', 'Latvian'), ('lithuanian', 'Lithuanian'), ('lsorbian', 'Lsorbian'), ('magyar', 'Magyar'), ('malayalam', 'Malayalam'), ('marathi', 'Marathi'), ('nko', 'Nko'), ('norsk', 'Norsk'), ('nynorsk', 'Nynorsk'), ('occitan', 'Occitan'), ('piedmontese', 'Piedmontese'), ('polish', 'Polish'), ('portuges', 'Portuges'), ('romanian', 'Romanian'), ('romansh', 'Romansh'), ('russian', 'Russian'), ('samin', 'Samin'), ('sanskrit', 'Sanskrit'), ('scottish', 'Scottish'), ('serbian', 'Serbian'), ('slovak', 'Slovak'), ('slovenian', 'Slovenian'), ('spanish', 'Spanish'), ('swedish', 'Swedish'), ('syriac', 'Syriac'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('thai', 'Thai'), ('tibetan', 'Tibetan'), ('turkish', 'Turkish'), ('turkmen', 'Turkmen'), ('ukrainian', 'Ukrainian'), ('urdu', 'Urdu'), ('usorbian', 'Usorbian'), ('vietnamese', 'Vietnamese'), ('welsh', 'Welsh'), ('custom', 'Other')) # yapf:disable\n    STYLES_CHOICES = ((u'afrikaans', u'Afrikaans'), (u'albanian', u'Albanian'), (u'amharic', u'Amharic'), (u'arabic', u'Arabic'), (u'armenian', u'Armenian'), (u'asturian', u'Asturian'), (u'azerbaijani', u'Azerbaijani'), (u'basque', u'Basque'), (u'belarusian', u'Belarusian'), (u'bengali', u'Bengali'), (u'bosnian', u'Bosnian'), (u'breton', u'Breton'), (u'bulgarian', u'Bulgarian'), (u'burmese', u'Burmese'), (u'cantonese', u'Cantonese'), (u'catalan', u'Catalan'), (u'chinese', u'Chinese (simplified)'), (u'chinese_tc', u'Chinese (traditional)'), (u'coptic', u'Coptic'), (u'croatian', u'Croatian'), (u'czech', u'Czech'), (u'danish', u'Danish'), (u'divehi', u'Divehi'), (u'dutch', u'Dutch'), (u'english', u'English'), (u'esperanto', u'Esperanto'), (u'estonian', u'Estonian'), (u'filipino', u'Filipino'), (u'finnish', u'Finnish'), (u'french', u'French'), (u'friulian', u'Friulian'), (u'galician', u'Galician'), (u'georgian', u'Georgian'), (u'german', u'German'), (u'greek', u'Greek'), (u'hebrew', u'Hebrew'), (u'hindi', u'Hindi'), (u'hungarian', u'Hungarian'), (u'icelandic', u'Icelandic'), (u'indonesian', u'Indonesian'), (u'interlingua', u'Interlingua'), (u'irish', u'Irish'), (u'italian', u'Italian'), (u'japanese', u'Japanese'), (u'kannada', u'Kannada'), (u'kazakh', u'Kazakh'), (u'khmer', u'Khmer'), (u'korean', u'Korean'), (u'kurdish', u'Kurdish'), (u'kyrgyz', u'Kyrgyz'), (u'lao', u'Lao'), (u'latin', u'Latin'), (u'latvian', u'Latvian'), (u'lithuanian', u'Lithuanian'), (u'luxembourgish', u'Luxembourgish'), (u'macedonian', u'Macedonian'), (u'magyar', u'Magyar'), (u'malay', u'Malay'), (u'malayalam', u'Malayalam'), (u'malaysian', u'Malaysian'), (u'mandarin', u'Mandarin'), (u'marathi', u'Marathi'), (u'mongolian', u'Mongolian'), (u'montenegrin', u'Montenegrin'), (u'nepali', u'Nepali'), (u'northern sotho', u'Northern Sotho'), (u'norwegian bokmål', u'Norwegian Bokmål'), (u'norwegian nynorsk', u'Norwegian Nynorsk'), (u'occitan', u'Occitan'), (u'persian', u'Persian'), (u'piedmontese', u'Piedmontese'), (u'polish', u'Polish'), (u'portuguese', u'Portuguese'), (u'romanian', u'Romanian'), (u'romansh', u'Romansh'), (u'russian', u'Russian'), (u'sanskrit', u'Sanskrit'), (u'scottish', u'Scottish'), (u'serbian', u'Serbian'), (u'sinhalese', u'Sinhalese'), (u'slovak', u'Slovak'), (u'slovenian', u'Slovenian'), (u'southern ndebele', u'Southern Ndebele'), (u'southern sotho', u'Southern Sotho'), (u'spanish', u'Spanish'), (u'swedish', u'Swedish'), (u'syriac', u'Syriac'), (u'tajik', u'Tajik'), (u'tamil', u'Tamil'), (u'telugu', u'Telugu'), (u'thai', u'Thai'), (u'tibetan', u'Tibetan'), (u'tsonga', u'Tsonga'), (u'tswana', u'Tswana'), (u'turkish', u'Turkish'), (u'turkmen', u'Turkmen'), (u'ukrainian', u'Ukrainian'), (u'urdu', u'Urdu'), (u'uzbek', u'Uzbek'), (u'venda', u'Venda'), (u'vietnamese', u'Vietnamese'), (u'welsh', u'Welsh'), (u'xhosa', u'Xhosa'), (u'zulu', u'Zulu')) # yapf:disable",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_RAW_FIGURE_EXTENSIONS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "VALID_RAW_FIGURE_EXTENSIONS = ('.png', '.jpg', '.jpeg')\nVALID_COMPILED_FIGURE_EXTENSIONS = ('.svg', '.svgz')\nVALID_FIGURE_EXTENSIONS = VALID_RAW_FIGURE_EXTENSIONS + VALID_COMPILED_FIGURE_EXTENSIONS\nclass FigureManager(PolymorphicManager):\n    def get_by_natural_key(self, fig_id):\n        return self.get(fig_id=fig_id)\n@python_2_unicode_compatible\nclass Figure(PolymorphicModel):\n    objects = FigureManager()\n    name = models.CharField(max_length=100, db_index=True)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_COMPILED_FIGURE_EXTENSIONS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "VALID_COMPILED_FIGURE_EXTENSIONS = ('.svg', '.svgz')\nVALID_FIGURE_EXTENSIONS = VALID_RAW_FIGURE_EXTENSIONS + VALID_COMPILED_FIGURE_EXTENSIONS\nclass FigureManager(PolymorphicManager):\n    def get_by_natural_key(self, fig_id):\n        return self.get(fig_id=fig_id)\n@python_2_unicode_compatible\nclass Figure(PolymorphicModel):\n    objects = FigureManager()\n    name = models.CharField(max_length=100, db_index=True)\n    fig_id = models.URLField(max_length=100, db_index=True, default=natural_id.generate_id, unique=True, blank=False)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "VALID_FIGURE_EXTENSIONS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.models",
        "description": "src.components.Exam.exam_tools.ipho_exam.models",
        "peekOfCode": "VALID_FIGURE_EXTENSIONS = VALID_RAW_FIGURE_EXTENSIONS + VALID_COMPILED_FIGURE_EXTENSIONS\nclass FigureManager(PolymorphicManager):\n    def get_by_natural_key(self, fig_id):\n        return self.get(fig_id=fig_id)\n@python_2_unicode_compatible\nclass Figure(PolymorphicModel):\n    objects = FigureManager()\n    name = models.CharField(max_length=100, db_index=True)\n    fig_id = models.URLField(max_length=100, db_index=True, default=natural_id.generate_id, unique=True, blank=False)\n    def natural_key(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.models",
        "documentation": {}
    },
    {
        "label": "TexCompileException",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "class TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code\n        self.doc_fname = doc_fname\n        self.doc_tex = doc_tex\n        super(TexCompileException, self).__init__(\"pdflatex error (code %s) in %s, log:\\n %s.\" % (code, doc_fname, log))\ndef compile_tex_diff(old_body, new_body, ext_resources=[]):\n    tmpdir = mkdtemp(prefix=TEMP_PREFIX)\n    try:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "compile_tex_diff",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def compile_tex_diff(old_body, new_body, ext_resources=[]):\n    tmpdir = mkdtemp(prefix=TEMP_PREFIX)\n    try:\n        with codecs.open(os.path.join(tmpdir, 'new.tex'), \"w\", encoding='utf-8') as f:\n            f.write(new_body)\n        with codecs.open(os.path.join(tmpdir, 'old.tex'), \"w\", encoding='utf-8') as f:\n            f.write(old_body)\n        diff_body = subprocess.check_output(\n            ['latexdiff', '--encoding=utf-8', 'old.tex', 'new.tex'],\n            cwd=tmpdir,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "compile_tex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def compile_tex(body, ext_resources=[]):\n    doc = 'question'\n    etag = md5(body.encode('utf8')).hexdigest()\n    cache_key = \"%s:%s\" % (CACHE_PREFIX, etag)\n    pdf = cache.get(cache_key)\n    # body = body.replace(\"&#39;\", \"'\") # convert HTML apostrophe in human readable apostrophe\n    if pdf is None:\n        logger.debug('Hash of tex not found in cache')\n        if '\\\\nonstopmode' not in body:\n            raise ValueError(\"\\\\nonstopmode not present in document, cowardly refusing to process.\")",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "add_barcode",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def add_barcode(doc, bgenerator):\n    pdfdoc = PdfFileReader(BytesIO(doc))\n    output = PdfFileWriter()\n    for i in range(pdfdoc.getNumPages()):\n        barpdf = PdfFileReader(BytesIO(bgenerator(i + 1)))\n        watermark = barpdf.getPage(0)\n        wbox = watermark.artBox\n        wwidth = wbox.getWidth()\n        page = pdfdoc.getPage(i)\n        pbox = page.artBox",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "get_num_pages",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def get_num_pages(doc):\n    pdfdoc = PdfFileReader(BytesIO(doc))\n    return pdfdoc.getNumPages()\ndef concatenate_documents(all_documents):\n    output = PdfFileWriter()\n    for doc in all_documents:\n        pdfdoc = PdfFileReader(BytesIO(doc))\n        for i in range(pdfdoc.getNumPages()):\n            output.addPage(pdfdoc.getPage(i))\n    output_pdf = BytesIO()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "concatenate_documents",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def concatenate_documents(all_documents):\n    output = PdfFileWriter()\n    for doc in all_documents:\n        pdfdoc = PdfFileReader(BytesIO(doc))\n        for i in range(pdfdoc.getNumPages()):\n            output.addPage(pdfdoc.getPage(i))\n    output_pdf = BytesIO()\n    output.write(output_pdf)\n    return output_pdf.getvalue()\ndef cached_pdf_response(request, body, ext_resources=[], filename='question.pdf'):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "cached_pdf_response",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def cached_pdf_response(request, body, ext_resources=[], filename='question.pdf'):\n    etag = md5(body.encode('utf8')).hexdigest()\n    if request.META.get('HTTP_IF_NONE_MATCH', '') == etag:\n        return HttpResponseNotModified()\n    try:\n        # print('Trying to spawn task')\n        # job = tasks.compile_tex.delay(body, ext_resources)\n        # if not job.ready():\n        #     return HttpResponse('Computing...')\n        # pdf = job.get()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "check_add_watermark",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def check_add_watermark(request, doc):\n    \"\"\"\n    Checks if the 'delegation print' watermark needs to be added to the document,\n    and return the appropriate PDF (with / without watermark).\n    \"\"\"\n    if settings.ADD_DELEGATION_WATERMARK:\n        user = request.user\n        if not (user.is_staff or user.has_perm('ipho_core.is_staff') or user.has_perm('ipho_core.is_printstaff') or user.has_perm('ipho_core.is_marker')):\n            return add_watermark(doc)\n    return doc",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "add_watermark",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "def add_watermark(doc):\n    \"\"\"\n    Adds the 'delegation print' watermark to the given PDF document.\n    \"\"\"\n    with open(WATERMARK_PATH, 'rb') as wm_f:\n        watermark = PdfFileReader(BytesIO(wm_f.read()))\n        watermark_page = watermark.getPage(0)\n    output = PdfFileWriter()\n    pdfdoc = PdfFileReader(BytesIO(doc))\n    for idx in range(pdfdoc.getNumPages()):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "TEMP_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "TEMP_PREFIX = getattr(settings, 'TEX_TEMP_PREFIX', 'render_tex-')\nCACHE_PREFIX = getattr(settings, 'TEX_CACHE_PREFIX', 'render-tex')\nCACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 600)  # 10 min\nTEXBIN = getattr(settings, 'TEXBIN', '/usr/bin')\nWATERMARK_PATH = getattr(settings, 'WATERMARK_PATH', os.path.join(settings.STATIC_PATH, 'watermark.pdf'))\n# Get an instance of a logger\nlogger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "CACHE_PREFIX = getattr(settings, 'TEX_CACHE_PREFIX', 'render-tex')\nCACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 600)  # 10 min\nTEXBIN = getattr(settings, 'TEXBIN', '/usr/bin')\nWATERMARK_PATH = getattr(settings, 'WATERMARK_PATH', os.path.join(settings.STATIC_PATH, 'watermark.pdf'))\n# Get an instance of a logger\nlogger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "CACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 600)  # 10 min\nTEXBIN = getattr(settings, 'TEXBIN', '/usr/bin')\nWATERMARK_PATH = getattr(settings, 'WATERMARK_PATH', os.path.join(settings.STATIC_PATH, 'watermark.pdf'))\n# Get an instance of a logger\nlogger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code\n        self.doc_fname = doc_fname",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "TEXBIN",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "TEXBIN = getattr(settings, 'TEXBIN', '/usr/bin')\nWATERMARK_PATH = getattr(settings, 'WATERMARK_PATH', os.path.join(settings.STATIC_PATH, 'watermark.pdf'))\n# Get an instance of a logger\nlogger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code\n        self.doc_fname = doc_fname\n        self.doc_tex = doc_tex",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "WATERMARK_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "WATERMARK_PATH = getattr(settings, 'WATERMARK_PATH', os.path.join(settings.STATIC_PATH, 'watermark.pdf'))\n# Get an instance of a logger\nlogger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code\n        self.doc_fname = doc_fname\n        self.doc_tex = doc_tex\n        super(TexCompileException, self).__init__(\"pdflatex error (code %s) in %s, log:\\n %s.\" % (code, doc_fname, log))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "description": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "peekOfCode": "logger = logging.getLogger('ipho_exam.pdf')\nclass TexCompileException(Exception):\n    def __init__(self, code, doc_fname='', log='', doc_tex=''):\n        self.log = log\n        self.code = code\n        self.doc_fname = doc_fname\n        self.doc_tex = doc_tex\n        super(TexCompileException, self).__init__(\"pdflatex error (code %s) in %s, log:\\n %s.\" % (code, doc_fname, log))\ndef compile_tex_diff(old_body, new_body, ext_resources=[]):\n    tmpdir = mkdtemp(prefix=TEMP_PREFIX)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.pdf",
        "documentation": {}
    },
    {
        "label": "HasValidApiKey",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "description": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "peekOfCode": "class HasValidApiKey(permissions.BasePermission):\n    message = 'Invalid or missing API Key.'\n    def has_permission(self, request, view):\n        api_key = request.META.get('HTTP_APIKEY', '')\n        for name, key in list(settings.EXAM_TOOLS_API_KEYS.items()):\n            if api_key == key:\n                return True\n        return False\nclass HasValidApiKeyOrAdmin(permissions.IsAdminUser, HasValidApiKey):\n    def has_permission(self, request, view):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "documentation": {}
    },
    {
        "label": "HasValidApiKeyOrAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "description": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "peekOfCode": "class HasValidApiKeyOrAdmin(permissions.IsAdminUser, HasValidApiKey):\n    def has_permission(self, request, view):\n        return permissions.IsAdminUser.has_permission(self, request, view) \\\n            or HasValidApiKey.has_permission(self, request, view)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.permissions",
        "documentation": {}
    },
    {
        "label": "QMLForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLForm(forms.Form):\n    def __init__(self, root, initials, *args, **kwargs):\n        super(QMLForm, self).__init__(*args, **kwargs)\n        self.insert_fields(root, initials)\n    def insert_fields(self, node, initials):\n        if node.has_text:\n            self.fields[node.id] = node.form_element()\n            self.fields[node.id].initial = mark_safe(initials[node.id]) if node.id in initials else ''\n            self.fields[node.id].required = False\n            self.fields[node.id].widget.attrs['class'] = 'form-control'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "_classproperty",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class _classproperty(object):\n    def __init__(self, fget):\n        self.fget = fget\n    def __get__(self, owner_self, owner_cls):\n        return self.fget(owner_cls)\ndef escape_percents(tex_code):\n    parts = tex_code.split('%')\n    parts_it = iter(parts)\n    next(parts_it)\n    for i, (part, part_it) in enumerate(zip(parts, parts_it)):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLobject",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLobject(object):\n    default_attributes = {}\n    _all_objects = None\n    valid_children = DEFAULT_BLOCKS\n    default_heading = None\n    @_classproperty\n    def display_name(cls):  # pylint: disable=no-self-argument\n        name = cls.__name__.replace('QML', '')  # pylint: disable=no-member\n        split_pattern = re.compile('(^[^A-Z]*|[A-Z][^A-Z]*)')\n        name = ' '.join([ni.capitalize() for ni in split_pattern.findall(name) if ni is not None])",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLquestion",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLquestion(QMLobject):\n    tag = \"question\"\n    sort_order = -1\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS + \\\n                    ('title', 'section', 'part', 'subquestion', 'pagebreak', 'vspace', 'box', 'subanswer', 'subanswercontinuation')\n    default_attributes = {'points': '0.0'}\n    def title(self):\n        tt = ''",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsubquestion",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLsubquestion(QMLobject):\n    tag = \"subquestion\"\n    display_name = \"Task box (use for question sheets)\"\n    default_heading = \"Task box\"\n    sort_order = 500\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS\n    default_attributes = {'points': '0.0', 'part_nr': 'A', 'question_nr': '1'}\n    def heading(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsubanswer",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLsubanswer(QMLobject):\n    tag = \"subanswer\"\n    display_name = \"Answer box (use for answer sheets)\"\n    default_heading = \"Answer box\"\n    sort_order = 510\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS\n    default_attributes = {'points': '0.0', 'part_nr': 'A', 'question_nr': '1'}\n    def heading(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsubanswercontinuation",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLsubanswercontinuation(QMLobject):\n    tag = \"subanswercontinuation\"\n    display_name = \"Answer box (use for answer sheets), continuation (no points associated)\"\n    default_heading = \"Answer box\"\n    sort_order = 511\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS\n    default_attributes = {'part_nr': 'A', 'question_nr': '1'}\n    def heading(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLbox",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLbox(QMLobject):\n    tag = \"box\"\n    default_heading = \"Box\"\n    sort_order = 130\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS\n    def heading(self):\n        return 'Box'\n    def tex_begin(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLtitle",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLtitle(QMLobject):\n    tag = \"title\"\n    display_name = \"Title (Level 0)\"\n    default_heading = \"Title\"\n    sort_order = 10\n    has_text = True\n    has_children = False\n    def make_tex(self):\n        return '', []\n    def make_xhtml(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLpart",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLpart(QMLobject):\n    tag = \"part\"\n    display_name = \"Part (Level 1)\"\n    default_heading = \"Part\"\n    sort_order = 100\n    has_text = True\n    has_children = False\n    def tex_begin(self):\n        return u'\\\\PT{'\n    def tex_end(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLsection",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLsection(QMLobject):\n    tag = \"section\"\n    display_name = \"Section (Level 2)\"\n    default_heading = \"Section\"\n    sort_order = 110\n    has_text = True\n    has_children = False\n    def tex_begin(self):\n        return u'\\\\subsubsection*{'\n    def tex_end(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLparagraph",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLparagraph(QMLobject):\n    tag = \"paragraph\"\n    sort_order = 120\n    has_text = True\n    has_children = False\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\n    def xhtml_begin(self):\n        return u'<p>'\n    def xhtml_end(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLfigure",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLfigure(QMLobject):\n    tag = \"figure\"\n    default_heading = \"Figure\"\n    sort_order = 200\n    has_text = False\n    has_children = True\n    lang = None\n    valid_children = ('caption', 'param')\n    default_attributes = {'figid': 'enter-figid', 'width': '0.5'}\n    def fig_query(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLfigureText",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLfigureText(QMLobject):\n    tag = \"param\"\n    display_name = \"Figure Replacement Text\"\n    sort_order = 202\n    has_text = True\n    has_children = False\n    default_attributes = {'name': 'tba'}\n    # def form_element(self):\n    #     return forms.CharField(widget=forms.TextInput(attrs={'rel':'figparam', 'data-placeholder-name={}'.format(self.attributes['name'])}))\nclass QMLfigureCaption(QMLobject):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLfigureCaption",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLfigureCaption(QMLobject):\n    tag = \"caption\"\n    display_name = \"Figure Caption\"\n    default_heading = \"Caption\"\n    sort_order = 201\n    has_text = True\n    has_children = False\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\nclass QMLequation(QMLobject):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLequation",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLequation(QMLobject):\n    tag = \"equation\"\n    default_heading = \"Equation\"\n    sort_order = 300\n    has_text = True\n    has_children = False\n    def tex_begin(self):\n        return u'\\\\begin{equation}\\n'\n    def tex_end(self):\n        return u'\\\\end{equation}\\n\\n'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLequation_unnumbered",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLequation_unnumbered(QMLobject):\n    tag = \"equation_unnumbered\"\n    display_name = 'Equation*'\n    default_heading = \"Equation*\"\n    sort_order = 300\n    has_text = True\n    has_children = False\n    def tex_begin(self):\n        return u'\\\\begin{equation*}\\n'\n    def tex_end(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLlist",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLlist(QMLobject):\n    tag = \"list\"\n    display_name = \"Bullet list\"\n    default_heading = \"Bullet list\"\n    sort_order = 200\n    has_text = False\n    has_children = True\n    valid_children = ('item', )\n    def tex_begin(self):\n        return u'\\\\begin{itemize}\\n'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLenumerate",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLenumerate(QMLobject):\n    tag = \"enumerate\"\n    display_name = \"Numbered list\"\n    default_heading = \"Numbered list\"\n    sort_order = 210\n    has_text = False\n    has_children = True\n    valid_children = ('item', )\n    def tex_begin(self):\n        return u'\\\\begin{enumerate}\\n'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLlistItem",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLlistItem(QMLobject):\n    tag = \"item\"\n    sort_order = 201\n    has_text = True\n    has_children = False\n    def content_html(self):\n        return u'<ul><li>%s</li></ul>' % self.data_html\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\n    def tex_begin(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLlatex",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLlatex(QMLobject):\n    tag = \"texfield\"\n    display_name = \"Latex Replacement Template\"\n    sort_order = 900\n    has_text = False\n    has_children = True\n    valid_children = ('texparam', )\n    default_attributes = {'content': '\\\\textbf{ {{ myparam }} }'}\n    def make_tex(self):\n        content = str(self.attributes['content']) + u'\\n\\n'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLlatexParam",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLlatexParam(QMLobject):\n    tag = \"texparam\"\n    display_name = \"Latex Replacement Parameter\"\n    sort_order = 901\n    has_text = True\n    has_children = False\n    default_attributes = {'name': 'myparam'}\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\n    def xhtml_begin(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLlatexEnv",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLlatexEnv(QMLobject):\n    tag = \"texenv\"\n    display_name = \"Latex Environment\"\n    sort_order = 910\n    has_text = False\n    has_children = True\n    valid_children = DEFAULT_BLOCKS + PARAGRAPH_LIKE_BLOCKS + \\\n                    ('title', 'section', 'part', 'subquestion', 'pagebreak', 'vspace', 'box', 'subanswer', 'subanswercontinuation')\n    default_attributes = {'name': 'centering'}\n    def tex_begin(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLtable",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLtable(QMLobject):\n    tag = \"table\"\n    default_heading = 'Table'\n    sort_order = 400\n    has_text = False\n    has_children = True\n    valid_children = ('row', 'tablecaption')\n    default_attributes = {\n        #~ 'width': '',\n        'columns': '|l|c|',",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLtableRow",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLtableRow(QMLobject):\n    tag = \"row\"\n    default_heading = 'Row'\n    sort_order = 401\n    has_text = False\n    has_children = True\n    valid_children = ('cell', 'texfield')\n    default_attributes = {'bottom_line': '1', 'multiplier': '1'}\n    def make_tex(self):\n        multiplier = int(self.attributes.get('multiplier', 1))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLtableCell",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLtableCell(QMLobject):\n    tag = \"cell\"\n    sort_order = 402\n    has_text = True\n    has_children = False\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\n    def xhtml_begin(self):\n        return u'<td>'\n    def xhtml_end(self):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLtableCaption",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLtableCaption(QMLobject):\n    tag = \"tablecaption\"\n    default_heading = \"Table Caption\"\n    sort_order = 410\n    has_text = True\n    has_children = False\n    def form_element(self):\n        return forms.CharField(widget=forms.Textarea)\n    def tex_begin(self):\n        return u'\\\\begin{center}\\n'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLpageBreak",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLpageBreak(QMLobject):\n    tag = \"pagebreak\"\n    sort_order = 140\n    has_text = False\n    has_children = False\n    def make_tex(self):\n        if bool(self.attributes.get('skip', False)):\n            return u'\\n', []\n        return r'~ \\clearpage' + u'\\n', []\nclass QMLvspace(QMLobject):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLvspace",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLvspace(QMLobject):\n    tag = \"vspace\"\n    default_heading = \"Vertical space\"\n    sort_order = 141\n    has_text = False\n    has_children = False\n    DEFAULT_AMOUNT = 10\n    default_attributes = {'amount': '{}'.format(DEFAULT_AMOUNT)}\n    def get_amount(self):\n        try:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "QMLException",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "class QMLException(Exception):\n    pass",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "make_content",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def make_content(root):\n    assert root.tag == 'question'\n    ret = []\n    for node in root.children:\n        ret.append(make_content_node(node))\n    return ret\ndef make_content_node(node):\n    \"\"\"\n    Recursively contruct a list of node descriptors for the template containing\n    the text of root and the form elements for the translated language.",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "make_content_node",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def make_content_node(node):\n    \"\"\"\n    Recursively contruct a list of node descriptors for the template containing\n    the text of root and the form elements for the translated language.\n    The descriptor looks like:\n    {\n        'heading'   : str or None\n        'style'     : list of css classes\n        'id'        : object id\n        'type       : object type (aka the tag)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "make_qml",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def make_qml(node):\n    q = QMLquestion(node.text)\n    attr_change = {}\n    if hasattr(node, 'attributechange'):\n        attr_change = json.loads(node.attributechange.content)\n    q.update_attrs(attr_change)\n    return q\ndef xml2string(xml):\n    s = ET.tostring(xml, encoding='unicode')\n    #s, errors = tidylib.tidy_fragment(s, options=TIDYOPTIONS)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "xml2string",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def xml2string(xml):\n    s = ET.tostring(xml, encoding='unicode')\n    #s, errors = tidylib.tidy_fragment(s, options=TIDYOPTIONS)\n    return s\ndef content2string(node):\n    parts = ([node.text] + [ET.tostring(c, encoding='unicode') for c in node])\n    # We assume that `node` is a pure QML tag, therefore we don't consider the tail.\n    # +[node.tail])\n    # filter removes possible Nones in texts and tails\n    return ''.join([_f for _f in parts if _f])",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "content2string",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def content2string(node):\n    parts = ([node.text] + [ET.tostring(c, encoding='unicode') for c in node])\n    # We assume that `node` is a pure QML tag, therefore we don't consider the tail.\n    # +[node.tail])\n    # filter removes possible Nones in texts and tails\n    return ''.join([_f for _f in parts if _f])\ndef normalize_html(data):\n    data = str(data).replace('<p>&nbsp;</p>', '__EMPTYPP__').replace('<p>&#160;</p>', '__EMPTYPP__').replace(\n        u'<p>{}</p>'.format(chr(160)), '__EMPTYPP__'\n    ).replace('&nbsp;', ' ').replace('&#160;', ' ').replace(chr(160), u' ').replace('__EMPTYPP__', '<p>&nbsp;</p>')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "normalize_html",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def normalize_html(data):\n    data = str(data).replace('<p>&nbsp;</p>', '__EMPTYPP__').replace('<p>&#160;</p>', '__EMPTYPP__').replace(\n        u'<p>{}</p>'.format(chr(160)), '__EMPTYPP__'\n    ).replace('&nbsp;', ' ').replace('&#160;', ' ').replace(chr(160), u' ').replace('__EMPTYPP__', '<p>&nbsp;</p>')\n    xhtmlout = BeautifulSoup(data, \"html5lib\")\n    try:\n        return ''.join([str(el) for el in xhtmlout.body.contents])\n    except:\n        return str(xhtmlout)\nmathtex_pattern = re.compile(r'<span class=\"math-tex\">\\\\\\((([^<]|<[^/])+)\\\\\\)</span>')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "escape_equations",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def escape_equations(txt):\n    return mathtex_pattern.sub(lambda m: r'<span class=\"math-tex\">\\({}\\)</span>'.format(escape(m.group(1))), txt)\ndef data2tex(data):\n    cont_html = BeautifulSoup(data, \"html5lib\")\n    return tex.html2tex_bs4(cont_html.body)\ndef data2xhtml(data):\n    return normalize_html(data)\ndef question_points(root):\n    ## This function is not too generic, but it should fit our needs\n    ret = []",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "data2tex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def data2tex(data):\n    cont_html = BeautifulSoup(data, \"html5lib\")\n    return tex.html2tex_bs4(cont_html.body)\ndef data2xhtml(data):\n    return normalize_html(data)\ndef question_points(root):\n    ## This function is not too generic, but it should fit our needs\n    ret = []\n    for obj in root.children:\n        if isinstance(obj, (QMLsubquestion, QMLsubanswer)):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "data2xhtml",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def data2xhtml(data):\n    return normalize_html(data)\ndef question_points(root):\n    ## This function is not too generic, but it should fit our needs\n    ret = []\n    for obj in root.children:\n        if isinstance(obj, (QMLsubquestion, QMLsubanswer)):\n            #TWOPLACES = Decimal(10) ** -2\n            points = Decimal(obj.attributes.get('points', 0.))  #.quantize(TWOPLACES)\n            name = '{}.{}'.format(obj.attributes.get('part_nr', ''), obj.attributes.get('question_nr', ''))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "question_points",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def question_points(root):\n    ## This function is not too generic, but it should fit our needs\n    ret = []\n    for obj in root.children:\n        if isinstance(obj, (QMLsubquestion, QMLsubanswer)):\n            #TWOPLACES = Decimal(10) ** -2\n            points = Decimal(obj.attributes.get('points', 0.))  #.quantize(TWOPLACES)\n            name = '{}.{}'.format(obj.attributes.get('part_nr', ''), obj.attributes.get('question_nr', ''))\n            ret.append((name, points))\n        child_points = question_points(obj)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "all_subclasses",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def all_subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in all_subclasses(s)]\nclass _classproperty(object):\n    def __init__(self, fget):\n        self.fget = fget\n    def __get__(self, owner_self, owner_cls):\n        return self.fget(owner_cls)\ndef escape_percents(tex_code):\n    parts = tex_code.split('%')\n    parts_it = iter(parts)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "escape_percents",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "def escape_percents(tex_code):\n    parts = tex_code.split('%')\n    parts_it = iter(parts)\n    next(parts_it)\n    for i, (part, part_it) in enumerate(zip(parts, parts_it)):\n        if part.endswith('\\\\vspace{') and part_it.startswith('iem}'):\n            continue\n        if not (len(part) - len(part.rstrip('\\\\'))) % 2:\n            parts[i] += '\\\\'\n    return '%'.join(parts)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "html_diff.config.cuttable_words_mode",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "html_diff.config.cuttable_words_mode = html_diff.Config.CuttableWordsMode.UNCUTTABLE_PRECISE\n#block groups\nPARAGRAPH_LIKE_BLOCKS = ('paragraph', 'list', 'enumerate', 'table', 'equation', 'equation_unnumbered', 'figure', 'box')\nDEFAULT_BLOCKS = ('texfield', 'texenv')\nTIDYOPTIONS={\n\"indent\": \"auto\",\n\"indent-spaces\": 2,\n\"wrap\": 0,\n\"drop-empty-paras\": False,\n\"join-styles\": False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "PARAGRAPH_LIKE_BLOCKS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "PARAGRAPH_LIKE_BLOCKS = ('paragraph', 'list', 'enumerate', 'table', 'equation', 'equation_unnumbered', 'figure', 'box')\nDEFAULT_BLOCKS = ('texfield', 'texenv')\nTIDYOPTIONS={\n\"indent\": \"auto\",\n\"indent-spaces\": 2,\n\"wrap\": 0,\n\"drop-empty-paras\": False,\n\"join-styles\": False,\n\"literal-attributes\": False,\n\"lower-literals\": False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BLOCKS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "DEFAULT_BLOCKS = ('texfield', 'texenv')\nTIDYOPTIONS={\n\"indent\": \"auto\",\n\"indent-spaces\": 2,\n\"wrap\": 0,\n\"drop-empty-paras\": False,\n\"join-styles\": False,\n\"literal-attributes\": False,\n\"lower-literals\": False,\n\"merge-divs\": \"no\",",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "mathtex_pattern",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "mathtex_pattern = re.compile(r'<span class=\"math-tex\">\\\\\\((([^<]|<[^/])+)\\\\\\)</span>')\ndef escape_equations(txt):\n    return mathtex_pattern.sub(lambda m: r'<span class=\"math-tex\">\\({}\\)</span>'.format(escape(m.group(1))), txt)\ndef data2tex(data):\n    cont_html = BeautifulSoup(data, \"html5lib\")\n    return tex.html2tex_bs4(cont_html.body)\ndef data2xhtml(data):\n    return normalize_html(data)\ndef question_points(root):\n    ## This function is not too generic, but it should fit our needs",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "qml_objects",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qml",
        "description": "src.components.Exam.exam_tools.ipho_exam.qml",
        "peekOfCode": "qml_objects = None\n# TODO: find better way for this. it seems that Django provides a ContentType module that could be useful.\ndef all_subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in all_subclasses(s)]\nclass _classproperty(object):\n    def __init__(self, fget):\n        self.fget = fget\n    def __get__(self, owner_self, owner_cls):\n        return self.fget(owner_cls)\ndef escape_percents(tex_code):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qml",
        "documentation": {}
    },
    {
        "label": "Qwrapper",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "description": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "peekOfCode": "class Qwrapper(object):\n    pass\ndef latest_version(question_id, lang_id):\n    q = Qwrapper()\n    q.question = get_object_or_404(Question, id=question_id)\n    q.lang = get_object_or_404(Language, id=lang_id)\n    if q.lang.is_pdf:\n        q.node = get_object_or_404(PDFNode, question=q.question, language=q.lang)\n        return q\n    if q.lang.versioned:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "documentation": {}
    },
    {
        "label": "latest_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "description": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "peekOfCode": "def latest_version(question_id, lang_id):\n    q = Qwrapper()\n    q.question = get_object_or_404(Question, id=question_id)\n    q.lang = get_object_or_404(Language, id=lang_id)\n    if q.lang.is_pdf:\n        q.node = get_object_or_404(PDFNode, question=q.question, language=q.lang)\n        return q\n    if q.lang.versioned:\n        q.node = VersionNode.objects.filter(question=q.question, language=q.lang, status='C').order_by('-version')[0]\n    else:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "documentation": {}
    },
    {
        "label": "get_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "description": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "peekOfCode": "def get_version(question_id, lang_id, version_num):\n    q = Qwrapper()\n    q.question = get_object_or_404(Question, id=question_id)\n    q.lang = get_object_or_404(Language, id=lang_id)\n    q.node = get_object_or_404(VersionNode, question=q.question, language=q.lang, version=version_num)\n    q.qml = qml.make_qml(q.node) if '<question' in q.node.text else qml.QMLquestion('<question id=\"q0\" />')\n    return q",
        "detail": "src.components.Exam.exam_tools.ipho_exam.qquery",
        "documentation": {}
    },
    {
        "label": "compile_stud_exam_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "peekOfCode": "def compile_stud_exam_question(questions, student_languages, cover=None, commit=False):\n    all_tasks = []\n    if cover is not None:\n        body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n        compile_task = tasks.compile_tex.s(body, [])\n        q = questions[0]\n        s = student_languages[0].student\n        bgenerator = iphocode.QuestionBarcodeGen(q.exam, q, s, qcode='C', suppress_code=True)\n        barcode_task = tasks.add_barcode.s(bgenerator)\n        all_tasks.append(celery.chain(compile_task, barcode_task))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "documentation": {}
    },
    {
        "label": "generate_extra_sheets",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "peekOfCode": "def generate_extra_sheets(student, question, startnum, npages, template_name='exam_blank.tex'):\n    context = {\n        'polyglossia': 'english',\n        'polyglossia_options': '',\n        'font': fonts.ipho['notosans'],\n        'exam_name': u'{}'.format(question.exam.name),\n        'code': u'{}{}'.format('Z', question.position),\n        'pages': list(range(npages)),\n        'startnum': startnum + 1,\n    }",
        "detail": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_stud_exam_question(questions, student_languages, cover=None, commit=False):\n    all_tasks = []\n    if cover is not None:\n        body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n        compile_task = tasks.compile_tex.s(body, [])\n        q = questions[0]\n        s = student_languages[0].student",
        "detail": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_stud_exam_question(questions, student_languages, cover=None, commit=False):\n    all_tasks = []\n    if cover is not None:\n        body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n        compile_task = tasks.compile_tex.s(body, [])\n        q = questions[0]\n        s = student_languages[0].student\n        bgenerator = iphocode.QuestionBarcodeGen(q.exam, q, s, qcode='C', suppress_code=True)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "description": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_stud_exam_question(questions, student_languages, cover=None, commit=False):\n    all_tasks = []\n    if cover is not None:\n        body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n        compile_task = tasks.compile_tex.s(body, [])\n        q = questions[0]\n        s = student_languages[0].student\n        bgenerator = iphocode.QuestionBarcodeGen(q.exam, q, s, qcode='C', suppress_code=True)\n        barcode_task = tasks.add_barcode.s(bgenerator)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.question_utils",
        "documentation": {}
    },
    {
        "label": "render_odt_response",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.response",
        "description": "src.components.Exam.exam_tools.ipho_exam.response",
        "peekOfCode": "def render_odt_response(tpl_name, context, filename, ext_resources):\n    origin = os.path.join(TEMPLATE_PATH, tpl_name)\n    contextdict = {}\n    for d in context:\n        contextdict.update(**d)\n    result = None\n    output = None\n    try:\n        tmp = mkdtemp(prefix=TEMP_PREFIX)\n        for res in ext_resources:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.response",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.response",
        "description": "src.components.Exam.exam_tools.ipho_exam.response",
        "peekOfCode": "TEMPLATE_PATH = getattr(settings, 'TEMPLATE_PATH')\nTEMP_PREFIX = getattr(settings, 'ODT_TEMP_PREFIX', 'render_odt-')\nlogger = logging.getLogger('ipho_exam')\ndef render_odt_response(tpl_name, context, filename, ext_resources):\n    origin = os.path.join(TEMPLATE_PATH, tpl_name)\n    contextdict = {}\n    for d in context:\n        contextdict.update(**d)\n    result = None\n    output = None",
        "detail": "src.components.Exam.exam_tools.ipho_exam.response",
        "documentation": {}
    },
    {
        "label": "TEMP_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.response",
        "description": "src.components.Exam.exam_tools.ipho_exam.response",
        "peekOfCode": "TEMP_PREFIX = getattr(settings, 'ODT_TEMP_PREFIX', 'render_odt-')\nlogger = logging.getLogger('ipho_exam')\ndef render_odt_response(tpl_name, context, filename, ext_resources):\n    origin = os.path.join(TEMPLATE_PATH, tpl_name)\n    contextdict = {}\n    for d in context:\n        contextdict.update(**d)\n    result = None\n    output = None\n    try:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.response",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.response",
        "description": "src.components.Exam.exam_tools.ipho_exam.response",
        "peekOfCode": "logger = logging.getLogger('ipho_exam')\ndef render_odt_response(tpl_name, context, filename, ext_resources):\n    origin = os.path.join(TEMPLATE_PATH, tpl_name)\n    contextdict = {}\n    for d in context:\n        contextdict.update(**d)\n    result = None\n    output = None\n    try:\n        tmp = mkdtemp(prefix=TEMP_PREFIX)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.response",
        "documentation": {}
    },
    {
        "label": "DocumentSerializer",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.serializers",
        "description": "src.components.Exam.exam_tools.ipho_exam.serializers",
        "peekOfCode": "class DocumentSerializer(serializers.ModelSerializer):\n    student = serializers.SlugRelatedField(slug_field='code', read_only=True)\n    exam = serializers.SlugRelatedField(slug_field='name', read_only=True)\n    class Meta(object):\n        model = Document\n        fields = '__all__'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.serializers",
        "documentation": {}
    },
    {
        "label": "all_same",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def all_same(items):\n    return all(x == items[0] for x in items)\n## tasks\n@shared_task\ndef compile_tex(body, ext_resources, filename='question.pdf', etag=None):\n    if etag is None:\n        etag = md5(body.encode('utf8')).hexdigest()\n    doc_pdf = pdf.compile_tex(body, ext_resources)\n    meta = {\n        'etag': etag,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "compile_tex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def compile_tex(body, ext_resources, filename='question.pdf', etag=None):\n    if etag is None:\n        etag = md5(body.encode('utf8')).hexdigest()\n    doc_pdf = pdf.compile_tex(body, ext_resources)\n    meta = {\n        'etag': etag,\n        'filename': filename,\n        'num_pages': pdf.get_num_pages(doc_pdf),\n        'barcode_num_pages': 0,\n        'barcode_base': None,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "compile_tex_diff",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def compile_tex_diff(old_body, new_body, ext_resources, filename='question.pdf', etag=None):\n    if etag is None:\n        etag = md5((old_body + new_body).encode('utf8')).hexdigest()\n    doc_pdf = pdf.compile_tex_diff(old_body, new_body, ext_resources)\n    meta = {\n        'etag': etag,\n        'filename': filename,\n        'num_pages': pdf.get_num_pages(doc_pdf),\n        'barcode_num_pages': 0,\n        'barcode_base': None,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "serve_pdfnode",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def serve_pdfnode(question_pdf, filename='question.pdf'):\n    etag = md5(question_pdf).hexdigest()\n    meta = {\n        'etag': etag,\n        'filename': filename,\n        'num_pages': pdf.get_num_pages(question_pdf),\n        'barcode_num_pages': 0,\n        'barcode_base': None,\n    }\n    return question_pdf, meta",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "add_barcode",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def add_barcode(compiled_pdf, bgenerator):\n    question_pdf, meta = compiled_pdf\n    doc_pdf = pdf.add_barcode(question_pdf, bgenerator)\n    meta['barcode_num_pages'] = meta['num_pages']\n    meta['barcode_base'] = bgenerator.base\n    return doc_pdf, meta\n@shared_task\ndef concatenate_documents(all_pages, filename='exam.pdf'):\n    doc_pdf = pdf.concatenate_documents([question_pdf for question_pdf, _ in all_pages])\n    meta = {}",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "concatenate_documents",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def concatenate_documents(all_pages, filename='exam.pdf'):\n    doc_pdf = pdf.concatenate_documents([question_pdf for question_pdf, _ in all_pages])\n    meta = {}\n    meta['filename'] = filename\n    meta['etag'] = md5((''.join([meta['etag'] for _, meta in all_pages])).encode('utf8')).hexdigest()\n    meta['num_pages'] = sum([meta['num_pages'] for _, meta in all_pages])\n    meta['barcode_num_pages'] = sum([meta['barcode_num_pages'] for _, meta in all_pages])\n    all_codes = [meta['barcode_base'] for _, meta in all_pages if meta['barcode_base'] is not None]\n    if all_same(all_codes):\n        meta['barcode_base'] = all_codes[0] if len(all_codes) > 0 else ''",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "wait_and_concatenate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def wait_and_concatenate(self, all_tasks, filename='exam.pdf'):\n    for t in all_tasks:\n        if not t.ready():\n            self.retry(countdown=1)\n        elif t.failed():\n            raise t.result\n    all_pages = [t.result for t in all_tasks]\n    doc_pdf = pdf.concatenate_documents([question_pdf for question_pdf, _ in all_pages])\n    meta = {}\n    meta['filename'] = filename",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "commit_compiled_exam",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def commit_compiled_exam(self, compile_job):\n    if len(compile_job) == 1 and len(compile_job[0]) == 3:\n        compile_job = compile_job[0]\n    doc_pdf, meta = compile_job\n    try:\n        doc_task = models.DocumentTask.objects.get(task_id=self.request.id)\n        doc = doc_task.document\n        contentfile = ContentFile(doc_pdf)\n        contentfile.name = meta['filename']\n        doc.file = contentfile",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "identity_args",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def identity_args(self, prev_task):\n    return prev_task\n@shared_task(bind=True)\ndef student_exam_document(self, questions, student_languages, cover=None, commit=False):\n    job_task = self.request.id if commit else None\n    return compile_utils.student_exam_document(questions, student_languages, cover, job_task=job_task)\n@shared_task(bind=True)\ndef cleanup_meta(self):\n    from djcelery.models import TaskMeta\n    TaskMeta.objects.filter(date_done__lte=timezone.now() - timezone.timedelta(minutes=25)).delete()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "student_exam_document",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def student_exam_document(self, questions, student_languages, cover=None, commit=False):\n    job_task = self.request.id if commit else None\n    return compile_utils.student_exam_document(questions, student_languages, cover, job_task=job_task)\n@shared_task(bind=True)\ndef cleanup_meta(self):\n    from djcelery.models import TaskMeta\n    TaskMeta.objects.filter(date_done__lte=timezone.now() - timezone.timedelta(minutes=25)).delete()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "cleanup_meta",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "description": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "peekOfCode": "def cleanup_meta(self):\n    from djcelery.models import TaskMeta\n    TaskMeta.objects.filter(date_done__lte=timezone.now() - timezone.timedelta(minutes=25)).delete()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tasks",
        "documentation": {}
    },
    {
        "label": "FigureExport",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "class FigureExport(object):\n    def __init__(self, figname, figid, query, lang=None):\n        self.figname = figname\n        self.figid = figid\n        self.query = query\n        self.lang = lang\n    def save(self, dirname):\n        fig = Figure.objects.get(fig_id=self.figid)\n        fig.to_file(fig_name='%s/%s' % (dirname, self.figname), query=self.query, lang=self.lang)\nclass StaticExport(object):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "StaticExport",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "class StaticExport(object):\n    def __init__(self, origin):\n        self.origin = origin\n    def save(self, dirname):\n        src = os.path.join(TEMPLATE_PATH, self.origin)\n        dst = os.path.join(dirname, os.path.basename(src))\n        if os.path.isdir(src):\n            shutil.copytree(src, dst)\n        else:\n            shutil.copy2(src, dst)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "TemplateExport",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "class TemplateExport(object):\n    def __init__(self, origin):\n        self.origin = origin\n    def save(self, dirname):\n        src = os.path.join(TEMPLATE_PATH, self.origin)\n        dst = os.path.join(dirname, os.path.basename(src))\n        with open(dst, 'w') as fp:\n            STATIC_PATH = getattr(settings, 'STATIC_PATH')\n            fp.write(render_to_string(src, {'STATIC_PATH': STATIC_PATH}))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "fix_tex_parens",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "def fix_tex_parens(s, add_warning_comment=False):\n    if type(s) is not str:\n        return s\n    count = 0\n    out_s = ''\n    fix_required = False\n    for e in s:\n        if e == \"{\":\n            count += 1\n        elif e == \"}\":",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "html2tex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "def html2tex(el):\n    result = []\n    if el.text:\n        result.append(fix_tex_parens(el.text, add_warning_comment=True))\n    for sel in el:\n        ## Span styling\n        if sel.tag in [\"span\"]:\n            for att in list(sel.attrib.keys()):\n                if att == 'style':\n                    if 'font-style:italic' in sel.attrib[att]:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "html2tex_bs4",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "def html2tex_bs4(el):\n    result = []\n    if isinstance(el, NavigableString):\n        return fix_tex_parens(str(el), add_warning_comment=True)\n    for sel in el.children:\n        if isinstance(sel, NavigableString):\n            result.append(fix_tex_parens(str(sel), add_warning_comment=True))\n        ## Span styling\n        elif sel.name in [\"span\"]:\n            for att in list(sel.attrs.keys()):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "TEMP_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "TEMP_PREFIX = getattr(settings, 'TEX_TEMP_PREFIX', 'render_tex-')\nCACHE_PREFIX = getattr(settings, 'TEX_CACHE_PREFIX', 'render-tex')\nCACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 60)  # 1 min\ndef fix_tex_parens(s, add_warning_comment=False):\n    if type(s) is not str:\n        return s\n    count = 0\n    out_s = ''\n    fix_required = False\n    for e in s:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "CACHE_PREFIX = getattr(settings, 'TEX_CACHE_PREFIX', 'render-tex')\nCACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 60)  # 1 min\ndef fix_tex_parens(s, add_warning_comment=False):\n    if type(s) is not str:\n        return s\n    count = 0\n    out_s = ''\n    fix_required = False\n    for e in s:\n        if e == \"{\":",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.tex",
        "description": "src.components.Exam.exam_tools.ipho_exam.tex",
        "peekOfCode": "CACHE_TIMEOUT = getattr(settings, 'TEX_CACHE_TIMEOUT', 60)  # 1 min\ndef fix_tex_parens(s, add_warning_comment=False):\n    if type(s) is not str:\n        return s\n    count = 0\n    out_s = ''\n    fix_required = False\n    for e in s:\n        if e == \"{\":\n            count += 1",
        "detail": "src.components.Exam.exam_tools.ipho_exam.tex",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls",
        "peekOfCode": "app_name = 'exam'\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n    url(r'^wizard$', views.wizard, name='wizard'),\n    url(r'^main$', views.main, name='main'),\n    url(r'^translation/list/?$', views.translations_list, name='list'),\n    url(r'^translation/add/(?P<exam_id>\\d+)$', views.add_translation, name='add-translation'),\n    url(\n        r'^translation/upload/question/(?P<question_id>\\d+)/lang/(?P<lang_id>\\d+)$',\n        views.add_pdf_node,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls",
        "peekOfCode": "urlpatterns = [\n    url(r'^$', views.index, name='index'),\n    url(r'^wizard$', views.wizard, name='wizard'),\n    url(r'^main$', views.main, name='main'),\n    url(r'^translation/list/?$', views.translations_list, name='list'),\n    url(r'^translation/add/(?P<exam_id>\\d+)$', views.add_translation, name='add-translation'),\n    url(\n        r'^translation/upload/question/(?P<question_id>\\d+)/lang/(?P<lang_id>\\d+)$',\n        views.add_pdf_node,\n        name='upload-translation'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'documents', views_api.DocumentViewSet)\napp_name = 'api-exam'\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^schema', views_api.SwaggerSchemaView.as_view(), name='schema'),\n    # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "peekOfCode": "app_name = 'api-exam'\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^schema', views_api.SwaggerSchemaView.as_view(), name='schema'),\n    # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "peekOfCode": "urlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^schema', views_api.SwaggerSchemaView.as_view(), name='schema'),\n    # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls_api",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "peekOfCode": "app_name = 'test'\nurlpatterns = [\n    url(r'^$', views_test.index),\n    url(r'^view$', views_test.view, name='view'),\n    url(r'^edit$', views_test.edit, name='edit'),\n    url(r'^inline$', views_test.inline_edit, name='inline'),\n    url(r'^mathquill$', views_test.mathquill, name='mathquill'),\n    url(r'^mathquill_toolbar$', views_test.mathquill_toolbar, name='mathquill_toolbar'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "peekOfCode": "urlpatterns = [\n    url(r'^$', views_test.index),\n    url(r'^view$', views_test.view, name='view'),\n    url(r'^edit$', views_test.edit, name='edit'),\n    url(r'^inline$', views_test.inline_edit, name='inline'),\n    url(r'^mathquill$', views_test.mathquill, name='mathquill'),\n    url(r'^mathquill_toolbar$', views_test.mathquill_toolbar, name='mathquill_toolbar'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.urls_test",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie\ndef main(request):\n    success = None\n    delegation = Delegation.objects.filter(members=request.user)\n    own_lang = None\n    other_lang = None\n    if delegation.count() > 0:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def main(request):\n    success = None\n    delegation = Delegation.objects.filter(members=request.user)\n    own_lang = None\n    other_lang = None\n    if delegation.count() > 0:\n        own_lang = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')\n        other_lang = Language.objects.filter(hidden=False).exclude(delegation=delegation).order_by('name')\n    else:\n        other_lang = Language.objects.filter(hidden=False).order_by('name')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "time_response",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def time_response(request):\n    return HttpResponse(timezone.now().isoformat(), content_type=\"text/plain\")\n@permission_required('ipho_core.is_delegation')\ndef wizard(request):\n    delegation = Delegation.objects.filter(members=request.user)\n    own_languages = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')\n    ## Exam section\n    exam_list = Exam.objects.filter(hidden=False, active=True)\n    open_submissions = ExamAction.objects.filter(\n        exam__in=exam_list, exam__active=True, delegation=delegation, action=ExamAction.TRANSLATION, status=ExamAction.OPEN",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "wizard",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def wizard(request):\n    delegation = Delegation.objects.filter(members=request.user)\n    own_languages = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')\n    ## Exam section\n    exam_list = Exam.objects.filter(hidden=False, active=True)\n    open_submissions = ExamAction.objects.filter(\n        exam__in=exam_list, exam__active=True, delegation=delegation, action=ExamAction.TRANSLATION, status=ExamAction.OPEN\n    )\n    closed_submissions = ExamAction.objects.filter(\n        exam__in=exam_list, delegation=delegation, action=ExamAction.TRANSLATION, status=ExamAction.SUBMITTED",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "translations_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def translations_list(request):\n    delegation = Delegation.objects.filter(members=request.user)\n    # if request.is_ajax and 'exam_id' in request.GET:\n    if 'exam_id' in request.GET:\n        exam = get_object_or_404(Exam, id=request.GET['exam_id'])\n        in_progress = ExamAction.is_in_progress(ExamAction.TRANSLATION, exam=exam, delegation=delegation)\n        trans_list = TranslationNode.objects.filter(\n            question__exam=exam, language__delegation=delegation\n        ).order_by('language', 'question')\n        pdf_list = PDFNode.objects.filter(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "list_all_translations",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def list_all_translations(request):\n    exams = Exam.objects.filter(hidden=False, active=True)\n    delegations = Delegation.objects.all()\n    def get_or_none(model, *args, **kwargs):\n        try:\n            return model.objects.get(*args, **kwargs)\n        except model.DoesNotExist:\n            return None\n    filter_ex = exams\n    exam = get_or_none(Exam, id=request.GET.get('ex', None))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "add_translation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def add_translation(request, exam_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delegation = Delegation.objects.get(members=request.user)\n    exam = get_object_or_404(Exam, id=exam_id)\n    should_forbid = ExamAction.require_in_progress(ExamAction.TRANSLATION, exam=exam, delegation=delegation)\n    if should_forbid is not None:\n        return should_forbid\n    en_answer = getattr(settings, 'ONLY_OFFICIAL_ANSWER_SHEETS', False)\n    if en_answer:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "add_pdf_node",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def add_pdf_node(request, question_id, lang_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delegation = Delegation.objects.get(members=request.user)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if not lang.check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to edit this language.')\n    should_forbid = ExamAction.require_in_progress(ExamAction.TRANSLATION, exam=question.exam, delegation=delegation)\n    if should_forbid is not None:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "translation_export",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def translation_export(request, question_id, lang_id, version_num=None):\n    \"\"\" Translation export, both for normal editor and admin editor \"\"\"\n    if version_num is None:\n        trans = qquery.latest_version(question_id, lang_id)\n    else:\n        trans = qquery.get_version(question_id, lang_id, version_num)\n    content = qml.xml2string(trans.qml.make_xml())\n    #content = qml.unescape_entities(content)  # original: remove escapes here - not safe!\n    res = HttpResponse(content, content_type=\"application/ipho+qml+xml\")\n    res['content-disposition'] = 'attachment; filename=\"{}\"'.format(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "translation_import",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def translation_import(request, question_id, lang_id):\n    \"\"\" Translation import (only for delegations) \"\"\"\n    delegation = Delegation.objects.filter(members=request.user)\n    language = get_object_or_404(Language, id=lang_id)\n    question = get_object_or_404(Question, id=question_id)\n    if not language.check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to edit this language.')\n    should_forbid = ExamAction.require_in_progress(ExamAction.TRANSLATION, exam=question.exam, delegation=delegation)\n    if should_forbid is not None:\n        return should_forbid",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "translation_import_confirm",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def translation_import_confirm(request, slug):\n    trans_import = get_object_or_404(TranslationImportTmp, slug=slug)\n    trans = qquery.latest_version(trans_import.question.pk, trans_import.language.pk)\n    if request.POST:\n        trans.node.text = trans_import.content\n        trans.node.save()\n        trans_import.delete()\n        return JsonResponse({\n            'success':\n            True,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "list_language",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def list_language(request):\n    delegation = Delegation.objects.filter(members=request.user)\n    languages = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')\n    # TODO: do not show Add language if no delegation\n    return render(request, 'ipho_exam/languages.html', {'languages': languages})\n@permission_required('ipho_core.is_delegation')\ndef add_language(request):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delegation = Delegation.objects.get(members=request.user)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "add_language",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def add_language(request):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delegation = Delegation.objects.get(members=request.user)\n    ## Language section\n    language_form = LanguageForm(request.POST or None, user_delegation=delegation)\n    if language_form.is_valid():\n        lang = language_form.instance.delegation = delegation\n        lang = language_form.save()\n        languages = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "edit_language",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def edit_language(request, lang_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delegation = Delegation.objects.get(members=request.user)\n    instance = get_object_or_404(Language, pk=lang_id)\n    language_form = LanguageForm(request.POST or None, instance=instance, user_delegation=delegation)\n    if language_form.is_valid():\n        lang = language_form.save()\n        languages = Language.objects.filter(hidden=False, delegation=delegation).order_by('name')\n        return JsonResponse({",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "exam_view",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def exam_view(request, exam_id=None, question_id=None, orig_id=OFFICIAL_LANGUAGE):\n    context = {\n        'exam_id': exam_id,\n        'question_id': question_id,\n        'orig_id': orig_id,\n    }\n    exam = None\n    question = None\n    question_langs = None\n    own_lang = None",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedback_partial",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedback_partial(request, exam_id, question_id, qml_id='', orig_id=OFFICIAL_LANGUAGE):\n    delegation = Delegation.objects.filter(members=request.user)\n    delegations = Delegation.objects.all()\n    if exam_id is not None:\n        exam = get_object_or_404(Exam, id=exam_id, hidden=False, active=True, hide_feedback=False)\n    if question_id is not None:\n        question = get_object_or_404(Question, id=question_id, exam=exam)\n    ctxt = {}\n    if not request.user.has_perm('ipho_core.is_staff') and request.user.has_perm('ipho_core.is_delegation'):\n        form = FeedbackForm(request.POST or None)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedback_partial_like",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedback_partial_like(request, status, feedback_id):\n    feedback = get_object_or_404(Feedback, pk=feedback_id, question__feedback_active=True)\n    delegation = Delegation.objects.get(members=request.user)\n    Like.objects.get_or_create(feedback=feedback, delegation=delegation, defaults={'status': status})\n    return JsonResponse({'success': True,})\n@login_required\ndef feedback_numbers(request, exam_id, question_id):\n    if exam_id is not None:\n                # # TODO: set correct flags\n        exam = get_object_or_404(Exam, id=exam_id, hidden=False, active=True)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedback_numbers",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedback_numbers(request, exam_id, question_id):\n    if exam_id is not None:\n                # # TODO: set correct flags\n        exam = get_object_or_404(Exam, id=exam_id, hidden=False, active=True)\n    if question_id is not None:\n        question = get_object_or_404(Question, id=question_id, exam=exam)\n    feedbacks = Feedback.objects.filter(question=question).all()\n    numbers = {}\n    for f in feedbacks:\n        if f.qml_id in numbers:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedbacks_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedbacks_list(request, exam_id=None):\n    exam = None\n    if exam_id is not None:\n        exam = get_object_or_404(Exam, id=exam_id, hidden=False, hide_feedback=False)\n    exam_list = Exam.objects.filter(hidden=False, active=True, hide_feedback=False)\n    exam_filter_list = [exam,]\n    if not exam in exam_list:\n        exam = None\n        exam_filter_list = exam_list\n    delegation = Delegation.objects.filter(members=request.user)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedbacks_add_comment",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedbacks_add_comment(request, feedback_id=None):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    if feedback_id is not None:\n        feedback = get_object_or_404(Feedback, id=feedback_id)\n    else:\n        raise Exception('No feedback_id')\n    ## Language section\n    form = FeedbackCommentForm(request.POST or None)\n    if form.is_valid():",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedback_like",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedback_like(request, status, feedback_id):\n    feedback = get_object_or_404(Feedback, pk=feedback_id, question__feedback_active=True)\n    delegation = Delegation.objects.get(members=request.user)\n    Like.objects.get_or_create(feedback=feedback, delegation=delegation, defaults={'status': status})\n    return redirect('exam:feedbacks-list')\n@permission_required('ipho_core.is_staff')\ndef feedback_set_status(request, feedback_id, status):\n    fb = get_object_or_404(Feedback, id=feedback_id)\n    fb.status = status\n    fb.save()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedback_set_status",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedback_set_status(request, feedback_id, status):\n    fb = get_object_or_404(Feedback, id=feedback_id)\n    fb.status = status\n    fb.save()\n    return JsonResponse({'success':True})\n@permission_required('ipho_core.is_staff')\ndef feedbacks_export(request):\n    questions = Question.objects.all().order_by('exam', 'position', 'type')\n    return render(request, 'ipho_exam/admin_feedbacks_export.html', {\n        'questions': questions,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedbacks_export",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedbacks_export(request):\n    questions = Question.objects.all().order_by('exam', 'position', 'type')\n    return render(request, 'ipho_exam/admin_feedbacks_export.html', {\n        'questions': questions,\n    })\n@permission_required('ipho_core.is_staff')\ndef feedbacks_export_csv(request, exam_id, question_id):\n    tmp_feedbacks = Feedback.objects.filter(\n        question=question_id,\n    ).annotate(",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "feedbacks_export_csv",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def feedbacks_export_csv(request, exam_id, question_id):\n    tmp_feedbacks = Feedback.objects.filter(\n        question=question_id,\n    ).annotate(\n        num_likes=Sum(Case(When(like__status='L', then=1), output_field=IntegerField())),\n        num_unlikes=Sum(Case(When(like__status='U', then=1), output_field=IntegerField()))\n    ).values_list(\n        'pk', 'question__exam__name', 'question__name', 'qml_id', 'part', 'delegation__name', 'status', 'timestamp', 'comment', 'org_comment',\n        'num_likes', 'num_unlikes'\n    ).order_by('-timestamp')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figure_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def figure_list(request):\n    figure_list = Figure.objects.all()\n    print(figure_list)\n    return render(request, 'ipho_exam/figures.html', {\n        'figure_list': figure_list,\n    })\nimport re\nfigparam_placeholder = re.compile(r'%([\\w-]+)%')\n@permission_required('ipho_core.is_staff')\ndef figure_add(request):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figure_add",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def figure_add(request):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    form = FigureForm(request.POST or None, request.FILES or None)\n    if form.is_valid():\n        obj = form.save(commit=False)\n        ext = os.path.splitext(str(request.FILES['file']))[1]\n        if ext in VALID_COMPILED_FIGURE_EXTENSIONS:\n            obj = CompiledFigure.objects.create(name=obj.name)\n            obj.content = str(request.FILES['file'].read(), 'utf-8')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figure_edit",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def figure_edit(request, fig_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    instance = get_object_or_404(Figure, fig_id=fig_id)\n    if isinstance(instance, RawFigure):\n        compiled = False\n        valid_extensions = VALID_RAW_FIGURE_EXTENSIONS\n    elif isinstance(instance, CompiledFigure):\n        compiled = True\n        valid_extensions = VALID_COMPILED_FIGURE_EXTENSIONS",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figure_delete",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def figure_delete(request, fig_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    obj = get_object_or_404(Figure, fig_id=fig_id)\n    obj.delete()\n    return JsonResponse({\n        'success': True,\n    })\n@login_required\ndef figure_export(request, fig_id, lang_id=None):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figure_export",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def figure_export(request, fig_id, lang_id=None):\n    lang = get_object_or_404(Language, pk=lang_id) if lang_id is not None else None\n    fig = get_object_or_404(Figure, fig_id=fig_id)\n    figure_content, content_type = fig.to_inline(query=request.GET, lang=lang)\n    return HttpResponse(figure_content, content_type=\"image/{}\".format(content_type))\n@permission_required('ipho_core.is_staff')\ndef admin_add_question(request, exam_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    ## Question section",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_add_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_add_question(request, exam_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    ## Question section\n    question_form = ExamQuestionForm(request.POST or None)\n    exam = get_object_or_404(Exam, id=exam_id)\n    if question_form.is_valid():\n        question_form.instance.exam = exam\n        if question_form.cleaned_data.get('type') != Question.ANSWER:\n            question_form.instance.working_pages = 0",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_delete_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_delete_question(request, exam_id, question_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    delete_form = DeleteForm(request.POST or None)\n    delete_message = 'This action <strong>CANNOT</strong> be undone. <strong>All versions and all translations</strong> of this question will be lost.'\n    if delete_form.is_valid():\n        question = get_object_or_404(Question, id=question_id)\n        if question.name == delete_form.cleaned_data.get('verify'):\n            question.delete()\n            return JsonResponse({",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_edit_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_edit_question(request, exam_id, question_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    ## Question section\n    instance = get_object_or_404(Question, pk=question_id)\n    question_form = ExamQuestionForm(request.POST or None, instance=instance)\n    if question_form.is_valid():\n        if question_form.cleaned_data.get('type') != Question.ANSWER:\n            question_form.instance.working_pages = 0\n        question = question_form.save()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_list(request):\n    if request.is_ajax and 'exam_id' in request.GET:\n        exam = get_object_or_404(Exam, id=request.GET['exam_id'])\n        return JsonResponse({\n            'content': render_to_string('ipho_exam/partials/admin_exam_tbody.html', {'exam': exam}),\n        })\n    else:\n        exam_list = Exam.objects.all()\n        return render(request, 'ipho_exam/admin.html', {\n            'exam_list': exam_list,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_new_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_new_version(request, exam_id, question_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        if VersionNode.objects.filter(question=question, language=lang).count() > 0:\n            node = VersionNode.objects.filter(question=question, language=lang).order_by('-version')[0]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_import_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_import_version(request, question_id):\n    \"\"\" Translation import for admin \"\"\"\n    language = get_object_or_404(Language, id=OFFICIAL_LANGUAGE)\n    question = get_object_or_404(Question, id=question_id)\n    form = AdminImportForm(request.POST or None, request.FILES or None)\n    if form.is_valid():\n        txt = request.FILES['file'].read()\n        try:\n            txt = txt.decode('utf8')\n        except AttributeError:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_delete_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_delete_version(request, exam_id, question_id, version_num):\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, status='P', version=version_num)\n    else:\n        raise Exception('Only versioned node can be deleted')\n    delete_form = DeleteForm(request.POST or None)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_accept_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_accept_version(request, exam_id, question_id, version_num, compare_version=None):\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if not VersionNode.objects.filter(question=question, language=lang, status__in=['S', 'C']):\n        node = get_object_or_404(VersionNode, question=question, language=lang, status='P', version=version_num)\n        node.status = 'S'\n        node.save()\n        return HttpResponseRedirect(reverse('exam:admin'))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_publish_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_publish_version(request, exam_id, question_id, version_num):\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    assert lang.versioned\n    node = get_object_or_404(VersionNode, question=question, language=lang, status='S', version=version_num)\n    publish_form = PublishForm(request.POST or None)\n    if publish_form.is_valid():\n        node.status = 'C'",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_settag_version",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_settag_version(request, exam_id, question_id, version_num):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    ## Version section\n    node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n    node_form = VersionNodeForm(request.POST or None, instance=node)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_editor",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_editor(request, exam_id, question_id, version_num):\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n        node_version = node.version\n        if node.status != 'P':\n            raise RuntimeError('Can only edit questions with `Proposal` status.')",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_editor_block",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_editor_block(request, exam_id, question_id, version_num, block_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n        if node.status != 'P':",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_editor_delete_block",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_editor_delete_block(request, exam_id, question_id, version_num, block_id):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n        if node.status != 'P':",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_editor_add_block",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_editor_add_block(request, exam_id, question_id, version_num, block_id, tag_name, after_id=None):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n        node_version = node.version",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_editor_move_block",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_editor_move_block(request, exam_id, question_id, version_num, parent_id, block_id, direction):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    lang_id = OFFICIAL_LANGUAGE\n    exam = get_object_or_404(Exam, id=exam_id)\n    question = get_object_or_404(Question, id=question_id)\n    lang = get_object_or_404(Language, id=lang_id)\n    if lang.versioned:\n        node = get_object_or_404(VersionNode, question=question, language=lang, version=version_num)\n        node_version = node.version",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "submission_exam_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def submission_exam_list(request):\n    delegation = Delegation.objects.filter(members=request.user)\n    exams_open = Exam.objects.filter(\n        hidden=False, active=True\n    ).exclude(\n        delegation_status__in=ExamAction.objects.\n        filter(delegation=delegation, action=ExamAction.TRANSLATION, status=ExamAction.SUBMITTED)\n    ).distinct()\n    exams_closed = Exam.objects.filter(\n        hidden=False,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_submissions_translation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_submissions_translation(request):\n    exams = {}\n    for exam in Exam.objects.filter(active=True):\n        remaining_countries = ExamAction.objects.filter(\n            exam=exam, action=ExamAction.TRANSLATION, status=ExamAction.OPEN\n        ).exclude(delegation=Delegation.objects.get(name=OFFICIAL_DELEGATION)).values_list('delegation__country')\n        remaining_countries = [country[0] + ',' for country in remaining_countries]\n        if remaining_countries:\n            remaining_countries[-1] = remaining_countries[-1][:-1]\n        open_translations = len(remaining_countries)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "print_submissions_translation",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def print_submissions_translation(request):\n    exams = {}\n    for exam in Exam.objects.filter(active=True):\n        remaining_countries = ExamAction.objects.filter(\n            exam=exam, action=ExamAction.TRANSLATION, status=ExamAction.OPEN\n        ).exclude(delegation=Delegation.objects.get(name=OFFICIAL_DELEGATION)).values_list('delegation__country')\n        remaining_countries = [country[0] + ',' for country in remaining_countries]\n        if remaining_countries:\n            remaining_countries[-1] = remaining_countries[-1][:-1]\n        open_translations = len(remaining_countries)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "submission_exam_assign",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def submission_exam_assign(request, exam_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    delegation = Delegation.objects.get(members=request.user)\n    no_answer = getattr(settings, 'NO_ANSWER_SHEETS', False)\n    en_answer = getattr(settings, 'ONLY_OFFICIAL_ANSWER_SHEETS', False)\n    if en_answer:\n        num_questions = exam.question_set.exclude(type=Question.ANSWER).count()\n    else:\n        num_questions = exam.question_set.count()\n    languages = _get_submission_languages(exam, delegation, not en_answer)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "submission_exam_confirm",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def submission_exam_confirm(request, exam_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    num_questions = exam.question_set.count()\n    delegation = Delegation.objects.get(members=request.user)\n    no_answer = getattr(settings, 'NO_ANSWER_SHEETS', False)\n    en_answer = getattr(settings, 'ONLY_OFFICIAL_ANSWER_SHEETS', False)\n    languages = _get_submission_languages(exam, delegation, not en_answer)\n    form_error = ''\n    ex_submission, _ = ExamAction.objects.get_or_create(exam=exam, delegation=delegation, action=ExamAction.TRANSLATION)\n    if ex_submission.status == ExamAction.SUBMITTED and not settings.DEMO_MODE:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "submission_exam_submitted",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def submission_exam_submitted(request, exam_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    delegation = Delegation.objects.get(members=request.user)\n    no_answer = getattr(settings, 'NO_ANSWER_SHEETS', False)\n    en_answer = getattr(settings, 'ONLY_OFFICIAL_ANSWER_SHEETS', False)\n    languages = _get_submission_languages(exam, delegation, not en_answer)\n    ex_submission, _ = ExamAction.objects.get_or_create(exam=exam, delegation=delegation, action=ExamAction.TRANSLATION)\n    assigned_student_language = OrderedDict()\n    for student in delegation.student_set.all():\n        stud_langs = OrderedDict()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_submission_list",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_submission_list(request, exam_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    delegation = Delegation.objects.get(members=request.user)\n    submissions = StudentSubmission.objects.filter(exam=exam, student__delegation=delegation)\n    return render(request, 'ipho_exam/admin_submissions.html', {\n        'exam': exam,\n        'submissions': submissions,\n    })\n@permission_required('ipho_core.is_staff')\ndef admin_submission_assign(request, exam_id):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_submission_assign",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_submission_assign(request, exam_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    delegation = Delegation.objects.get(members=request.user)\n    if request.POST:\n        form = SubmissionAssignForm(request.POST)\n        if form.is_valid():\n            form.instance.exam = exam\n            form.save()\n        return HttpResponseRedirect(reverse('exam:admin-submission-list', args=(exam.pk, )))\n    else:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "admin_submission_delete",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def admin_submission_delete(request, submission_id):\n    pass\n@login_required\ndef editor(request, exam_id=None, question_id=None, lang_id=None, orig_id=OFFICIAL_LANGUAGE, orig_diff=None):\n    context = {\n        'exam_id': exam_id,\n        'question_id': question_id,\n        'lang_id': lang_id,\n        'orig_id': orig_id,\n        'orig_diff': orig_diff,",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "editor",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def editor(request, exam_id=None, question_id=None, lang_id=None, orig_id=OFFICIAL_LANGUAGE, orig_diff=None):\n    context = {\n        'exam_id': exam_id,\n        'question_id': question_id,\n        'lang_id': lang_id,\n        'orig_id': orig_id,\n        'orig_diff': orig_diff,\n    }\n    exam = None\n    question = None",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "compiled_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def compiled_question(request, question_id, lang_id, version_num=None, raw_tex=False):\n    if not Question.objects.get(pk=question_id).check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to view this question.')\n    if version_num is not None and request.user.has_perm('ipho_core.is_staff'):\n        trans = qquery.get_version(question_id, lang_id, version_num)\n    else:\n        trans = qquery.latest_version(question_id, lang_id)\n    filename = u'exam-{}-{}{}-{}.pdf'.format(\n        slugify(trans.question.exam.name), trans.question.code, trans.question.position, slugify(trans.lang.name)\n    )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "auto_translate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def auto_translate(request):\n    if request.method == 'POST' and getattr(settings, 'AUTO_TRANSLATE', False):\n        to_lang = request.POST['to_lang']\n        raw_text = request.POST['text']\n        if not raw_text.strip():\n            return JsonResponse({'text':raw_text})\n        from_lang_pk = request.POST['from_lang']\n        from_lang_obj = Language.objects.get(pk=from_lang_pk)\n        if from_lang_obj.style is not None:\n            from_lang = Language.STYLES_TO_GOOGLE_TRANSLATE_MAPPING[from_lang_obj.style]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "auto_translate_count",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def auto_translate_count(request):\n    def to_money(count):\n        return count/10**6*20\n    total_counts = CachedAutoTranslation.objects.annotate(total_char_count=F('source_length')*F('hits')).aggregate(total_sum=Sum('total_char_count'), sent_sum=Sum('source_length'))\n    sent_count = total_counts['sent_sum']\n    total_count = total_counts['total_sum']\n    sent_cost = to_money(sent_count)\n    delegation_counts_raw = Delegation.objects.values('name', 'auto_translate_char_count')\n    delegation_tot_count = sum([a['auto_translate_char_count'] for a in delegation_counts_raw])\n    delegation_counts = [{ **a, 'costs':a['auto_translate_char_count']*sent_cost/delegation_tot_count} for a in delegation_counts_raw]",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "compiled_question_diff",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def compiled_question_diff(request, question_id, lang_id, old_version_num=None, new_version_num=None):\n    if not Question.objects.get(pk=question_id).check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to view this question.')\n    if new_version_num is None:\n        trans_new = qquery.get_latest_version(question_id, lang_id)\n        new_version_num = trans_new.node.version\n    else:\n        trans_new = qquery.get_version(question_id, lang_id, new_version_num)\n    if old_version_num is None:\n        old_version_num = max(1, int(new_version_num) - 1)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "compiled_question_odt",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def compiled_question_odt(request, question_id, lang_id, version_num=None):\n    if not Question.objects.get(pk=question_id).check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to view this question.')\n    if version_num is not None and request.user.has_perm('ipho_core.is_staff'):\n        trans = qquery.get_version(question_id, lang_id, version_num)\n    else:\n        trans = qquery.latest_version(question_id, lang_id)\n    filename = u'Exam - {} Q{} - {}.odt'.format(trans.question.exam.name, trans.question.position, trans.lang.name)\n    trans_content, ext_resources = trans.qml.make_xhtml()\n    for r in ext_resources:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "compiled_question_html",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def compiled_question_html(request, question_id, lang_id, version_num=None):\n    if not Question.objects.get(pk=question_id).check_permission(request.user):\n        return HttpResponseForbidden('You do not have the permissions to view this question.')\n    if version_num is not None and request.user.has_perm('ipho_core.is_staff'):\n        trans = qquery.get_version(question_id, lang_id, version_num)\n    else:\n        trans = qquery.latest_version(question_id, lang_id)\n    trans_content, ext_resources = trans.qml.make_xhtml()\n    html = u\"\"\"<!DOCTYPE html>\n<html>",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "pdf_exam_for_student",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def pdf_exam_for_student(request, exam_id, student_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    student = get_object_or_404(Student, id=student_id)\n    ## TODO: implement caching\n    all_tasks = []\n    student_languages = StudentSubmission.objects.filter(exam=exam, student=student)\n    questions = exam.question_set.all()\n    grouped_questions = {k: list(g) for k, g in itertools.groupby(questions, key=lambda q: q.position)}\n    grouped_questions = OrderedDict(sorted(grouped_questions.items()))\n    for position, qgroup in list(grouped_questions.items()):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "pdf_exam_pos_student",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def pdf_exam_pos_student(request, exam_id, position, student_id, type='P'):\n    student = get_object_or_404(Student, id=student_id)\n    user = request.user\n    if not user.has_perm('ipho_core.is_printstaff'):\n        if not student.delegation.members.filter(pk=user.pk).exists():\n            return HttpResponseForbidden('You do not have permission to view this document.')\n    doc = get_object_or_404(Document, exam=exam_id, position=position, student=student_id)\n    if type == 'P':  ## for for printouts\n        if hasattr(doc, 'documenttask'):\n            task = AsyncResult(doc.documenttask.task_id)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "pdf_exam_pos_student_status",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def pdf_exam_pos_student_status(request, exam_id, position, student_id):\n    exam = get_object_or_404(Exam, id=exam_id)\n    student = get_object_or_404(Student, id=student_id)\n    doc = get_object_or_404(Document, exam=exam_id, position=position, student=student_id)\n    if not hasattr(doc, 'documenttask'):\n        return JsonResponse({'status': 'COMPLETED', 'ready': True, 'failed': False})\n    else:\n        task = AsyncResult(doc.documenttask.task_id)\n        return JsonResponse({'status': task.status, 'ready': task.ready(), 'failed': task.failed()})\n@login_required",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "task_status",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def task_status(request, token):\n    task = AsyncResult(token)\n    return JsonResponse({'status': task.status, 'ready': task.ready()})\ndef _wrap_pre(s):\n    return ''.join('<span>{}</span>'.format(l) for l in s.split('\\n'))\n@login_required\ndef task_log(request, token):\n    CONTEXT_LINES = 6\n    task = AsyncResult(token)\n    try:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "task_log",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def task_log(request, token):\n    CONTEXT_LINES = 6\n    task = AsyncResult(token)\n    try:\n        if task.ready():\n            doc_pdf, meta = task.get()\n            return HttpResponse('NO LOG', content_type=\"text/plain\")\n        else:\n            return render(request, 'ipho_exam/pdf_task.html', {'task': task})\n    except ipho_exam.pdf.TexCompileException as e:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "pdf_task",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def pdf_task(request, token):\n    task = AsyncResult(token)\n    try:\n        if task.ready():\n            doc_pdf, meta = task.get()\n            if request.META.get('HTTP_IF_NONE_MATCH', '') == meta['etag']:\n                logger.debug('Requested PDF is already in cache')\n                return HttpResponseNotModified()\n            logger.debug('Requested PDF is NOT in cache')\n            output_pdf = pdf.check_add_watermark(request, doc_pdf)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "bulk_print",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def bulk_print(request, page=None, tot_print=None):\n    messages = []\n    if tot_print:\n        messages.append((\n            'alert-success',\n            '<strong>Success</strong> {} print job submitted. Please pickup your document at the printing station.'.\n            format(tot_print)\n        ))\n    exams = Exam.objects.filter(hidden=False)\n    delegations = Delegation.objects.all()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "print_doc",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def print_doc(request, type, exam_id, position, student_id, queue):\n    queue_list = printer.allowed_choices(request.user)\n    if not queue in (q[0] for q in queue_list):\n        raise HttpResponseForbidden('Print queue not allowed.')\n    doc = get_object_or_404(Document, exam=exam_id, position=position, student=student_id)\n    if type == 'P':\n        status = printer.send2queue(doc.file, queue, user=request.user, title='P: {}'.format(doc.barcode_base))\n        l = PrintLog(document=doc, type='P')\n        l.save()\n    elif doc.scan_file:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "set_scan_status",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def set_scan_status(request, doc_id, status):\n    doc = get_object_or_404(Document, id=doc_id)\n    doc.scan_status = status\n    doc.save()\n    return HttpResponseRedirect(reverse('exam:bulk-print'))\n@permission_required('ipho_core.is_printstaff')\ndef set_scan_full(request, doc_id):\n    doc = get_object_or_404(Document, id=doc_id)\n    doc.scan_file = doc.scan_file_orig\n    doc.save()",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "set_scan_full",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def set_scan_full(request, doc_id):\n    doc = get_object_or_404(Document, id=doc_id)\n    doc.scan_file = doc.scan_file_orig\n    doc.save()\n    n = request.META.get('HTTP_REFERER', reverse('exam:bulk-print'))\n    return HttpResponseRedirect(n)\n@permission_required('ipho_core.is_printstaff')\ndef upload_scan(request):\n    messages = []\n    form = ScanForm(request.POST or None, request.FILES or None)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "upload_scan",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def upload_scan(request):\n    messages = []\n    form = ScanForm(request.POST or None, request.FILES or None)\n    if form.is_valid():\n        doc = get_object_or_404(\n            Document,\n            exam=form.cleaned_data['question'].exam,\n            position=form.cleaned_data['question'].position,\n            student=form.cleaned_data['student']\n        )",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "extra_sheets",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def extra_sheets(request, exam_id=None):\n    if exam_id is None:\n        exams = Exam.objects.filter(hidden=False)\n        return render(request, 'ipho_exam/extra_sheets_select_exam.html', {'exams': exams})\n    messages = []\n    form = ExtraSheetForm(exam_id, request.POST or None, initial={'template': 'exam_blank.tex'})\n    if form.is_valid():\n        student = form.cleaned_data['student']\n        question = form.cleaned_data['question']\n        exam = question.exam",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "api_keys",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "def api_keys(request):\n    return render(request, 'ipho_exam/api_keys.html', {\n        'EXAM_TOOLS_API_KEYS': settings.EXAM_TOOLS_API_KEYS,\n    })",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "logger = logging.getLogger('ipho_exam')\ndjango_logger = logging.getLogger('django.request')\nOFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n@login_required\ndef index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "django_logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "django_logger = logging.getLogger('django.request')\nOFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n@login_required\ndef index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie\ndef main(request):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n@login_required\ndef index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie\ndef main(request):\n    success = None",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n@login_required\ndef index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie\ndef main(request):\n    success = None\n    delegation = Delegation.objects.filter(members=request.user)",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\n@login_required\ndef index(request):\n    return render(request, 'ipho_exam/index.html')\n@login_required\n@ensure_csrf_cookie\ndef main(request):\n    success = None\n    delegation = Delegation.objects.filter(members=request.user)\n    own_lang = None",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "figparam_placeholder",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views",
        "description": "src.components.Exam.exam_tools.ipho_exam.views",
        "peekOfCode": "figparam_placeholder = re.compile(r'%([\\w-]+)%')\n@permission_required('ipho_core.is_staff')\ndef figure_add(request):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    form = FigureForm(request.POST or None, request.FILES or None)\n    if form.is_valid():\n        obj = form.save(commit=False)\n        ext = os.path.splitext(str(request.FILES['file']))[1]\n        if ext in VALID_COMPILED_FIGURE_EXTENSIONS:",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views",
        "documentation": {}
    },
    {
        "label": "SwaggerSchemaView",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "peekOfCode": "class SwaggerSchemaView(views.APIView):\n    exclude_from_schema = True\n    permission_classes = [IsAuthenticated]\n    renderer_classes = [renderers.CoreJSONRenderer, OpenAPIRenderer, SwaggerUIRenderer]\n    def get(self, request):\n        generator = schemas.SchemaGenerator(title='Exam Tools - Exam Documents API')\n        schema = generator.get_schema()\n        return Response(schema)\nclass DocumentViewSet(\n    mixins.ListModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, viewsets.GenericViewSet",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "documentation": {}
    },
    {
        "label": "DocumentViewSet",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "peekOfCode": "class DocumentViewSet(\n    mixins.ListModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, viewsets.GenericViewSet\n):\n    # \"\"\"\n    # Access and edit the collection of student documents (exam printouts and scans)\n    # \"\"\"\n    \"\"\"\n    list: Collection of documents\n    retrieve: Single entry\n    partial_update: Partially update single entry",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_api",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def index(request):\n    return render_to_response('example_exam/index.html', context_instance=RequestContext(request))\ndef view_exam(request, display_tpl=\"show\"):\n    base_template = \"base_fullexam.html\" if display_tpl == 'show' else \"base_ckeditor.html\"\n    return render_to_response(\n        'example_exam/theo_2011_Q1.html', {'base_template': base_template}, context_instance=RequestContext(request)\n    )\ndef view(request):\n    return view_exam(request, display_tpl=\"show\")\ndef edit(request):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "view_exam",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def view_exam(request, display_tpl=\"show\"):\n    base_template = \"base_fullexam.html\" if display_tpl == 'show' else \"base_ckeditor.html\"\n    return render_to_response(\n        'example_exam/theo_2011_Q1.html', {'base_template': base_template}, context_instance=RequestContext(request)\n    )\ndef view(request):\n    return view_exam(request, display_tpl=\"show\")\ndef edit(request):\n    return view_exam(request, display_tpl=\"edit\")\ndef inline_edit(request):",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def view(request):\n    return view_exam(request, display_tpl=\"show\")\ndef edit(request):\n    return view_exam(request, display_tpl=\"edit\")\ndef inline_edit(request):\n    title = u'Ein Drei-Körper-Problem und LISA'\n    parts = []\n    parts.append(\n        u\"\"\"\n    <div class=\"figure\">",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "edit",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def edit(request):\n    return view_exam(request, display_tpl=\"edit\")\ndef inline_edit(request):\n    title = u'Ein Drei-Körper-Problem und LISA'\n    parts = []\n    parts.append(\n        u\"\"\"\n    <div class=\"figure\">\n        <img src=\"{}\" /><br />\n        ABBILDUNG 1: Koplanare Umlaufbahnen der drei Körper.",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "inline_edit",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def inline_edit(request):\n    title = u'Ein Drei-Körper-Problem und LISA'\n    parts = []\n    parts.append(\n        u\"\"\"\n    <div class=\"figure\">\n        <img src=\"{}\" /><br />\n        ABBILDUNG 1: Koplanare Umlaufbahnen der drei Körper.\n        (\"Koplanar\": in der gleichen Ebene liegend)\n    </div>",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "mathquill",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def mathquill(request):\n    return render_to_response('test_mathquill.html', context_instance=RequestContext(request))\ndef mathquill_toolbar(request):\n    return render_to_response('test_mathquill_toolbar.html', context_instance=RequestContext(request))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "mathquill_toolbar",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "description": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "peekOfCode": "def mathquill_toolbar(request):\n    return render_to_response('test_mathquill_toolbar.html', context_instance=RequestContext(request))",
        "detail": "src.components.Exam.exam_tools.ipho_exam.views_test",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('ipho_core', '0001_initial'),\n        ('ipho_exam', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Marking',\n            fields=[",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_core', '0007_autologin'),\n        ('ipho_exam', '0030_language_style'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Marking',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0002_auto_20160423_1631",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0002_auto_20160423_1631",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0030_language_style'),\n        ('ipho_marking', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='MarkingMeta',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0002_auto_20160423_1631",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0003_auto_20160423_1633",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0003_auto_20160423_1633",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0002_auto_20160423_1631'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='marking',\n            old_name='question_points',\n            new_name='marking_meta',\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0003_auto_20160423_1633",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0004_auto_20160430_1058",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0004_auto_20160430_1058",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0003_auto_20160423_1633'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='markingmeta',\n            options={'ordering': ['position']},\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0004_auto_20160430_1058",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0005_auto_20160430_1103",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0005_auto_20160430_1103",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0004_auto_20160430_1058'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='marking',\n            name='comment',\n            field=models.TextField(null=True, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0005_auto_20160430_1103",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0006_auto_20160430_1450",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0006_auto_20160430_1450",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0005_auto_20160430_1103'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='marking',\n            name='points',\n            field=models.FloatField(null=True, blank=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0006_auto_20160430_1450",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0007_auto_20160623_1711",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0007_auto_20160623_1711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0006_auto_20160430_1450'),\n    ]\n    operations = [\n        migrations.AlterIndexTogether(\n            name='markingmeta',\n            index_together=set([('question', 'name')]),\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0007_auto_20160623_1711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0008_auto_20180318_0929",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0008_auto_20180318_0929",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0007_auto_20160623_1711'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='marking',\n            name='points',\n            field=models.DecimalField(max_digits=8, blank=True, null=True, decimal_places=2),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0008_auto_20180318_0929",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0009_auto_20180704_1126",
        "description": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0009_auto_20180704_1126",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_marking', '0008_auto_20180318_0929'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='marking',\n            name='points',\n            field=models.DecimalField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], max_digits=8, decimal_places=2),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.migrations.bk.0009_auto_20180704_1126",
        "documentation": {}
    },
    {
        "label": "MarkingMetaAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.admin",
        "description": "src.components.Exam.exam_tools.ipho_marking.admin",
        "peekOfCode": "class MarkingMetaAdmin(admin.ModelAdmin):\n    list_display = ('position', 'question', 'name', 'max_points')\nclass MarkingAdmin(admin.ModelAdmin):\n    search_fields = ('student', )\n    list_filter = ('version', 'marking_meta__question', 'student__delegation')\n    list_display = ('marking_meta', 'student', 'version', 'points')\nadmin.site.register(models.MarkingMeta, MarkingMetaAdmin)\nadmin.site.register(models.Marking, MarkingAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_marking.admin",
        "documentation": {}
    },
    {
        "label": "MarkingAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.admin",
        "description": "src.components.Exam.exam_tools.ipho_marking.admin",
        "peekOfCode": "class MarkingAdmin(admin.ModelAdmin):\n    search_fields = ('student', )\n    list_filter = ('version', 'marking_meta__question', 'student__delegation')\n    list_display = ('marking_meta', 'student', 'version', 'points')\nadmin.site.register(models.MarkingMeta, MarkingMetaAdmin)\nadmin.site.register(models.Marking, MarkingAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_marking.admin",
        "documentation": {}
    },
    {
        "label": "ImportForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.forms",
        "description": "src.components.Exam.exam_tools.ipho_marking.forms",
        "peekOfCode": "class ImportForm(Form):\n    exam = forms.ModelChoiceField(queryset=Exam.objects.all(), label='Select exam')\n    def __init__(self, *args, **kwargs):\n        super(ImportForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Submit'))\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.form_tag = True\nclass PointsForm(ModelForm):",
        "detail": "src.components.Exam.exam_tools.ipho_marking.forms",
        "documentation": {}
    },
    {
        "label": "PointsForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.forms",
        "description": "src.components.Exam.exam_tools.ipho_marking.forms",
        "peekOfCode": "class PointsForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(PointsForm, self).__init__(*args, **kwargs)\n        self.fields['points'].label = '{} ({})'.format(\n            self.instance.marking_meta.name, self.instance.marking_meta.max_points\n        )\n        self.fields['points'].required = True\n        self.helper = FormHelper()\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True",
        "detail": "src.components.Exam.exam_tools.ipho_marking.forms",
        "documentation": {}
    },
    {
        "label": "MarkingMeta",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.models",
        "description": "src.components.Exam.exam_tools.ipho_marking.models",
        "peekOfCode": "class MarkingMeta(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    name = models.CharField(max_length=10)\n    max_points = models.DecimalField(max_digits=8, decimal_places=2)\n    position = models.PositiveSmallIntegerField(default=10, help_text='Sorting index inside one question')\n    def __str__(self):\n        return u'{} [{}] {} points'.format(self.name, self.question.name, self.max_points)\n    class Meta(object):\n        ordering = ['position']\n        unique_together = index_together = (('question', 'name'), )",
        "detail": "src.components.Exam.exam_tools.ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "Marking",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.models",
        "description": "src.components.Exam.exam_tools.ipho_marking.models",
        "peekOfCode": "class Marking(models.Model):\n    marking_meta = models.ForeignKey(MarkingMeta, on_delete=models.CASCADE)\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    points = models.DecimalField(\n        null=True, blank=True, max_digits=8, decimal_places=2, validators=[MinValueValidator(0.)]\n    )\n    comment = models.TextField(null=True, blank=True)\n    MARKING_VERSIONS = OrderedDict([\n        ('O', 'Organizers'),\n        ('D', 'Delegation'),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.urls",
        "description": "src.components.Exam.exam_tools.ipho_marking.urls",
        "peekOfCode": "app_name = 'marking'\nurlpatterns = [\n    ## Delegation views\n    url(r'^$', views.delegation_summary, name='delegation-summary'),\n    url(r'^export/exam/(?P<exam_id>\\d+)$', views.delegation_export, name='delegation-export'),\n    url(\n        r'^detail/(?P<stud_id>\\d+)/question/(?P<question_id>\\d+)$',\n        views.delegation_stud_view,\n        name='delegation-stud-detail'\n    ),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.urls",
        "description": "src.components.Exam.exam_tools.ipho_marking.urls",
        "peekOfCode": "urlpatterns = [\n    ## Delegation views\n    url(r'^$', views.delegation_summary, name='delegation-summary'),\n    url(r'^export/exam/(?P<exam_id>\\d+)$', views.delegation_export, name='delegation-export'),\n    url(\n        r'^detail/(?P<stud_id>\\d+)/question/(?P<question_id>\\d+)$',\n        views.delegation_stud_view,\n        name='delegation-stud-detail'\n    ),\n    url(r'^detail_all/question/(?P<question_id>\\d+)$', views.delegation_view_all, name='delegation-all-detail'),",
        "detail": "src.components.Exam.exam_tools.ipho_marking.urls",
        "documentation": {}
    },
    {
        "label": "import_exam",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def import_exam(request):\n    ctx = {}\n    ctx['alerts'] = []\n    form = ImportForm(request.POST or None)\n    if form.is_valid():\n        exam = form.cleaned_data['exam']\n        num_tot = 0\n        num_created = 0\n        num_marking_tot = 0\n        num_marking_created = 0",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "summary",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def summary(request):\n    vid = request.GET.get('version', 'O')\n    points_per_student = []\n    students = Student.objects.all().values('id', 'code')\n    for student in students:\n        stud_points_list = Marking.objects.filter(\n            version=vid, student=student['id']\n        ).values('marking_meta__question').annotate(question_points=Sum('points')).values_list(\n            'marking_meta__question',\n            'question_points',",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "staff_stud_detail",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def staff_stud_detail(request, version, stud_id, question_id):\n    ctx = {}\n    ctx['msg'] = []\n    if not request.user.has_perm('ipho_core.is_marker') or version != 'O':\n        raise RuntimeError('You cannot modify these markings!')\n    question = get_object_or_404(Question, id=question_id)\n    student = get_object_or_404(Student, id=stud_id)\n    metas = MarkingMeta.objects.filter(question=question)\n    FormSet = modelformset_factory(\n        Marking, form=PointsForm, fields=['points'], extra=0, can_delete=False, can_order=False",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "export_with_total",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def export_with_total(request):\n    return export(request, include_totals=True)\n@permission_required('ipho_core.is_staff')\ndef export(request, include_totals=False):\n    versions = request.GET.get('v', 'O,D,F').split(',')\n    csv_rows = []\n    title_row = ['Student', 'First_Name', 'Last_Name', 'Delegation', 'Version']\n    mmeta = MarkingMeta.objects.all().order_by('question__exam', 'question__position', 'position')\n    for m in mmeta:\n        title_row.append('{} - {} ({})'.format(m.question.name, m.name, m.max_points))",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "export",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def export(request, include_totals=False):\n    versions = request.GET.get('v', 'O,D,F').split(',')\n    csv_rows = []\n    title_row = ['Student', 'First_Name', 'Last_Name', 'Delegation', 'Version']\n    mmeta = MarkingMeta.objects.all().order_by('question__exam', 'question__position', 'position')\n    for m in mmeta:\n        title_row.append('{} - {} ({})'.format(m.question.name, m.name, m.max_points))\n    exams = Exam.objects.filter(hidden=False)\n    questions = Question.objects.filter(exam__hidden=False, code='A').order_by('exam', 'position')\n    if include_totals:",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_export",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_export(request, exam_id):\n    delegation = Delegation.objects.get(members=request.user)\n    all_versions = request.GET.get('v', 'O,D,F').split(',')\n    # check if the delegation should see all versions\n    if ExamAction.objects.get(\n        exam__id=exam_id, delegation=delegation, action=ExamAction.POINTS\n    ).status == ExamAction.SUBMITTED:\n        allowed_versions = ['O', 'D', 'F']\n    else:\n        allowed_versions = ['D']",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_summary",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_summary(request):\n    delegation = Delegation.objects.get(members=request.user)\n    points_submissions = ExamAction.objects.filter(\n        delegation=delegation, action=ExamAction.POINTS, exam__marking_active=True\n    ).order_by('exam')\n    students = Student.objects.filter(delegation=delegation).values('id', 'pk', 'code', 'first_name', 'last_name')\n    vid = 'F'\n    points_per_student = []\n    for student in students:\n        # Exam points",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_stud_edit",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_stud_edit(request, stud_id, question_id):\n    delegation = Delegation.objects.get(members=request.user)\n    student = get_object_or_404(Student, id=stud_id)\n    if student.delegation != delegation:\n        return HttpResponseForbidden('You do not have permission to access this student.')\n    question = get_object_or_404(Question, id=question_id, exam__marking_active=True)\n    version = 'D'\n    ctx = {}\n    ctx['msg'] = []\n    ctx['student'] = student",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_edit_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_edit_all(request, question_id):\n    delegation = Delegation.objects.get(members=request.user)\n    students = Student.objects.filter(delegation=delegation).order_by('code')\n    question = get_object_or_404(Question, id=question_id, exam__marking_active=True)\n    version = 'D'\n    ctx = {}\n    ctx['msg'] = []\n    ctx['students'] = students\n    ctx['question'] = question\n    ctx['exam'] = question.exam",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_stud_view",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_stud_view(request, stud_id, question_id):\n    delegation = Delegation.objects.get(members=request.user)\n    student = get_object_or_404(Student, id=stud_id)\n    if student.delegation != delegation:\n        return HttpResponseForbidden('You do not have permission to access this student.')\n    question = get_object_or_404(Question, id=question_id, exam__marking_active=True)\n    versions = ['O', 'D', 'F']\n    versions_display = [Marking.MARKING_VERSIONS[v] for v in versions]\n    ctx = {}\n    ctx['msg'] = []",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_view_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_view_all(request, question_id):\n    delegation = Delegation.objects.get(members=request.user)\n    students = Student.objects.filter(delegation=delegation)\n    question = get_object_or_404(Question, id=question_id, exam__marking_active=True)\n    versions = ['O', 'D', 'F']\n    versions_display = [Marking.MARKING_VERSIONS[v] for v in versions]\n    ctx = {}\n    ctx['msg'] = []\n    ctx['question'] = question\n    ctx['students'] = students",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "delegation_confirm",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def delegation_confirm(request, exam_id):\n    delegation = Delegation.objects.get(members=request.user)\n    exam = get_object_or_404(Exam, id=exam_id, marking_active=True)\n    form_error = ''\n    points_submissions, _ = ExamAction.objects.get_or_create(exam=exam, delegation=delegation, action=ExamAction.POINTS)\n    if points_submissions.status == ExamAction.SUBMITTED:\n        return HttpResponseRedirect(reverse('marking:delegation-summary'))\n    questions = Question.objects.filter(exam=exam, type=Question.ANSWER)\n    metas_query = MarkingMeta.objects.filter(question__in=questions).order_by('question', 'position')\n    markings_query = Marking.objects.filter(",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "moderation_index",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def moderation_index(request, question_id=None):\n    questions = Question.objects.filter(\n        exam__hidden=False, exam__moderation_active=True, type=Question.ANSWER\n    ).order_by('exam__code', 'position')\n    question = None if question_id is None else get_object_or_404(Question, id=question_id)\n    delegations = Delegation.objects.all()\n    ctx = {'questions': questions, 'question': question, 'delegations': delegations}\n    return render(request, 'ipho_marking/moderation_index.html', ctx)\n@permission_required('ipho_core.is_marker')\ndef moderation_detail(request, question_id, delegation_id):",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "moderation_detail",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def moderation_detail(request, question_id, delegation_id):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False, exam__moderation_active=True)\n    delegation = get_object_or_404(Delegation, id=delegation_id)\n    metas = MarkingMeta.objects.filter(question=question)\n    students = delegation.student_set.all()\n    student_forms = []\n    marking_forms = []\n    all_valid = True\n    with_errors = False\n    for i, student in enumerate(students):",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "official_marking_index",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def official_marking_index(request, question_id=None):\n    questions = Question.objects.filter(exam__hidden=False, type=Question.ANSWER).order_by('exam__code', 'position')\n    question = None if question_id is None else get_object_or_404(Question, id=question_id)\n    delegations = Delegation.objects.all()\n    ctx = {'questions': questions, 'question': question, 'delegations': delegations}\n    return render(request, 'ipho_marking/official_marking_index.html', ctx)\n@permission_required('ipho_core.is_marker')\ndef official_marking_detail(request, question_id, delegation_id):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False)\n    delegation = get_object_or_404(Delegation, id=delegation_id)",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "official_marking_detail",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def official_marking_detail(request, question_id, delegation_id):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False)\n    delegation = get_object_or_404(Delegation, id=delegation_id)\n    metas = MarkingMeta.objects.filter(question=question)\n    students = delegation.student_set.all()\n    student_forms = []\n    all_valid = True\n    with_errors = False\n    for i, student in enumerate(students):\n        FormSet = modelformset_factory(",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "official_marking_confirmed",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def official_marking_confirmed(request, question_id, delegation_id):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False)\n    delegation = get_object_or_404(Delegation, id=delegation_id)\n    markings = Marking.objects.filter(\n        marking_meta__question=question, version='O', student__delegation=delegation\n    ).values('student').annotate(total=Sum('points')).order_by('student').values(\n        'student__first_name', 'student__last_name', 'student__code', 'total'\n    )\n    ctx = {'question': question, 'delegation': delegation, 'markings': markings}\n    return render(request, 'ipho_marking/official_marking_confirmed.html', ctx)",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "moderation_confirmed",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def moderation_confirmed(request, question_id, delegation_id):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False, exam__moderation_active=True)\n    delegation = get_object_or_404(Delegation, id=delegation_id)\n    markings = Marking.objects.filter(\n        marking_meta__question=question, version='F', student__delegation=delegation\n    ).values('student').annotate(total=Sum('points')).order_by('student').values(\n        'student__first_name', 'student__last_name', 'student__code', 'total'\n    )\n    ctx = {'question': question, 'delegation': delegation, 'markings': markings}\n    return render(request, 'ipho_marking/moderation_confirmed.html', ctx)",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "marking_submissions",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def marking_submissions(request):\n    ctx = {\n        \"summaries\": [(\n            exam.name,\n            ExamAction.objects.filter(exam=exam, action=ExamAction.POINTS,\n                                      status=ExamAction.OPEN).exclude(delegation__name=OFFICIAL_DELEGATION).count(),\n            ExamAction.objects.filter(exam=exam, action=ExamAction.POINTS, status=ExamAction.SUBMITTED\n                                      ).exclude(delegation__name=OFFICIAL_DELEGATION).count(),\n            ExamAction.objects.filter(exam=exam, action=ExamAction.POINTS,\n                                      status=ExamAction.OPEN).exclude(delegation__name=OFFICIAL_DELEGATION).values_list(",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "progress",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "def progress(request):\n    vid = request.GET.get('version', 'O')\n    if request.user.has_perm('ipho_core.is_staff'):\n        all_versions = Marking.MARKING_VERSIONS\n    elif request.user.has_perm('ipho_core.is_marker'):\n        all_versions = OrderedDict([(k, v) for k, v in list(Marking.MARKING_VERSIONS.items()) if k != 'D'])\n        if vid not in all_versions:\n            return HttpResponseForbidden('Only the staff can see this page.')\n    else:\n        return HttpResponseForbidden('You do not have permission to access this page.')",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "OFFICIAL_LANGUAGE = getattr(settings, 'OFFICIAL_LANGUAGE', 1)\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\n@permission_required('ipho_core.is_staff')\ndef import_exam(request):\n    ctx = {}\n    ctx['alerts'] = []\n    form = ImportForm(request.POST or None)\n    if form.is_valid():\n        exam = form.cleaned_data['exam']\n        num_tot = 0",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_marking.views",
        "description": "src.components.Exam.exam_tools.ipho_marking.views",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\n@permission_required('ipho_core.is_staff')\ndef import_exam(request):\n    ctx = {}\n    ctx['alerts'] = []\n    form = ImportForm(request.POST or None)\n    if form.is_valid():\n        exam = form.cleaned_data['exam']\n        num_tot = 0\n        num_created = 0",
        "detail": "src.components.Exam.exam_tools.ipho_marking.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('ipho_exam', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Choice',\n            fields=[",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0001_initial",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Choice',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('label', models.CharField(max_length=3, null=True, blank=True)),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0002_auto_20160613_1653",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0002_auto_20160613_1653",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_poll', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='choice',\n            options={'ordering': ['label']},\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0002_auto_20160613_1653",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0003_auto_20160618_1703",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0003_auto_20160618_1703",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_poll', '0002_auto_20160613_1653'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='implementation',\n            field=models.PositiveSmallIntegerField(default=0, choices=[(0, b'Not implemented'), (1, b'Implemented')]),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0003_auto_20160618_1703",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0004_question_feedbacks",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0004_question_feedbacks",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_exam', '0059_auto_20160620_2023'),\n        ('ipho_poll', '0003_auto_20160618_1703'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='question',\n            name='feedbacks',\n            field=models.ManyToManyField(related_name='vote', to='ipho_exam.Feedback', blank=True),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0004_question_feedbacks",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0005_auto_20160708_2224",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0005_auto_20160708_2224",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_poll', '0004_question_feedbacks'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='vote',\n            unique_together=set([('question', 'voting_right')]),\n        ),\n    ]",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0005_auto_20160708_2224",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0006_auto_20180317_1752",
        "description": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0006_auto_20180317_1752",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ipho_poll', '0005_auto_20160708_2224'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='question',\n            name='end_date',\n            field=models.DateTimeField(verbose_name='end date', blank=True, null=True),\n        ),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.migrations.bk.0006_auto_20180317_1752",
        "documentation": {}
    },
    {
        "label": "ChoiceInline",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.admin",
        "description": "src.components.Exam.exam_tools.ipho_poll.admin",
        "peekOfCode": "class ChoiceInline(admin.TabularInline):\n    model = Choice\n    extra = 2\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Question information', {\n            'fields': ['title', 'content']\n        }),\n        ('Date information', {\n            'fields': ['pub_date', 'end_date'],",
        "detail": "src.components.Exam.exam_tools.ipho_poll.admin",
        "documentation": {}
    },
    {
        "label": "QuestionAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.admin",
        "description": "src.components.Exam.exam_tools.ipho_poll.admin",
        "peekOfCode": "class QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Question information', {\n            'fields': ['title', 'content']\n        }),\n        ('Date information', {\n            'fields': ['pub_date', 'end_date'],\n            'classes': ['collapse']\n        }),\n        ('Related feedbacks', {",
        "detail": "src.components.Exam.exam_tools.ipho_poll.admin",
        "documentation": {}
    },
    {
        "label": "VoteAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.admin",
        "description": "src.components.Exam.exam_tools.ipho_poll.admin",
        "peekOfCode": "class VoteAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Vote Information', {\n            'fields': ['question', 'choice', 'voting_right']\n        }),\n    ]\n    list_display = ('question', 'choice', 'voting_right')\nclass VotingRightAdmin(admin.ModelAdmin):\n    fieldsets = [('VotingRight Information', {'fields': ['user', 'name']})]\n    list_display = ('user', 'name')",
        "detail": "src.components.Exam.exam_tools.ipho_poll.admin",
        "documentation": {}
    },
    {
        "label": "VotingRightAdmin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.admin",
        "description": "src.components.Exam.exam_tools.ipho_poll.admin",
        "peekOfCode": "class VotingRightAdmin(admin.ModelAdmin):\n    fieldsets = [('VotingRight Information', {'fields': ['user', 'name']})]\n    list_display = ('user', 'name')\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Vote, VoteAdmin)\nadmin.site.register(VotingRight, VotingRightAdmin)",
        "detail": "src.components.Exam.exam_tools.ipho_poll.admin",
        "documentation": {}
    },
    {
        "label": "QuestionForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class QuestionForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(QuestionForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        # self.helper.layout = Layout(Field('title', placeholder='Enter question text'), Field('question'))\n        self.helper.html5_required = True\n        self.helper.form_show_labels = True\n        self.helper.form_tag = False\n        self.helper.disable_csrf = True\n    class Meta(object):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "EndDateForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class EndDateForm(ModelForm):\n    utc_offset = forms.IntegerField(widget=HiddenInput(), help_text='UTC offset in minutes')\n    def __init__(self, *args, **kwargs):\n        super(EndDateForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            HTML('<span class=\"quick-end-time\" data-min=\"1\"></span>'),\n            HTML('<span class=\"quick-end-time\" data-min=\"2\"></span>'),\n            HTML('<span class=\"quick-end-time\" data-min=\"5\"></span>'),\n            HTML('<span class=\"quick-end-time\" data-min=\"10\"></span>'),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "ChoiceForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class ChoiceForm(ModelForm):\n    class Meta(object):\n        model = Choice\n        fields = ['label', 'choice_text']\n        widgets = {\n            'label': forms.TextInput(attrs={\n                'size': 3,\n                'maxlength': 3\n            }),\n        }",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "ChoiceFormHelper",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class ChoiceFormHelper(FormHelper):\n    def __init__(self, *args, **kwargs):\n        can_delete = kwargs.pop('can_delete', True)\n        super(ChoiceFormHelper, self).__init__(*args, **kwargs)\n        fields = [\n            Div(Field('label'), css_class='form-group'),\n            Div(Field('choice_text', placeholder='Enter choice text'), css_class='form-group'),\n        ]\n        if can_delete:\n            fields += [",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "VoteForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class VoteForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(VoteForm, self).__init__(*args, **kwargs)\n        self.fields['choice'].empty_label = None\n        if self.instance.pk is not None:\n            self.fields['choice'].label = self.instance.voting_right\n        elif not self.is_bound:\n            self.fields['choice'].label = self.initial['voting_right']\n        ## Note: in the case of a bound form the label will still be \"Choice\". Unfortunately I didn't find a workaround\n    class Meta(object):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "VoteFormHelper",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.forms",
        "description": "src.components.Exam.exam_tools.ipho_poll.forms",
        "peekOfCode": "class VoteFormHelper(FormHelper):\n    def __init__(self, *args, **kwargs):\n        super(VoteFormHelper, self).__init__(*args, **kwargs)\n        self.layout = Layout(Div(Field('choice')), Div(Field('question')))\n        self.form_show_labels = True\n        self.html5_required = False\n        self.form_tag = False\n        self.disable_csrf = False",
        "detail": "src.components.Exam.exam_tools.ipho_poll.forms",
        "documentation": {}
    },
    {
        "label": "QuestionManager",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.models",
        "description": "src.components.Exam.exam_tools.ipho_poll.models",
        "peekOfCode": "class QuestionManager(models.Manager):\n    def is_draft(self):\n        queryset = Question.objects.filter(end_date__isnull=True)\n        return queryset\n    def is_open(self):\n        queryset = Question.objects.filter(end_date__gt=timezone.now())\n        return queryset\n    def is_closed(self):\n        queryset = Question.objects.filter(end_date__lte=timezone.now())\n        return queryset",
        "detail": "src.components.Exam.exam_tools.ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.models",
        "description": "src.components.Exam.exam_tools.ipho_poll.models",
        "peekOfCode": "class Question(models.Model):\n    class VOTE_RESULT_META(object):\n        OPEN = 0\n        REJECTED = 1\n        ACCEPTED = 2\n        choices = (\n            (OPEN, 'In progress'),\n            (REJECTED, 'Rejected'),\n            (ACCEPTED, 'Accepted'),\n        )",
        "detail": "src.components.Exam.exam_tools.ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Choice",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.models",
        "description": "src.components.Exam.exam_tools.ipho_poll.models",
        "peekOfCode": "class Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    label = models.CharField(max_length=3, blank=True, null=True)\n    choice_text = models.CharField(max_length=200)\n    def __str__(self):\n        if self.label == 'zzz' and 'abstain' in self.choice_text.lower():\n            return self.choice_text\n        return '{}. {}'.format(self.label, self.choice_text)\n    def calculateVotes(self):\n        return Vote.objects.filter(choice=self).count()",
        "detail": "src.components.Exam.exam_tools.ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "VotingRight",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.models",
        "description": "src.components.Exam.exam_tools.ipho_poll.models",
        "peekOfCode": "class VotingRight(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    def __str__(self):\n        return '{} ({})'.format(self.name, self.user)\nclass Vote(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice = models.ForeignKey(Choice, on_delete=models.CASCADE)\n    voting_right = models.ForeignKey(VotingRight, on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.models",
        "description": "src.components.Exam.exam_tools.ipho_poll.models",
        "peekOfCode": "class Vote(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice = models.ForeignKey(Choice, on_delete=models.CASCADE)\n    voting_right = models.ForeignKey(VotingRight, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.choice.__str__()\n    class Meta(object):\n        unique_together = (('question', 'voting_right'))",
        "detail": "src.components.Exam.exam_tools.ipho_poll.models",
        "documentation": {}
    },
    {
        "label": "QuestionMethodTests",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "class QuestionMethodTests(TestCase):\n    def test_was_published_recently_with_old_question(self):\n        \"\"\"\n        was_published_recently() should return False for questions whose pub_date\n        is older than 1 day.\n        \"\"\"\n        old_question = create_question(title=\"Old Question.\", days=-30)\n        self.assertEqual(old_question.was_published_recently(), False)\n    def test_was_published_recently_with_future_question(self):\n        \"\"\"",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "QuestionViewIndexTests",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "class QuestionViewIndexTests(TestCase):\n    def test_index_view_no_questions(self):\n        \"\"\"\n        If no questions exist, an appropriate message should be displayed.\n        \"\"\"\n        response = self.client.get(reverse('polls:index'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"No polls are available.\")\n        self.assertQuerysetEqual(response.context['latest_question_list'], [])\n    def test_index_view_with_a_past_question(self):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "QuestionViewDetailTests",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "class QuestionViewDetailTests(TestCase):\n    def test_detail_view_with_a_future_question(self):\n        \"\"\"\n            The detail view of a question with a pub_date in the future should return\n            a 404 not found.\n            \"\"\"\n        future_question = create_question(title='Future question.', days=5)\n        create_choice(choice_text=\"Future choice.\", question_id=1)\n        response = self.client.get(reverse('polls:detail', args=(future_question.id, )))\n        self.assertEqual(response.status_code, 404)",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "QuestionViewResultsTests",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "class QuestionViewResultsTests(TestCase):\n    def test_results_view_with_a_future_question(self):\n        \"\"\"\n            The results view of a question with a pub_date in the future should return\n            a 404 not found.\n            \"\"\"\n        future_question = create_question(title=\"Future question.\", days=5)\n        response = self.client.get(reverse('polls:results', args=(future_question.id, )))\n        self.assertEqual(response.status_code, 404)\n    def test_results_view_with_a_past_question(self):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "create_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "def create_question(title, days):\n    \"\"\"\n    Creates a question with the given 'title' published the given number\n    of 'days' offset to now (negative for questions published in the past, positive\n    for questions that have yet to be published).\n    \"\"\"\n    time = timezone.now() + datetime.timedelta(days=days)\n    return Question.objects.create(title=title, pub_date=time)\ndef create_choice(choice_text, question_id):\n    \"\"\"",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "create_choice",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.tests",
        "description": "src.components.Exam.exam_tools.ipho_poll.tests",
        "peekOfCode": "def create_choice(choice_text, question_id):\n    \"\"\"\n    Create a choice with the given 'choice_text' with a ForeignKey to the question with\n    the given 'question_id'.\n    \"\"\"\n    return Choice.objects.create(choice_text=choice_text, question_id=question_id)\n#testclasses\n#-----------\nclass QuestionMethodTests(TestCase):\n    def test_was_published_recently_with_old_question(self):",
        "detail": "src.components.Exam.exam_tools.ipho_poll.tests",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.urls",
        "description": "src.components.Exam.exam_tools.ipho_poll.urls",
        "peekOfCode": "app_name = 'poll'\nurlpatterns = [\n    # staff urls\n    url(r'^staff/$', views.staffIndex, name='staffIndex'),\n    url(r'^staff/partials/(?P<qtype>\\w+)$', views.staffIndexPartial, name='staff-index-partials'),\n    url(\n        r'^staff/question/(?P<question_pk>\\d+)/set/result/(?P<result>\\d+)$', views.staff_setResult, name='staff-set-result'\n    ),\n    url(r'^staff/question/(?P<question_pk>\\d+)/set/impl/(?P<impl>\\d+)$', views.staff_setImpl, name='staff-set-impl'),\n    url(r'^question/detail/(?P<question_pk>\\d+)/$', views.question, name='question'),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.urls",
        "description": "src.components.Exam.exam_tools.ipho_poll.urls",
        "peekOfCode": "urlpatterns = [\n    # staff urls\n    url(r'^staff/$', views.staffIndex, name='staffIndex'),\n    url(r'^staff/partials/(?P<qtype>\\w+)$', views.staffIndexPartial, name='staff-index-partials'),\n    url(\n        r'^staff/question/(?P<question_pk>\\d+)/set/result/(?P<result>\\d+)$', views.staff_setResult, name='staff-set-result'\n    ),\n    url(r'^staff/question/(?P<question_pk>\\d+)/set/impl/(?P<impl>\\d+)$', views.staff_setImpl, name='staff-set-impl'),\n    url(r'^question/detail/(?P<question_pk>\\d+)/$', views.question, name='question'),\n    url(r'^question/large/(?P<question_pk>\\d+)/$', views.question_large, name='question_large'),",
        "detail": "src.components.Exam.exam_tools.ipho_poll.urls",
        "documentation": {}
    },
    {
        "label": "staffIndex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def staffIndex(request):\n    return render(request, 'ipho_poll/staffIndex.html')\n@login_required\n@permission_required('ipho_core.is_staff')\n@ensure_csrf_cookie\ndef staffIndexPartial(request, qtype):\n    if qtype == 'drafted':\n        questions_list = Question.objects.is_draft().order_by('pk')\n    elif qtype == 'open':\n        questions_list = Question.objects.is_open().order_by('pk')",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "staffIndexPartial",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def staffIndexPartial(request, qtype):\n    if qtype == 'drafted':\n        questions_list = Question.objects.is_draft().order_by('pk')\n    elif qtype == 'open':\n        questions_list = Question.objects.is_open().order_by('pk')\n    elif qtype == 'closed':\n        questions_list = Question.objects.is_closed().order_by('pk')\n    else:\n        raise RuntimeError('No valid qtype')\n    choices_list = Choice.objects.all()",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def question(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    choices = question.choice_set.all()\n    voting_rights = VotingRight.objects.all()\n    users = User.objects.filter(votingright__in=voting_rights).distinct().order_by('username')\n    votes = Vote.objects.filter(choice__question=question)\n    if question.is_draft():\n        status = 'draft'\n    elif question.is_open():\n        status = 'open'",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "staff_setResult",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def staff_setResult(request, question_pk, result):\n    question = get_object_or_404(Question, pk=question_pk)\n    question.vote_result = result\n    question.save()\n    return HttpResponseRedirect(reverse('poll:question', args=(question.pk, )))\n@login_required\n@permission_required('ipho_core.is_staff')\ndef staff_setImpl(request, question_pk, impl):\n    question = get_object_or_404(Question, pk=question_pk)\n    question.implementation = impl",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "staff_setImpl",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def staff_setImpl(request, question_pk, impl):\n    question = get_object_or_404(Question, pk=question_pk)\n    question.implementation = impl\n    question.save()\n    return HttpResponseRedirect(reverse('poll:question', args=(question.pk, )))\n@login_required\n@permission_required('ipho_core.is_staff')\n@ensure_csrf_cookie\ndef question_large(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "question_large",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def question_large(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    choices = question.choice_set.all()\n    if question.is_draft():\n        status = 'draft'\n    elif question.is_open():\n        status = 'open'\n    else:\n        status = 'closed'\n    feedbacks = question.feedbacks.all().annotate(",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "addQuestion",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def addQuestion(request):\n    if not request.is_ajax:\n        raise Exception('TODO: implement small template page for handling without Ajax.')\n    ChoiceFormset = inlineformset_factory(\n        Question, Choice, form=ChoiceForm, extra=1, can_delete=False, min_num=2, validate_min=True\n    )\n    if request.method == 'POST':\n        questionForm = QuestionForm(request.POST, prefix='question')\n        choiceFormset = ChoiceFormset(request.POST, prefix='choices')\n    else:",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "editQuestion",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def editQuestion(request, question_pk):\n    ChoiceFormset = inlineformset_factory(Question, Choice, form=ChoiceForm, extra=2, can_delete=True)\n    question = get_object_or_404(Question, pk=question_pk)\n    if request.method == 'POST':\n        questionForm = QuestionForm(request.POST, instance=question, prefix='question')\n        choiceFormset = ChoiceFormset(request.POST, instance=question, prefix='choices')\n    else:\n        questionForm = QuestionForm(instance=question, prefix='question')\n        choiceFormset = ChoiceFormset(instance=question, prefix='choices')\n    if questionForm.is_valid() and choiceFormset.is_valid():",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "deleteQuestion",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def deleteQuestion(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    choice_list = Choice.objects.filter(question=question)\n    # try:\n    question.delete()\n    for choice in choice_list:\n        choice.delete()\n    # except Exception:\n    #     return JsonResponse({\n    #                 'success'   : False,",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "setEndDate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def setEndDate(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    endDateForm = EndDateForm(request.POST or None, instance=question)\n    if endDateForm.is_valid():\n        tzuser = tz.tzoffset(None, endDateForm.cleaned_data['utc_offset'] * 60)\n        end_date = endDateForm.cleaned_data['end_date']\n        end_date = end_date.replace(tzinfo=None)\n        end_date = end_date.replace(tzinfo=tzuser)\n        question = endDateForm.save(commit=False)\n        question.end_date = timezone.localtime(end_date)",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "removeEndDate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def removeEndDate(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    if not question.is_open():\n        raise Http404(\"Action not allowed\")\n    else:\n        question.end_date = None\n        question.save()\n        return HttpResponseRedirect(reverse('poll:staffIndex'))\n@login_required\n@permission_required('ipho_core.is_staff')",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "closeQuestion",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def closeQuestion(request, question_pk):\n    question = get_object_or_404(Question, pk=question_pk)\n    if not question.is_open():\n        raise Http404(\"Action not allowed\")\n    else:\n        question.end_date = timezone.now()\n        question.save()\n        return HttpResponseRedirect(reverse('poll:staffIndex'))\n#delegation views\n@login_required",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "voterIndex",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def voterIndex(request, err_id=None):\n    user = request.user\n    if len(user.votingright_set.all()) <= 0:\n        raise PermissionDenied\n    unvoted_questions_list = Question.objects.not_voted_upon_by(user)\n    formset_html_dict = {}\n    just_voted = ()\n    for question in unvoted_questions_list:\n        # gather voting_rights that could still be used\n        voting_rights = user.votingright_set.exclude(vote__question=question).order_by('name')",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "voted",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_poll.views",
        "description": "src.components.Exam.exam_tools.ipho_poll.views",
        "peekOfCode": "def voted(request):\n    return render(request, 'ipho_poll/voted.html')",
        "detail": "src.components.Exam.exam_tools.ipho_poll.views",
        "documentation": {}
    },
    {
        "label": "PrintForm",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_print.forms",
        "description": "src.components.Exam.exam_tools.ipho_print.forms",
        "peekOfCode": "class PrintForm(forms.Form):\n    file = forms.FileField(validators=[build_extension_validator(['.pdf'])], label='PDF document to print')\n    queue = forms.ChoiceField(choices=[], label='Print queue to use')\n    duplex = forms.ChoiceField(required=False, initial='None', choices=[('None', 'No'), ('DuplexNoTumble', 'Yes')])\n    color = forms.ChoiceField(required=False, initial='Colour', choices=[('Colour', 'Yes'), ('Gray', 'No')])\n    staple = forms.ChoiceField(required=False, initial='None', choices=[('None', 'No'), ('1PLU', 'Yes')])\n    def __init__(self, *args, **kwargs):\n        queue_list = kwargs.pop('queue_list')\n        self.enable_opts = kwargs.pop('enable_opts') if 'enable_opts' in kwargs else False\n        super(PrintForm, self).__init__(*args, **kwargs)",
        "detail": "src.components.Exam.exam_tools.ipho_print.forms",
        "documentation": {}
    },
    {
        "label": "build_extension_validator",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.forms",
        "description": "src.components.Exam.exam_tools.ipho_print.forms",
        "peekOfCode": "def build_extension_validator(valid_extensions):\n    def validate_file_extension(value):\n        import os\n        ext = os.path.splitext(value.name)[1]  # [0] returns path+filename\n        # valid_extensions = ['.svg', '.svgz']\n        if not ext in valid_extensions:\n            raise ValidationError(u'Unsupported file extension.')\n    return validate_file_extension\nclass PrintForm(forms.Form):\n    file = forms.FileField(validators=[build_extension_validator(['.pdf'])], label='PDF document to print')",
        "detail": "src.components.Exam.exam_tools.ipho_print.forms",
        "documentation": {}
    },
    {
        "label": "PrinterError",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "class PrinterError(RuntimeError):\n    def __init__(self, msg):\n        self.msg = msg\n        super(PrinterError, self).__init__('Print error: ' + self.msg)\ndef allowed_choices(user):\n    return [(k, q['name']) for k, q in sorted(PRINTER_QUEUES.items()) if user.has_perm(q['required_perm'])]\ndef allowed_opts(queue):\n    return PRINTER_QUEUES[queue]['opts']\ndef default_opts():\n    try:",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "allowed_choices",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "def allowed_choices(user):\n    return [(k, q['name']) for k, q in sorted(PRINTER_QUEUES.items()) if user.has_perm(q['required_perm'])]\ndef allowed_opts(queue):\n    return PRINTER_QUEUES[queue]['opts']\ndef default_opts():\n    try:\n        opts = getattr(settings, 'PRINTER_DEFAULT_GLOBAL_OPTS')\n    except AttributeError:\n        opts = {'Duplex': 'None', 'ColourModel': 'Gray', 'Staple': 'None'}\n    return opts",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "allowed_opts",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "def allowed_opts(queue):\n    return PRINTER_QUEUES[queue]['opts']\ndef default_opts():\n    try:\n        opts = getattr(settings, 'PRINTER_DEFAULT_GLOBAL_OPTS')\n    except AttributeError:\n        opts = {'Duplex': 'None', 'ColourModel': 'Gray', 'Staple': 'None'}\n    return opts\ndef delegation_opts():\n    try:",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "default_opts",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "def default_opts():\n    try:\n        opts = getattr(settings, 'PRINTER_DEFAULT_GLOBAL_OPTS')\n    except AttributeError:\n        opts = {'Duplex': 'None', 'ColourModel': 'Gray', 'Staple': 'None'}\n    return opts\ndef delegation_opts():\n    try:\n        opts = getattr(settings, 'PRINTER_DELEGATION_OPTS')\n    except AttributeError:",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "delegation_opts",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "def delegation_opts():\n    try:\n        opts = getattr(settings, 'PRINTER_DELEGATION_OPTS')\n    except AttributeError:\n        opts = {'Duplex': 'DuplexNoTumble', 'ColourModel': 'Gray', 'Staple': 'None'}\n    return opts\ndef send2queue(file, queue, user=None, user_opts={}, title=None):\n    url = 'http://{host}/print/{queue}'.format(**PRINTER_QUEUES[queue])\n    files = {'file': (urllib.parse.quote(os.path.basename(file.name)), file, 'application/pdf')}\n    headers = {'Authorization': 'IPhOToken {auth_token}'.format(**PRINTER_QUEUES[queue])}",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "send2queue",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "def send2queue(file, queue, user=None, user_opts={}, title=None):\n    url = 'http://{host}/print/{queue}'.format(**PRINTER_QUEUES[queue])\n    files = {'file': (urllib.parse.quote(os.path.basename(file.name)), file, 'application/pdf')}\n    headers = {'Authorization': 'IPhOToken {auth_token}'.format(**PRINTER_QUEUES[queue])}\n    data = {}\n    if user is not None:\n        data['user'] = user.username\n    opts = deepcopy(default_opts())\n    opts.update(user_opts)\n    al_opts = allowed_opts(queue)",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "SUCCESS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "SUCCESS = 0\nFAILED = 1\nPRINTER_QUEUES = getattr(settings, 'PRINTER_QUEUES')\nclass PrinterError(RuntimeError):\n    def __init__(self, msg):\n        self.msg = msg\n        super(PrinterError, self).__init__('Print error: ' + self.msg)\ndef allowed_choices(user):\n    return [(k, q['name']) for k, q in sorted(PRINTER_QUEUES.items()) if user.has_perm(q['required_perm'])]\ndef allowed_opts(queue):",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "FAILED",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "FAILED = 1\nPRINTER_QUEUES = getattr(settings, 'PRINTER_QUEUES')\nclass PrinterError(RuntimeError):\n    def __init__(self, msg):\n        self.msg = msg\n        super(PrinterError, self).__init__('Print error: ' + self.msg)\ndef allowed_choices(user):\n    return [(k, q['name']) for k, q in sorted(PRINTER_QUEUES.items()) if user.has_perm(q['required_perm'])]\ndef allowed_opts(queue):\n    return PRINTER_QUEUES[queue]['opts']",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "PRINTER_QUEUES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.printer",
        "description": "src.components.Exam.exam_tools.ipho_print.printer",
        "peekOfCode": "PRINTER_QUEUES = getattr(settings, 'PRINTER_QUEUES')\nclass PrinterError(RuntimeError):\n    def __init__(self, msg):\n        self.msg = msg\n        super(PrinterError, self).__init__('Print error: ' + self.msg)\ndef allowed_choices(user):\n    return [(k, q['name']) for k, q in sorted(PRINTER_QUEUES.items()) if user.has_perm(q['required_perm'])]\ndef allowed_opts(queue):\n    return PRINTER_QUEUES[queue]['opts']\ndef default_opts():",
        "detail": "src.components.Exam.exam_tools.ipho_print.printer",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.urls",
        "description": "src.components.Exam.exam_tools.ipho_print.urls",
        "peekOfCode": "app_name = 'print'\nurlpatterns = [\n    url(r'^$', views.main, name='main'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_print.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.urls",
        "description": "src.components.Exam.exam_tools.ipho_print.urls",
        "peekOfCode": "urlpatterns = [\n    url(r'^$', views.main, name='main'),\n]",
        "detail": "src.components.Exam.exam_tools.ipho_print.urls",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.ipho_print.views",
        "description": "src.components.Exam.exam_tools.ipho_print.views",
        "peekOfCode": "def main(request):\n    ctx = {}\n    messages = []\n    queue_list = printer.allowed_choices(request.user)\n    enable_opts = request.user.has_perm('ipho_core.is_printstaff')\n    success = False\n    form = PrintForm(request.POST or None, request.FILES or None, queue_list=queue_list, enable_opts=enable_opts)\n    if form.is_valid():\n        print(form.cleaned_data)\n        try:",
        "detail": "src.components.Exam.exam_tools.ipho_print.views",
        "documentation": {}
    },
    {
        "label": "PRINTER_QUEUES",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.ipho_print.views",
        "description": "src.components.Exam.exam_tools.ipho_print.views",
        "peekOfCode": "PRINTER_QUEUES = getattr(settings, 'PRINTER_QUEUES')\n@login_required\ndef main(request):\n    ctx = {}\n    messages = []\n    queue_list = printer.allowed_choices(request.user)\n    enable_opts = request.user.has_perm('ipho_core.is_printstaff')\n    success = False\n    form = PrintForm(request.POST or None, request.FILES or None, queue_list=queue_list, enable_opts=enable_opts)\n    if form.is_valid():",
        "detail": "src.components.Exam.exam_tools.ipho_print.views",
        "documentation": {}
    },
    {
        "label": "clean_old_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.backups_clean",
        "description": "src.components.Exam.exam_tools.scripts.backups_clean",
        "peekOfCode": "def clean_old_backups():\n    storage = Storage()\n    keep_delta = datetime.timedelta(hours=13)\n    files = storage.list_backups()\n    now = datetime.datetime.now()\n    files = sorted(files, key=utils.filename_to_date, reverse=True)\n    files_to_delete = [fi for fi in files if (now - utils.filename_to_date(fi)) > keep_delta]\n    logger.info('Deleting {} files on {}. keep_delta={}'.format(len(files_to_delete), len(files), keep_delta))\n    for filename in files_to_delete:\n        logger.info('Removing ' + filename)",
        "detail": "src.components.Exam.exam_tools.scripts.backups_clean",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.backups_clean",
        "description": "src.components.Exam.exam_tools.scripts.backups_clean",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.conf import settings\nimport datetime\nfrom dbbackup import settings as dbbackup_settings\nfrom dbbackup import utils\nfrom dbbackup.storage import Storage, StorageError\nimport logging\nlogger = logging.getLogger('exam_tools.backups')",
        "detail": "src.components.Exam.exam_tools.scripts.backups_clean",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.backups_clean",
        "description": "src.components.Exam.exam_tools.scripts.backups_clean",
        "peekOfCode": "logger = logging.getLogger('exam_tools.backups')\ndef clean_old_backups():\n    storage = Storage()\n    keep_delta = datetime.timedelta(hours=13)\n    files = storage.list_backups()\n    now = datetime.datetime.now()\n    files = sorted(files, key=utils.filename_to_date, reverse=True)\n    files_to_delete = [fi for fi in files if (now - utils.filename_to_date(fi)) > keep_delta]\n    logger.info('Deleting {} files on {}. keep_delta={}'.format(len(files_to_delete), len(files), keep_delta))\n    for filename in files_to_delete:",
        "detail": "src.components.Exam.exam_tools.scripts.backups_clean",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.character_count",
        "description": "src.components.Exam.exam_tools.scripts.character_count",
        "peekOfCode": "def get_count(translation):\n    def get_text(xml_element):\n        res = xml_element.text or u''\n        for c in xml_element.getchildren():\n            res += get_text(c)\n        return res\n    text = get_text(qml.make_qml(translation).make_xml())\n    for token in REPLACE_TOKENS:\n        text = re.sub(token, u'', text)\n    return len(text)",
        "detail": "src.components.Exam.exam_tools.scripts.character_count",
        "documentation": {}
    },
    {
        "label": "count_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.character_count",
        "description": "src.components.Exam.exam_tools.scripts.character_count",
        "peekOfCode": "def count_all(language):\n    translations = TranslationNode.objects.filter(question__exam__name='Theory', question__code='Q', language=language)\n    return sum(get_count(t) for t in translations)\ndef get_submitted_langs():\n    submissions = StudentSubmission.objects.filter(exam__name='Theory')\n    return set(s.language for s in submissions)\nif __name__ == '__main__':\n    langs = get_submitted_langs()\n    Result = collections.namedtuple('Result', ['lang', 'count'])\n    res = [Result(lang=l, count=count_all(l)) for l in langs]",
        "detail": "src.components.Exam.exam_tools.scripts.character_count",
        "documentation": {}
    },
    {
        "label": "get_submitted_langs",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.character_count",
        "description": "src.components.Exam.exam_tools.scripts.character_count",
        "peekOfCode": "def get_submitted_langs():\n    submissions = StudentSubmission.objects.filter(exam__name='Theory')\n    return set(s.language for s in submissions)\nif __name__ == '__main__':\n    langs = get_submitted_langs()\n    Result = collections.namedtuple('Result', ['lang', 'count'])\n    res = [Result(lang=l, count=count_all(l)) for l in langs]\n    for x in sorted(res, key=operator.attrgetter('count')):\n        print('{0.lang}: {0.count}'.format(x))",
        "detail": "src.components.Exam.exam_tools.scripts.character_count",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.character_count",
        "description": "src.components.Exam.exam_tools.scripts.character_count",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom ipho_exam.models import *\nfrom ipho_exam import qml\nREPLACE_TOKENS = ['<[^<>]*>', r'\\\\raisebox{[^{}]*}\\[[^\\[\\]]*\\]\\[[^\\[\\]]*\\]', r'\\\\vspace{[^{}]*}*']\ndef get_count(translation):\n    def get_text(xml_element):\n        res = xml_element.text or u''\n        for c in xml_element.getchildren():",
        "detail": "src.components.Exam.exam_tools.scripts.character_count",
        "documentation": {}
    },
    {
        "label": "REPLACE_TOKENS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.character_count",
        "description": "src.components.Exam.exam_tools.scripts.character_count",
        "peekOfCode": "REPLACE_TOKENS = ['<[^<>]*>', r'\\\\raisebox{[^{}]*}\\[[^\\[\\]]*\\]\\[[^\\[\\]]*\\]', r'\\\\vspace{[^{}]*}*']\ndef get_count(translation):\n    def get_text(xml_element):\n        res = xml_element.text or u''\n        for c in xml_element.getchildren():\n            res += get_text(c)\n        return res\n    text = get_text(qml.make_qml(translation).make_xml())\n    for token in REPLACE_TOKENS:\n        text = re.sub(token, u'', text)",
        "detail": "src.components.Exam.exam_tools.scripts.character_count",
        "documentation": {}
    },
    {
        "label": "compile_cover",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "def compile_cover():\n    cover = {'student': student, 'exam': exam, 'question': question, 'place': 'M439'}\n    body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n    question_pdf = _compile_tex(body, [])\n    bgenerator = iphocode.QuestionBarcodeGen(exam, question, student, qcode='C', suppress_code=True)\n    page = pdf.add_barcode(question_pdf, bgenerator)\n    with open('test_cover.pdf', 'wb') as pdf_file:\n        pdf_file.write(page)\ndef compile_question(qml_trans, pdf_name='test_question'):\n    ext_resources = []",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "compile_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "def compile_question(qml_trans, pdf_name='test_question'):\n    ext_resources = []\n    ext_resources.append(tex.TemplateExport(os.path.join(EVENT_TEMPLATE_PATH, 'tex_resources', 'ipho2016.cls')))\n    context = {\n        'polyglossia': language.polyglossia,\n        'polyglossia_options': language.polyglossia_options,\n        'font': fonts.ipho[language.font],\n        'extraheader': language.extraheader,\n        'lang_name': u'{} ({})'.format(language.name, 'Country'),\n        'exam_name': u'{}'.format(exam.name),",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "compile_blank",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "def compile_blank():\n    pages = 3\n    context = {\n        'polyglossia': 'english',\n        'polyglossia_options': '',\n        'font': fonts.ipho['notosans'],\n        'extraheader': '',\n        'exam_name': u'{}'.format(exam.name),\n        'code': u'W2',\n        'title': u'{} - {}'.format(exam.name, question.name),",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "compile_graph",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "def compile_graph():\n    pages = 3\n    context = {\n        'polyglossia': 'english',\n        'polyglossia_options': '',\n        'font': fonts.ipho['notosans'],\n        'extraheader': '',\n        'exam_name': u'{}'.format(exam.name),\n        'code': u'W2',\n        'title': u'{} - {}'.format(exam.name, question.name),",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.shortcuts import get_object_or_404\nfrom django.http import HttpRequest\nfrom django.core.urlresolvers import reverse\nfrom crispy_forms.utils import render_crispy_form\nfrom django.template.loader import render_to_string\nfrom ipho_exam import qml, tex, pdf, qquery, fonts, iphocode",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\nexam = Exam()\nexam.code = 'E'\nexam.name = 'Test template'\nquestion = Question()\nquestion.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "exam",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "exam = Exam()\nexam.code = 'E'\nexam.name = 'Test template'\nquestion = Question()\nquestion.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "exam.code",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "exam.code = 'E'\nexam.name = 'Test template'\nquestion = Question()\nquestion.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "exam.name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "exam.name = 'Test template'\nquestion = Question()\nquestion.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "question = Question()\nquestion.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "question.code",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "question.code = 'A'\nquestion.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "question.name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "question.name = 'Some question'\nquestion.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "question.position",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "question.position = 2\nstudent = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "student = Student()\nstudent.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "student.code",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "student.code = 'XYZ-S-3'\nstudent.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "student.first_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "student.first_name = 'Smart'\nstudent.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "student.last_name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "student.last_name = 'Student'\nlanguage = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language = Language()\nlanguage.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.name",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.name = u'Taiwanese'\nlanguage.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.font",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.font = 'notosanstc'\nlanguage.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.style",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.style = 'chinese'\nlanguage.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}\n考慮一個半徑\\(r_1\\)、厚度\\(h_1\\)的木頭圓柱體，在其內部某處嵌置有一個半徑\\(r_2\\)、厚度\\(h_2\\)的金屬圓盤，此圓盤的對稱軸\\(B\\)與木頭圓柱體的對稱軸\\(S\\)彼此平行，且圓盤到圓柱體頂部與底部兩個表面的距離相等。令對稱軸\\(S\\)與\\(B\\)的距離為\\(d\\)，木頭的密度為\\(\\rho_1\\)，金屬的密度為\\(\\rho_2 > \\rho_1\\)。木頭圓柱體加上內部金屬圓盤的總質量為\\(M\\)。",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.polyglossia_options",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.polyglossia_options = ''\nlanguage.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}\n考慮一個半徑\\(r_1\\)、厚度\\(h_1\\)的木頭圓柱體，在其內部某處嵌置有一個半徑\\(r_2\\)、厚度\\(h_2\\)的金屬圓盤，此圓盤的對稱軸\\(B\\)與木頭圓柱體的對稱軸\\(S\\)彼此平行，且圓盤到圓柱體頂部與底部兩個表面的距離相等。令對稱軸\\(S\\)與\\(B\\)的距離為\\(d\\)，木頭的密度為\\(\\rho_1\\)，金屬的密度為\\(\\rho_2 > \\rho_1\\)。木頭圓柱體加上內部金屬圓盤的總質量為\\(M\\)。\n在本題中，我們將圓柱體平放於地面上，使其可以左右自由滾動。圖1顯示它的側視圖與俯視圖。",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.polyglossia",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.polyglossia = 'custom'\nlanguage.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}\n考慮一個半徑\\(r_1\\)、厚度\\(h_1\\)的木頭圓柱體，在其內部某處嵌置有一個半徑\\(r_2\\)、厚度\\(h_2\\)的金屬圓盤，此圓盤的對稱軸\\(B\\)與木頭圓柱體的對稱軸\\(S\\)彼此平行，且圓盤到圓柱體頂部與底部兩個表面的距離相等。令對稱軸\\(S\\)與\\(B\\)的距離為\\(d\\)，木頭的密度為\\(\\rho_1\\)，金屬的密度為\\(\\rho_2 > \\rho_1\\)。木頭圓柱體加上內部金屬圓盤的總質量為\\(M\\)。\n在本題中，我們將圓柱體平放於地面上，使其可以左右自由滾動。圖1顯示它的側視圖與俯視圖。\n本題的目標是要求出金屬圓盤的尺寸與位置。",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "language.extraheader",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "language.extraheader = ''\n# Exported from Exam Tools\ndoc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}\n考慮一個半徑\\(r_1\\)、厚度\\(h_1\\)的木頭圓柱體，在其內部某處嵌置有一個半徑\\(r_2\\)、厚度\\(h_2\\)的金屬圓盤，此圓盤的對稱軸\\(B\\)與木頭圓柱體的對稱軸\\(S\\)彼此平行，且圓盤到圓柱體頂部與底部兩個表面的距離相等。令對稱軸\\(S\\)與\\(B\\)的距離為\\(d\\)，木頭的密度為\\(\\rho_1\\)，金屬的密度為\\(\\rho_2 > \\rho_1\\)。木頭圓柱體加上內部金屬圓盤的總質量為\\(M\\)。\n在本題中，我們將圓柱體平放於地面上，使其可以左右自由滾動。圖1顯示它的側視圖與俯視圖。\n本題的目標是要求出金屬圓盤的尺寸與位置。\n以下你要求你以已知量表示結果時，你可假設下列各量為已知量：",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "doc_content",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "doc_content = r\"\"\"\n\\begin{PR}{兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題兩個力學問題(10分)}{10}\n在開始作答之前，請先細讀另一信封袋內的「理論考試通用指引」。\n\\PT{A部分. 隱藏的圓盤 (3.5分)}{3.5}\n考慮一個半徑\\(r_1\\)、厚度\\(h_1\\)的木頭圓柱體，在其內部某處嵌置有一個半徑\\(r_2\\)、厚度\\(h_2\\)的金屬圓盤，此圓盤的對稱軸\\(B\\)與木頭圓柱體的對稱軸\\(S\\)彼此平行，且圓盤到圓柱體頂部與底部兩個表面的距離相等。令對稱軸\\(S\\)與\\(B\\)的距離為\\(d\\)，木頭的密度為\\(\\rho_1\\)，金屬的密度為\\(\\rho_2 > \\rho_1\\)。木頭圓柱體加上內部金屬圓盤的總質量為\\(M\\)。\n在本題中，我們將圓柱體平放於地面上，使其可以左右自由滾動。圖1顯示它的側視圖與俯視圖。\n本題的目標是要求出金屬圓盤的尺寸與位置。\n以下你要求你以已知量表示結果時，你可假設下列各量為已知量：\n\\begin{equation}\nr_1,~h_1,~\\rho_1,~\\rho_2, M~.\\end{equation}",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "F_C",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "F_C = 2 m v \\omega_{ss}  \\sin \\phi\\ ,\\end{equation}\n其中\\(\\phi\\)是物體的速度向量與轉動軸(或角速度向量)之間的夾角。柯氏力的方向和速度、轉動軸兩者都垂直，而此力的正負號可以用右手定則決定之。你在以下各題中，可以自行選擇一種方式來表達力。\n\\begin{QTF}{1.1}{B}{6}\n計算當質點落在太空站底面瞬間的水平速度\\(v_x\\)與相對於塔底的位移\\(d_x\\)(即相對於塔底的垂直距離)。你可以假設塔高度\\(H\\)相對小，因此下落加速度可以視為定值。你也可以假設\\(d_x \\ll H\\) 。\n\\end{QTF}\n為了得到好的結果，艾莉絲決定從更高的塔上進行實驗。她很驚訝地發現，質點在太空站底面的落點就在塔底部(塔腳)，亦即\\(d_x=0\\)。\n\\begin{QTF}{1.3}{B}{7}\n求能使\\(d_x=0\\)發生之塔的最小之高度。\n\\end{QTF}\n為了使包柏相信，艾莉絲願意進行最後一次的嘗試。她想利用她的彈簧振盪器，以彰顯柯氏力的影響。為達此目的，她改變了原來的實驗裝置方式：她將彈簧連接到一個圓環，此圓環可在一水平直桿上沿\\(x\\)方向作無摩擦的滑動；彈簧本身則沿著\\(y\\)方向振盪 。直桿與太空站底面平行，且與太空站的旋轉軸垂直。因此， \\(xy\\) 平面與旋轉軸垂直，而\\(y\\)軸的方向筆直指向太空站的旋轉中心。",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "answer_content",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "answer_content = r\"\"\"\n\\begin{PR}{Two Problems in Mechanics (10 points)}{10}\n\\PT{Part A. The Hidden Disk (3.5 points)}{3.5}\n\\begin{QSA}{0.8}{A}{1}{}\n\\(b =\\)\n\\end{QSA}",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "\\(I_S",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "\\(I_S = \\)\n\\end{QSA}\n\\begin{QSA}{1.1}{A}{5}{}\n\\(w_2 =\\)",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "\\(r_2",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "\\(r_2 = \\)\n\\end{QSA}\n~ \\clearpage\n\\PT{Part B. Rotating Space Station (6.5 points)}{6.5}\n\\begin{QSA}{0.5}{B}{1}{}\n\\(\\omega_{ss} =\\)",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "\\(\\omega",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "\\(\\omega = \\)\n\\end{QSA}\n\\begin{QSA}{0.8}{B}{4}{}\n\\(g_E(h)=\\)",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "\\(\\tilde{\\omega}_E",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.compile_example",
        "description": "src.components.Exam.exam_tools.scripts.compile_example",
        "peekOfCode": "\\(\\tilde{\\omega}_E = \\)\n\\end{QSA}\n\\begin{QSA}{0.3}{B}{5}{}\n\\(R =\\)",
        "detail": "src.components.Exam.exam_tools.scripts.compile_example",
        "documentation": {}
    },
    {
        "label": "compile_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "description": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "peekOfCode": "def compile_all():\n    for delegation in Delegation.objects.exclude(name=settings.OFFICIAL_DELEGATION):\n        students = Student.objects.filter(delegation=delegation).values('id', 'pk', 'code', 'first_name', 'last_name')\n        vid = 'F'\n        points_per_student = []\n        for student in students:\n            stud_exam_points_list = Marking.objects.filter(\n                version=vid, student=student['id']\n            ).values('marking_meta__question').annotate(exam_points=Sum('points')).values('exam_points').order_by(\n                'marking_meta__question__exam', 'marking_meta__question'",
        "detail": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "description": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nfrom io import open \nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.shortcuts import get_object_or_404\nfrom django.http import HttpRequest\nfrom django.core.urlresolvers import reverse\nfrom django.core.context_processors import csrf\nfrom crispy_forms.utils import render_crispy_form",
        "detail": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "description": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\ndef compile_all():\n    for delegation in Delegation.objects.exclude(name=settings.OFFICIAL_DELEGATION):\n        students = Student.objects.filter(delegation=delegation).values('id', 'pk', 'code', 'first_name', 'last_name')\n        vid = 'F'\n        points_per_student = []\n        for student in students:\n            stud_exam_points_list = Marking.objects.filter(\n                version=vid, student=student['id']",
        "detail": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "description": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\ndef compile_all():\n    for delegation in Delegation.objects.exclude(name=settings.OFFICIAL_DELEGATION):\n        students = Student.objects.filter(delegation=delegation).values('id', 'pk', 'code', 'first_name', 'last_name')\n        vid = 'F'\n        points_per_student = []\n        for student in students:\n            stud_exam_points_list = Marking.objects.filter(\n                version=vid, student=student['id']\n            ).values('marking_meta__question').annotate(exam_points=Sum('points')).values('exam_points').order_by(",
        "detail": "src.components.Exam.exam_tools.scripts.country_pdf_points",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "description": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom ipho_exam.models import *\nexams = Exam.objects.all()\nfor exam in Exam.objects.all():\n    for delegation in Delegation.objects.all():\n        for action, _ in ExamAction.ACTION_CHOICES:\n            exam_action, _ = ExamAction.objects.get_or_create(exam=exam, delegation=delegation, action=action)",
        "detail": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "documentation": {}
    },
    {
        "label": "exams",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "description": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "peekOfCode": "exams = Exam.objects.all()\nfor exam in Exam.objects.all():\n    for delegation in Delegation.objects.all():\n        for action, _ in ExamAction.ACTION_CHOICES:\n            exam_action, _ = ExamAction.objects.get_or_create(exam=exam, delegation=delegation, action=action)",
        "detail": "src.components.Exam.exam_tools.scripts.create_all_examactions",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "description": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "peekOfCode": "def main(input):\n    reader = csv.DictReader(input)\n    for i, row in enumerate(reader):\n        delegation = Delegation(name=row['Country code'], country=row['Country name'])\n        nk = delegation.natural_key()\n        try:\n            current_delegation = Delegation.objects.get_by_natural_key(*nk)\n            print(row['Country code'], '...', 'already present. Skip.')\n            continue\n        except Delegation.DoesNotExist:",
        "detail": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "description": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Delegation, Student\ndef main(input):\n    reader = csv.DictReader(input)\n    for i, row in enumerate(reader):\n        delegation = Delegation(name=row['Country code'], country=row['Country name'])\n        nk = delegation.natural_key()",
        "detail": "src.components.Exam.exam_tools.scripts.create_delegations_demo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "description": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "peekOfCode": "def main(input, autologins):\n    reader = csv.DictReader(input)\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):\n        delegation = Delegation.objects.get(name=row['Country code'])\n        user = User(username=row['Country code'], first_name=row['Country name'])\n        try:\n            db_user = User.objects.get(username=row['Country code'])\n            user.pk = db_user.pk\n        except User.DoesNotExist:",
        "detail": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "description": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Delegation, Student, User, Group, AutoLogin\ndef main(input, autologins):\n    reader = csv.DictReader(input)\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):\n        delegation = Delegation.objects.get(name=row['Country code'])",
        "detail": "src.components.Exam.exam_tools.scripts.create_demo_users",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.create_test_students",
        "description": "src.components.Exam.exam_tools.scripts.create_test_students",
        "peekOfCode": "def main(input):\n    csv_reader = csv.reader(input)\n    all_delegations = Delegation.objects.all()\n    for i, row in enumerate(csv_reader):\n        delegation = all_delegations[old_div(i, 5)]\n        code = '{}-S-{}'.format(delegation.name, i % 5 + 1)\n        student = Student(code=code, first_name=row[2], last_name=row[3], delegation=delegation)\n        student.save()\n        if old_div((i + 1), 5) >= len(all_delegations):\n            break",
        "detail": "src.components.Exam.exam_tools.scripts.create_test_students",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_test_students",
        "description": "src.components.Exam.exam_tools.scripts.create_test_students",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Delegation, Student\ndef main(input):\n    csv_reader = csv.reader(input)\n    all_delegations = Delegation.objects.all()\n    for i, row in enumerate(csv_reader):\n        delegation = all_delegations[old_div(i, 5)]",
        "detail": "src.components.Exam.exam_tools.scripts.create_test_students",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.create_translator",
        "description": "src.components.Exam.exam_tools.scripts.create_translator",
        "peekOfCode": "def main(input):\n    reader = csv.DictReader(input)\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):\n        name = 'Tr-' + row['First name'][0] + row['Last name'][0]\n        delegation, _ = Delegation.objects.get_or_create(\n            name=name, defaults={'country': '{} {}'.format(row['First name'], row['Last name'])}\n        )\n        user, created = User.objects.get_or_create(\n            username=row['Username'],",
        "detail": "src.components.Exam.exam_tools.scripts.create_translator",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_translator",
        "description": "src.components.Exam.exam_tools.scripts.create_translator",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Delegation, Student, User, Group, AutoLogin\nfrom ipho_exam.models import Language, TranslationNode, Exam\ndef main(input):\n    reader = csv.DictReader(input)\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):",
        "detail": "src.components.Exam.exam_tools.scripts.create_translator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "description": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "peekOfCode": "def main():\n    delegations = Delegation.objects.all()\n    for delegation in delegations:\n        VotingRight.objects.create(user=delegation.members.all()[0], name=\"Delegate 1\")\n        VotingRight.objects.create(user=delegation.members.all()[0], name=\"Delegate 2\")\nif __name__ == '__main__':\n    main()",
        "detail": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "description": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nroot_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_core.models import Delegation\nfrom django.contrib.auth.models import User\nfrom ipho_poll.models import VotingRight\ndef main():",
        "detail": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "description": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "peekOfCode": "root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_core.models import Delegation\nfrom django.contrib.auth.models import User\nfrom ipho_poll.models import VotingRight\ndef main():\n    delegations = Delegation.objects.all()\n    for delegation in delegations:",
        "detail": "src.components.Exam.exam_tools.scripts.create_voting_rights",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "class Data:\n    def __init__(self, source_folder, store_folder):\n        self.source_folder = source_folder\n        self.store_folder = store_folder\n        self.new_objects = []\n    def generate(self, prefix=''):\n        pass\n    def load(self, prefix='', select=False, select_only=False):\n        pass\n    def dump(self, prefix='', select=False, select_only=False):",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "SingleTableData",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "class SingleTableData(Data):\n    def __init__(self, index, model, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.index = index\n        self.model = model\n    @staticmethod\n    def get_table_module(model):\n        return model.__module__.split('.')[-2]\n    @staticmethod\n    def get_table_name(model):",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "ConditionSingleTableData",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "class ConditionSingleTableData(SingleTableData):\n    def __init__(self, index, model, name, condition, *args, **kwargs):\n        super().__init__(index, model, *args, **kwargs)\n        self.name = name\n        self.condition = condition\n    @property\n    def table_module(self):\n        return self.get_table_module(self.model)\n    @property\n    def table_name(self):",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "MultiTableData",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "class MultiTableData(SingleTableData):\n    def __init__(self, index, models, name, *args, **kwargs):\n        super().__init__(index, '', *args, **kwargs)\n        self.models = models\n        self.name = name\n    @property\n    def tables(self):\n        return ['{}.{}'.format(\n            self.get_table_module(model),\n            self.get_table_name(model)) for model in self.models]",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "ConditionMultiTableData",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "class ConditionMultiTableData(MultiTableData):\n    def __init__(self, index, models, name, conditions, *args, **kwargs):\n        super().__init__(index, models, name, *args, **kwargs)\n        self.conditions = conditions\n    @property\n    def table_module(self):\n        return self.get_table_module(self.model)\n    @property\n    def table_name(self):\n        return self.name",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "redirect_stdout",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def redirect_stdout(fn):\n    old_stdout = sys.stdout\n    with open(fn, 'w') as f:\n        sys.stdout = f\n        yield\n        sys.stdout = old_stdout\nwith redirect_stdout(os.devnull):\n    import django\n    django.setup()\nimport django.contrib.auth.models",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "execute_subprocess",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):\n        stdout = open(stdout, 'w')\n    subprocess.run(\n        args,\n        stdin=subprocess.DEVNULL,\n        stderr=subprocess.DEVNULL,\n        stdout=stdout).check_returncode()",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "flush_database",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def flush_database():\n    execute_subprocess(base_manage_args + ['flush', '--noinput'])\nclass Data:\n    def __init__(self, source_folder, store_folder):\n        self.source_folder = source_folder\n        self.store_folder = store_folder\n        self.new_objects = []\n    def generate(self, prefix=''):\n        pass\n    def load(self, prefix='', select=False, select_only=False):",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def generate(data_elements, prefix=''):\n    flush_database()\n    for el in data_elements:\n        el.generate(prefix)\ndef load(data_elements, prefix='', select=False, select_only=False):\n    for el in data_elements:\n        el.load(prefix, select, select_only)\ndef dump(data_elements, prefix='', select=False, select_only=False):\n    for el in data_elements:\n        el.dump(prefix, select, select_only)",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def load(data_elements, prefix='', select=False, select_only=False):\n    for el in data_elements:\n        el.load(prefix, select, select_only)\ndef dump(data_elements, prefix='', select=False, select_only=False):\n    for el in data_elements:\n        el.dump(prefix, select, select_only)\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description='Generate data, load and/or dump it to/from database. '\\\n            'WARNING: this script may flush the database before loading. '\\",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "def dump(data_elements, prefix='', select=False, select_only=False):\n    for el in data_elements:\n        el.dump(prefix, select, select_only)\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description='Generate data, load and/or dump it to/from database. '\\\n            'WARNING: this script may flush the database before loading. '\\\n            'All previous data would be lost!')\n    #parser.add_argument(\n    #    '-p', '--passwords', action='store_true',",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\n@contextlib.contextmanager\ndef redirect_stdout(fn):\n    old_stdout = sys.stdout\n    with open(fn, 'w') as f:\n        sys.stdout = f\n        yield\n        sys.stdout = old_stdout\nwith redirect_stdout(os.devnull):\n    import django",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "demo_input_folder",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "demo_input_folder = 'data/demo_input'\ndemo_output_folder = 'data/demo'\nbase_manage_args = ['python', 'manage.py']\nbase_manage_loaddata_args = base_manage_args + ['loaddata']\nbase_manage_dumpdata_args = base_manage_args + [\n    'dumpdata', '--natural-foreign', '--natural-primary', '--indent=2']\nObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "demo_output_folder",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "demo_output_folder = 'data/demo'\nbase_manage_args = ['python', 'manage.py']\nbase_manage_loaddata_args = base_manage_args + ['loaddata']\nbase_manage_dumpdata_args = base_manage_args + [\n    'dumpdata', '--natural-foreign', '--natural-primary', '--indent=2']\nObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "base_manage_args",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "base_manage_args = ['python', 'manage.py']\nbase_manage_loaddata_args = base_manage_args + ['loaddata']\nbase_manage_dumpdata_args = base_manage_args + [\n    'dumpdata', '--natural-foreign', '--natural-primary', '--indent=2']\nObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):\n        stdout = open(stdout, 'w')",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "base_manage_loaddata_args",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "base_manage_loaddata_args = base_manage_args + ['loaddata']\nbase_manage_dumpdata_args = base_manage_args + [\n    'dumpdata', '--natural-foreign', '--natural-primary', '--indent=2']\nObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):\n        stdout = open(stdout, 'w')\n    subprocess.run(",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "base_manage_dumpdata_args",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "base_manage_dumpdata_args = base_manage_args + [\n    'dumpdata', '--natural-foreign', '--natural-primary', '--indent=2']\nObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):\n        stdout = open(stdout, 'w')\n    subprocess.run(\n        args,",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "ObjectStore",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.data_api",
        "description": "src.components.Exam.exam_tools.scripts.data_api",
        "peekOfCode": "ObjectStore = collections.namedtuple('ObjectStore', ['object', 'existed'])\ndef execute_subprocess(args, stdout=None):\n    if stdout is None:\n        stdout = subprocess.DEVNULL\n    elif isinstance(stdout, str):\n        stdout = open(stdout, 'w')\n    subprocess.run(\n        args,\n        stdin=subprocess.DEVNULL,\n        stderr=subprocess.DEVNULL,",
        "detail": "src.components.Exam.exam_tools.scripts.data_api",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.delegation_fixture_from_csv",
        "description": "src.components.Exam.exam_tools.scripts.delegation_fixture_from_csv",
        "peekOfCode": "def parse(input):\n    indata = csv.reader(input)\n    data = []\n    for row in indata:\n        entry = {}\n        entry['model'] = 'ipho_core.delegation'\n        entry['fields'] = {\n            'name': row[1],\n            'country': row[0],\n        }",
        "detail": "src.components.Exam.exam_tools.scripts.delegation_fixture_from_csv",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, stream=stream\n    )\ndef save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "save_with_pk",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "def save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=False, use_natural_primary_keys=False, stream=stream\n    )\ndef serialize(objs, with_pk):\n    ss = StringIO()\n    if with_pk:\n        save_with_pk(objs, ss)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "serialize",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "def serialize(objs, with_pk):\n    ss = StringIO()\n    if with_pk:\n        save_with_pk(objs, ss)\n    else:\n        save(objs, ss)\n    return ss.getvalue()\norig_exam = 'Experiment - 2016'\ndest_exam = 'Experiment - Short'\nall_data = []",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.core import serializers\nfrom ipho_exam.models import *\nimport json\nfrom io import StringIO\ndef save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "orig_exam",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "orig_exam = 'Experiment - 2016'\ndest_exam = 'Experiment - Short'\nall_data = []\nexams = Exam.objects.filter(name=orig_exam)\ns = serialize(exams, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "dest_exam",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "dest_exam = 'Experiment - Short'\nall_data = []\nexams = Exam.objects.filter(name=orig_exam)\ns = serialize(exams, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "all_data",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "all_data = []\nexams = Exam.objects.filter(name=orig_exam)\ns = serialize(exams, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "exams",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "exams = Exam.objects.filter(name=orig_exam)\ns = serialize(exams, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = serialize(exams, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nquestions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "questions = Question.objects.filter(exam=exams)\ns = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = serialize(questions, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\nnodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "nodes = VersionNode.objects.filter(question=questions).order_by('-version')\ns = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = serialize(nodes, with_pk=False)\ns = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "description": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "peekOfCode": "s = s.replace(orig_exam, dest_exam)\nall_data += json.loads(s)\njson.dump(all_data, open('duplicate_question.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.duplicate_exam",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, stream=stream\n    )\ndef save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "save_with_pk",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "def save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=False, use_natural_primary_keys=False, stream=stream\n    )\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nprint('Exporting data for exams:', exams)\nquestions = Question.objects.all().filter(exam__in=exams)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nsys.path.append(\".\")\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.core import serializers\nfrom ipho_exam.models import *\nimport json\nfrom io import StringIO\ndef save(objs, stream):",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "exams",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "exams = Exam.objects.all()\nprint('Exporting data for exams:', exams)\nquestions = Question.objects.all().filter(exam__in=exams)\nprint('Exporting data for questions:', questions)\nlanguages = Language.objects.exclude(delegation__name__in=[settings.OFFICIAL_DELEGATION]\n                                     ).exclude(delegation__name__contains='-')\nsave(languages, '037_delegation_langs.json')\nnodes = TranslationNode.objects.filter(question__in=questions, language__in=languages)\nss = StringIO()\nsave(nodes, ss)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "questions = Question.objects.all().filter(exam__in=exams)\nprint('Exporting data for questions:', questions)\nlanguages = Language.objects.exclude(delegation__name__in=[settings.OFFICIAL_DELEGATION]\n                                     ).exclude(delegation__name__contains='-')\nsave(languages, '037_delegation_langs.json')\nnodes = TranslationNode.objects.filter(question__in=questions, language__in=languages)\nss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "languages = Language.objects.exclude(delegation__name__in=[settings.OFFICIAL_DELEGATION]\n                                     ).exclude(delegation__name__contains='-')\nsave(languages, '037_delegation_langs.json')\nnodes = TranslationNode.objects.filter(question__in=questions, language__in=languages)\nss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['question'][0] = d['fields']['question'][0].replace('instructions', 'Instructions')\njson.dump(data, open('038_delegation_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "nodes = TranslationNode.objects.filter(question__in=questions, language__in=languages)\nss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['question'][0] = d['fields']['question'][0].replace('instructions', 'Instructions')\njson.dump(data, open('038_delegation_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "ss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['question'][0] = d['fields']['question'][0].replace('instructions', 'Instructions')\njson.dump(data, open('038_delegation_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "description": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "peekOfCode": "data = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['question'][0] = d['fields']['question'][0].replace('instructions', 'Instructions')\njson.dump(data, open('038_delegation_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_delegation_translations",
        "documentation": {}
    },
    {
        "label": "get_extra_sheets_count",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "description": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "peekOfCode": "def get_extra_sheets_count(exam_name, output_file):\n    docs = Document.objects.filter(\n        ~Q(position=0), ~Q(extra_num_pages=0), exam__name=exam_name\n    ).order_by('student', 'position')\n    res = [(d.student, d.position, d.extra_num_pages) for d in docs]\n    with open(output_file, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerow(['student_code', 'quesiton_number', 'extra_num_pages'])\n        writer.writerows(res)\nif __name__ == '__main__':",
        "detail": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "description": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.db.models import Q\nfrom ipho_exam.models import Document\ndef get_extra_sheets_count(exam_name, output_file):\n    docs = Document.objects.filter(\n        ~Q(position=0), ~Q(extra_num_pages=0), exam__name=exam_name\n    ).order_by('student', 'position')\n    res = [(d.student, d.position, d.extra_num_pages) for d in docs]",
        "detail": "src.components.Exam.exam_tools.scripts.export_extra_sheets",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_figures",
        "description": "src.components.Exam.exam_tools.scripts.export_figures",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, stream=stream\n    )\ndef save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(",
        "detail": "src.components.Exam.exam_tools.scripts.export_figures",
        "documentation": {}
    },
    {
        "label": "save_with_pk",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_figures",
        "description": "src.components.Exam.exam_tools.scripts.export_figures",
        "peekOfCode": "def save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=False, stream=stream\n    )\nfigures = []\nfigures.extend(Figure.objects.non_polymorphic().all())\nfigures.extend(Figure.objects.all())\nif len(sys.argv) >= 2:",
        "detail": "src.components.Exam.exam_tools.scripts.export_figures",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_figures",
        "description": "src.components.Exam.exam_tools.scripts.export_figures",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nsys.path.append(\".\")\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.core import serializers\nfrom ipho_core.models import Delegation\nfrom ipho_exam.models import *\nimport json\nfrom io import StringIO",
        "detail": "src.components.Exam.exam_tools.scripts.export_figures",
        "documentation": {}
    },
    {
        "label": "figures",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_figures",
        "description": "src.components.Exam.exam_tools.scripts.export_figures",
        "peekOfCode": "figures = []\nfigures.extend(Figure.objects.non_polymorphic().all())\nfigures.extend(Figure.objects.all())\nif len(sys.argv) >= 2:\n    d = sys.argv[1]\nelse:\n    d = '.'\nfn = os.path.join(d, '033_figures.json')\nsave_with_pk(figures, fn)",
        "detail": "src.components.Exam.exam_tools.scripts.export_figures",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_figures",
        "description": "src.components.Exam.exam_tools.scripts.export_figures",
        "peekOfCode": "fn = os.path.join(d, '033_figures.json')\nsave_with_pk(figures, fn)",
        "detail": "src.components.Exam.exam_tools.scripts.export_figures",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, stream=stream\n    )\ndef save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "save_with_pk",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "def save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=False, stream=stream\n    )\n## Official delegation\nobjs = []\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nobjs.append(Delegation.objects.get(name=OFFICIAL_DELEGATION))",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nsys.path.append(\".\")\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.core import serializers\nfrom ipho_core.models import Delegation\nfrom ipho_exam.models import *\nimport json\nfrom io import StringIO",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "objs",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "objs = []\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nobjs.append(Delegation.objects.get(name=OFFICIAL_DELEGATION))\nlanguages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=True)\nobjs += list(languages)\nsave_with_pk(objs, '030_official_delegation.json')\n## Exams\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nsave(exams, '031_exams.json')",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nobjs.append(Delegation.objects.get(name=OFFICIAL_DELEGATION))\nlanguages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=True)\nobjs += list(languages)\nsave_with_pk(objs, '030_official_delegation.json')\n## Exams\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nsave(exams, '031_exams.json')\nquestions = Question.objects.filter(exam__in=exams)",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "languages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=True)\nobjs += list(languages)\nsave_with_pk(objs, '030_official_delegation.json')\n## Exams\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nsave(exams, '031_exams.json')\nquestions = Question.objects.filter(exam__in=exams)\nsave(questions, '032_questions.json')\nfigures = []",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "exams",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "exams = Exam.objects.all()\nsave(exams, '031_exams.json')\nquestions = Question.objects.filter(exam__in=exams)\nsave(questions, '032_questions.json')\nfigures = []\nfigures.extend(Figure.objects.non_polymorphic().all())\nfigures.extend(Figure.objects.all())\nsave_with_pk(figures, '033_figures.json')\nnodes = VersionNode.objects.filter(question__in=questions).order_by('-version')\nlast_nodes = []",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "questions = Question.objects.filter(exam__in=exams)\nsave(questions, '032_questions.json')\nfigures = []\nfigures.extend(Figure.objects.non_polymorphic().all())\nfigures.extend(Figure.objects.all())\nsave_with_pk(figures, '033_figures.json')\nnodes = VersionNode.objects.filter(question__in=questions).order_by('-version')\nlast_nodes = []\nlast_nodes_incl = []\nfor node in nodes:",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "figures",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "figures = []\nfigures.extend(Figure.objects.non_polymorphic().all())\nfigures.extend(Figure.objects.all())\nsave_with_pk(figures, '033_figures.json')\nnodes = VersionNode.objects.filter(question__in=questions).order_by('-version')\nlast_nodes = []\nlast_nodes_incl = []\nfor node in nodes:\n    if node.question.pk in last_nodes_incl:\n        continue",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "nodes = VersionNode.objects.filter(question__in=questions).order_by('-version')\nlast_nodes = []\nlast_nodes_incl = []\nfor node in nodes:\n    if node.question.pk in last_nodes_incl:\n        continue\n    last_nodes.append(node)\n    last_nodes_incl.append(node.question.pk)\nss = StringIO()\nsave(last_nodes, ss)",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "last_nodes",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "last_nodes = []\nlast_nodes_incl = []\nfor node in nodes:\n    if node.question.pk in last_nodes_incl:\n        continue\n    last_nodes.append(node)\n    last_nodes_incl.append(node.question.pk)\nss = StringIO()\nsave(last_nodes, ss)\ndata = json.loads(ss.getvalue())",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "last_nodes_incl",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "last_nodes_incl = []\nfor node in nodes:\n    if node.question.pk in last_nodes_incl:\n        continue\n    last_nodes.append(node)\n    last_nodes_incl.append(node.question.pk)\nss = StringIO()\nsave(last_nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "ss = StringIO()\nsave(last_nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['version'] = 1\n#     d['fields']['tag'] = 'initial'\njson.dump(data, open('034_content_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "peekOfCode": "data = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['version'] = 1\n#     d['fields']['tag'] = 'initial'\njson.dump(data, open('034_content_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_orig_exams",
        "documentation": {}
    },
    {
        "label": "get_id",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "description": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "peekOfCode": "def get_id(doc):\n    stud = doc.student.code\n    exam = doc.exam.code\n    question = doc.position\n    return '{}_{}_{}'.format(stud, exam, question)\ndef move_doc(doc, dest_folder):\n    doc_id = get_id(doc)\n    dest_path = os.path.join(dest_folder, doc_id + '.pdf')\n    try:\n        shutil.copyfile(doc.file.path, dest_path)",
        "detail": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "documentation": {}
    },
    {
        "label": "move_doc",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "description": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "peekOfCode": "def move_doc(doc, dest_folder):\n    doc_id = get_id(doc)\n    dest_path = os.path.join(dest_folder, doc_id + '.pdf')\n    try:\n        shutil.copyfile(doc.file.path, dest_path)\n        print('exported', doc_id)\n    except ValueError:\n        print('could not export', doc_id)\nif __name__ == '__main__':\n    dest_folder = '/srv/exam_tools/backups/submission_pdf_export'",
        "detail": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "description": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport shutil\nimport django\nfrom ipho_exam.models import *\ndef get_id(doc):\n    stud = doc.student.code\n    exam = doc.exam.code\n    question = doc.position\n    return '{}_{}_{}'.format(stud, exam, question)\ndef move_doc(doc, dest_folder):",
        "detail": "src.components.Exam.exam_tools.scripts.export_submitted_pdf",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, stream=stream\n    )\ndef save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "save_with_pk",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "def save_with_pk(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\n    serializers.serialize(\n        'json', objs, indent=2, use_natural_foreign_keys=False, use_natural_primary_keys=False, stream=stream\n    )\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nquestions = Question.objects.filter(exam__in=exams)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nsys.path.append(\".\")\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.core import serializers\nfrom ipho_exam.models import *\nimport json\nfrom io import StringIO\ndef save(objs, stream):",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\n# exams = Exam.objects.filter(name__in=['Theory', 'Experiment'])\nexams = Exam.objects.all()\nquestions = Question.objects.filter(exam__in=exams)\n# languages = Language.objects.filter(name__contains='final')\nlanguages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=False)\nss = StringIO()\nsave(languages, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "exams",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "exams = Exam.objects.all()\nquestions = Question.objects.filter(exam__in=exams)\n# languages = Language.objects.filter(name__contains='final')\nlanguages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=False)\nss = StringIO()\nsave(languages, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['delegation'] = [u'IPhO']\n#     d['fields']['name'] = d['fields']['name'].replace(' final', '')",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "questions = Question.objects.filter(exam__in=exams)\n# languages = Language.objects.filter(name__contains='final')\nlanguages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=False)\nss = StringIO()\nsave(languages, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['delegation'] = [u'IPhO']\n#     d['fields']['name'] = d['fields']['name'].replace(' final', '')\njson.dump(data, open('035_trans_official_lang.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "languages = Language.objects.filter(delegation__name=OFFICIAL_DELEGATION, versioned=False)\nss = StringIO()\nsave(languages, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['delegation'] = [u'IPhO']\n#     d['fields']['name'] = d['fields']['name'].replace(' final', '')\njson.dump(data, open('035_trans_official_lang.json', 'w'), indent=2)\nnodes = TranslationNode.objects.filter(question__in=questions, language=languages)\nss = StringIO()",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "ss = StringIO()\nsave(languages, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['delegation'] = [u'IPhO']\n#     d['fields']['name'] = d['fields']['name'].replace(' final', '')\njson.dump(data, open('035_trans_official_lang.json', 'w'), indent=2)\nnodes = TranslationNode.objects.filter(question__in=questions, language=languages)\nss = StringIO()\nsave(nodes, ss)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "data = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['delegation'] = [u'IPhO']\n#     d['fields']['name'] = d['fields']['name'].replace(' final', '')\njson.dump(data, open('035_trans_official_lang.json', 'w'), indent=2)\nnodes = TranslationNode.objects.filter(question__in=questions, language=languages)\nss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "nodes = TranslationNode.objects.filter(question__in=questions, language=languages)\nss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['language'] = [d['fields']['language'][0].replace(' final', ''), u'IPhO']\njson.dump(data, open('036_trans_official_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "ss = StringIO()\nsave(nodes, ss)\ndata = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['language'] = [d['fields']['language'][0].replace(' final', ''), u'IPhO']\njson.dump(data, open('036_trans_official_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "description": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "peekOfCode": "data = json.loads(ss.getvalue())\n# for d in data:\n#     d['fields']['language'] = [d['fields']['language'][0].replace(' final', ''), u'IPhO']\njson.dump(data, open('036_trans_official_nodes.json', 'w'), indent=2)",
        "detail": "src.components.Exam.exam_tools.scripts.export_trans_exams",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.export_votes_delegations",
        "description": "src.components.Exam.exam_tools.scripts.export_votes_delegations",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nsys.path.append(\".\")\nimport django\ndjango.setup()\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('usage: python scripts/export_votes_delegations.py <out_file_path.csv>')\n    else:\n        out_file_path = sys.argv[1]\n        with open(out_file_path, 'w') as fout:",
        "detail": "src.components.Exam.exam_tools.scripts.export_votes_delegations",
        "documentation": {}
    },
    {
        "label": "family_pattern",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "family_pattern = re.compile(r'font-family:[ ]+\\'([^\\']+)\\'')\nfamily_pattern = re.compile(r'font-family:[ ]+\\'([^\\']+)\\'')\ncjk_list = ['notosansjp', 'notosanskr', 'notosanssc', 'notosanstc']\nresults = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    for line in open(css_file):\n        match = family_pattern.search(line)\n        if match:\n            css_name = os.path.basename(css_file)",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "family_pattern",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "family_pattern = re.compile(r'font-family:[ ]+\\'([^\\']+)\\'')\ncjk_list = ['notosansjp', 'notosanskr', 'notosanssc', 'notosanstc']\nresults = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    for line in open(css_file):\n        match = family_pattern.search(line)\n        if match:\n            css_name = os.path.basename(css_file)\n            name = css_name.replace('.css', '')",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "cjk_list",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "cjk_list = ['notosansjp', 'notosanskr', 'notosanssc', 'notosanstc']\nresults = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    for line in open(css_file):\n        match = family_pattern.search(line)\n        if match:\n            css_name = os.path.basename(css_file)\n            name = css_name.replace('.css', '')\n            results.append({",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "results = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    for line in open(css_file):\n        match = family_pattern.search(line)\n        if match:\n            css_name = os.path.basename(css_file)\n            name = css_name.replace('.css', '')\n            results.append({\n                'css': css_name,",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "flist",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "flist = sys.argv[1:]\nfor css_file in flist:\n    for line in open(css_file):\n        match = family_pattern.search(line)\n        if match:\n            css_name = os.path.basename(css_file)\n            name = css_name.replace('.css', '')\n            results.append({\n                'css': css_name,\n                'name': name.replace('.css', ''),",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict",
        "description": "src.components.Exam.exam_tools.scripts.font_dict",
        "peekOfCode": "results = {v['name']: v for v in results}\nimport json\nprint('noto =', json.dumps(results, indent=2))",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict",
        "documentation": {}
    },
    {
        "label": "family_pattern",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "description": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "peekOfCode": "family_pattern = re.compile(r'url\\(([^)]+)\\) +format\\(([^)]+)\\)')\ncjk_list = ['notosansjp', 'notosanskr', 'notosanssc', 'notosanstc']\nresults = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    css_name = os.path.basename(css_file)\n    name = css_name.replace('.css', '')\n    cssdict = {\n        'css': css_name,\n        'name': name,",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "documentation": {}
    },
    {
        "label": "cjk_list",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "description": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "peekOfCode": "cjk_list = ['notosansjp', 'notosanskr', 'notosanssc', 'notosanstc']\nresults = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    css_name = os.path.basename(css_file)\n    name = css_name.replace('.css', '')\n    cssdict = {\n        'css': css_name,\n        'name': name,\n        # 'font': None,",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "description": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "peekOfCode": "results = []\nflist = sys.argv[1:]\nfor css_file in flist:\n    css_name = os.path.basename(css_file)\n    name = css_name.replace('.css', '')\n    cssdict = {\n        'css': css_name,\n        'name': name,\n        # 'font': None,\n        'cjk': int(name in cjk_list),",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "documentation": {}
    },
    {
        "label": "flist",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "description": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "peekOfCode": "flist = sys.argv[1:]\nfor css_file in flist:\n    css_name = os.path.basename(css_file)\n    name = css_name.replace('.css', '')\n    cssdict = {\n        'css': css_name,\n        'name': name,\n        # 'font': None,\n        'cjk': int(name in cjk_list),\n    }",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "description": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "peekOfCode": "results = {v['name']: v for v in results}\nimport json\nprint('noto =', json.dumps(results, indent=2))",
        "detail": "src.components.Exam.exam_tools.scripts.font_dict_v2",
        "documentation": {}
    },
    {
        "label": "compile_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "def compile_question(question, language):\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return\n    trans_content, ext_resources = trans.qml.make_tex()\n    for r in ext_resources:\n        if isinstance(r, tex.FigureExport):",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "compile_stud_exam_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "def compile_stud_exam_question(questions, student_languages, cover=None, commit=False):\n    all_tasks = []\n    all_docs = []\n    if cover is not None:\n        body = render_to_string(os.path.join(EVENT_TEMPLATE_PATH, 'tex', 'exam_cover.tex'), request=HttpRequest(), context=cover)\n        question_pdf = pdf.compile_tex(body, [])\n        q = questions[0]\n        s = student_languages[0].student\n        bgenerator = iphocode.QuestionBarcodeGen(q.exam, q, s, qcode='C', suppress_code=True)\n        page = pdf.add_barcode(question_pdf, bgenerator)",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "generate_extra_sheets",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "def generate_extra_sheets(student, question, startnum, npages):\n    context = {\n        'polyglossia': 'english',\n        'polyglossia_options': '',\n        'font': fonts.ipho['notosans'],\n        'exam_name': u'{}'.format(question.exam.name),\n        'code': u'{}{}'.format('Z', question.position),\n        'pages': list(range(npages)),\n        'startnum': startnum + 1,\n    }",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "missing_submissions",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "def missing_submissions():\n    missing = Delegation.objects.filter(\n        exam_status__exam__name='Experiment',\n        exam_status__action=ExamAction.TRANSLATION,\n        exam_status__status=ExamAction.OPEN\n    ).exclude(name=settings.OFFICIAL_DELEGATION)\n    exam = Exam.objects.get(name='Experiment')\n    questions = exam.question_set.all()\n    grouped_questions = {k: list(g) for k, g in itertools.groupby(questions, key=lambda q: q.position)}\n    for d in missing:",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "compile_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "def compile_all(names=('Theory', 'Experiment')):\n    exams = Exam.objects.filter(name__in=names)\n    questions = Question.objects.filter(exam__in=exams, position__in=[0, 1, 2, 3])\n    languages = Language.objects.filter(studentsubmission__exam__in=exams).distinct()\n    print('Going to compile in {} languages.'.format(len(languages)))\n    for q in questions:\n        for lang in languages:\n            compile_question(q, lang)\n    print('COMPLETED')\nif __name__ == '__main__':",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport itertools\nimport sys\nsys.path.append(\".\")\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.http import HttpRequest\nfrom django.template.loader import render_to_string\nfrom django.template.defaultfilters import slugify",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_question(question, language):\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_question(question, language):\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return\n    trans_content, ext_resources = trans.qml.make_tex()",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\ndef compile_question(question, language):\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return\n    trans_content, ext_resources = trans.qml.make_tex()\n    for r in ext_resources:",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_pdf",
        "documentation": {}
    },
    {
        "label": "compile_question",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "def compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return\n    trans_content, ext_resources = trans.qml.make_tex()",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "export_all",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "def export_all(logo_file, names=('Theory', 'Experiment')):\n    exams = Exam.objects.filter(name__in=names)\n    questions = Question.objects.filter(exam=exams, position__in=[1, 2, 3])\n    languages = Language.objects.filter(studentsubmission__exam=exams).distinct()\n    print('Going to export in {} languages.'.format(len(languages)))\n    for q in questions:\n        for lang in languages:\n            compile_question(q, lang, logo_file)\n    print('COMPLETED')\nif __name__ == '__main__':",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport shutil\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.shortcuts import get_object_or_404\nfrom django.http import HttpRequest\nfrom django.template.loader import render_to_string\nfrom django.template.defaultfilters import slugify",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_LANGUAGE",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "OFFICIAL_LANGUAGE = 1\nOFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\nBASE_PATH = u'../media/downloads/language_tex'\nFONT_PATH = os.path.join(STATIC_PATH, 'noto')\nREPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "OFFICIAL_DELEGATION",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "OFFICIAL_DELEGATION = getattr(settings, 'OFFICIAL_DELEGATION')\nEVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\nBASE_PATH = u'../media/downloads/language_tex'\nFONT_PATH = os.path.join(STATIC_PATH, 'noto')\nREPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "EVENT_TEMPLATE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "EVENT_TEMPLATE_PATH = getattr(settings, 'EVENT_TEMPLATE_PATH')\nBASE_PATH = u'../media/downloads/language_tex'\nFONT_PATH = os.path.join(STATIC_PATH, 'noto')\nREPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "BASE_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "BASE_PATH = u'../media/downloads/language_tex'\nFONT_PATH = os.path.join(STATIC_PATH, 'noto')\nREPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "FONT_PATH",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "FONT_PATH = os.path.join(STATIC_PATH, 'noto')\nREPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "REPLACEMENTS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "description": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "peekOfCode": "REPLACEMENTS = [(FONT_PATH, '.'), (STATIC_PATH, '.')]\ndef compile_question(question, language, logo_file):\n    if language.is_pdf:\n        return\n    print('Prepare', question, 'in', language)\n    try:\n        trans = qquery.latest_version(question.pk, language.pk)\n    except:\n        print('NOT-FOUND')\n        return",
        "detail": "src.components.Exam.exam_tools.scripts.generate_language_tex",
        "documentation": {}
    },
    {
        "label": "moderation_detail",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "description": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "peekOfCode": "def moderation_detail(question_id, delegation_id, request=HttpRequest()):\n    question = get_object_or_404(Question, id=question_id, exam__hidden=False, exam__moderation_active=True)\n    delegation = get_object_or_404(Delegation, id=delegation_id)\n    metas = MarkingMeta.objects.filter(question=question)\n    students = delegation.student_set.all()\n    student_forms = []\n    marking_forms = []\n    all_valid = True\n    with_errors = False\n    for i, student in enumerate(students):",
        "detail": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "description": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport django\ndjango.setup()\nfrom django.conf import settings\nfrom django.shortcuts import get_object_or_404\nfrom django.http import HttpRequest\nfrom django.core.urlresolvers import reverse\nfrom django.template.loader import render_to_string\nfrom ipho_core.models import Delegation, Student",
        "detail": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "documentation": {}
    },
    {
        "label": "answer_sheets",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "description": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "peekOfCode": "answer_sheets = Question.objects.filter(exam__hidden=False, exam__moderation_active=True, code='A')\nall_delegations = Delegation.objects.all()\nfor question in answer_sheets:\n    for delegation in all_delegations:\n        print(question.pk, delegation.pk)\n        try:\n            moderation_detail(question.pk,delegation.pk)\n        except:\n            pass",
        "detail": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "documentation": {}
    },
    {
        "label": "all_delegations",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "description": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "peekOfCode": "all_delegations = Delegation.objects.all()\nfor question in answer_sheets:\n    for delegation in all_delegations:\n        print(question.pk, delegation.pk)\n        try:\n            moderation_detail(question.pk,delegation.pk)\n        except:\n            pass",
        "detail": "src.components.Exam.exam_tools.scripts.generate_marking_forms",
        "documentation": {}
    },
    {
        "label": "generate_password",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "description": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "peekOfCode": "def generate_password(num_bytes=6):\n    pwd_candidate = secrets.token_urlsafe(num_bytes)\n    while any(char in pwd_candidate for char in BLOCKED_CHARACTERS):\n        pwd_candidate = secrets.token_urlsafe(num_bytes)\n    return pwd_candidate\nif __name__ == '__main__':\n    try:\n        num_pwd = int(sys.argv[1])\n    except (IndexError, TypeError):\n        print('usage: ./generate_nice_passwords.py num_passwords [num_bytes]')",
        "detail": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "documentation": {}
    },
    {
        "label": "BLOCKED_CHARACTERS",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "description": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "peekOfCode": "BLOCKED_CHARACTERS = '0O1Il-_'\ndef generate_password(num_bytes=6):\n    pwd_candidate = secrets.token_urlsafe(num_bytes)\n    while any(char in pwd_candidate for char in BLOCKED_CHARACTERS):\n        pwd_candidate = secrets.token_urlsafe(num_bytes)\n    return pwd_candidate\nif __name__ == '__main__':\n    try:\n        num_pwd = int(sys.argv[1])\n    except (IndexError, TypeError):",
        "detail": "src.components.Exam.exam_tools.scripts.generate_nice_passwords",
        "documentation": {}
    },
    {
        "label": "add_barcode",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "def add_barcode(fname):\n    from PyPDF2 import PdfFileWriter, PdfFileReader\n    pdfdoc = PdfFileReader(open(fname, 'rb'))\n    output = PdfFileWriter()\n    for i in range(pdfdoc.getNumPages()):\n        barpdf = PdfFileReader(open('outcode.pdf', 'rb'))\n        watermark = barpdf.getPage(0)\n        # wbox = watermark.artBox\n        wbox = watermark.cropBox\n        wwidth = (wbox.upperRight[0] - wbox.upperLeft[0])",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "code = 'TTT-S-3 T-4 Q-2'\nimg_w = 50\nimg = qrcode.make(\n    code, box_size=7.5, image_factory=qrcode.image.svg.SvgImage, error_correction=qrcode.constants.ERROR_CORRECT_H\n)\nbcode_raw = img.get_image()\nw = float(bcode_raw.attrib['width'].replace('mm', ''))\nh = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "img_w",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "img_w = 50\nimg = qrcode.make(\n    code, box_size=7.5, image_factory=qrcode.image.svg.SvgImage, error_correction=qrcode.constants.ERROR_CORRECT_H\n)\nbcode_raw = img.get_image()\nw = float(bcode_raw.attrib['width'].replace('mm', ''))\nh = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "img = qrcode.make(\n    code, box_size=7.5, image_factory=qrcode.image.svg.SvgImage, error_correction=qrcode.constants.ERROR_CORRECT_H\n)\nbcode_raw = img.get_image()\nw = float(bcode_raw.attrib['width'].replace('mm', ''))\nh = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_raw",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_raw = img.get_image()\nw = float(bcode_raw.attrib['width'].replace('mm', ''))\nh = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "w = float(bcode_raw.attrib['width'].replace('mm', ''))\nh = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']\ndel bcode_raw.attrib['xmlns']",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "h = float(bcode_raw.attrib['height'].replace('mm', ''))\nimg_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']\ndel bcode_raw.attrib['xmlns']\nbcode_xml = etree.Element(",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "img_h",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "img_h = h + 5\nimg.save('outcode_raw.svg')\nbcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']\ndel bcode_raw.attrib['xmlns']\nbcode_xml = etree.Element(\n    'svg', {",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_raw.tag",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_raw.tag = 'g'\nbcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']\ndel bcode_raw.attrib['xmlns']\nbcode_xml = etree.Element(\n    'svg', {\n        'width': \"{}mm\".format(img_w),\n        'height': \"{}mm\".format(img_h),",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_raw.attrib['transform']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_raw.attrib['transform'] = 'translate({}mm,0)'.format(old_div((img_w - w), 2.))\ndel bcode_raw.attrib['height']\ndel bcode_raw.attrib['width']\ndel bcode_raw.attrib['version']\ndel bcode_raw.attrib['xmlns']\nbcode_xml = etree.Element(\n    'svg', {\n        'width': \"{}mm\".format(img_w),\n        'height': \"{}mm\".format(img_h),\n        'version': \"1.1\",",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_xml",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_xml = etree.Element(\n    'svg', {\n        'width': \"{}mm\".format(img_w),\n        'height': \"{}mm\".format(img_h),\n        'version': \"1.1\",\n        'xmlns': \"http://www.w3.org/2000/svg\",\n    }\n)\ntext_xml = etree.Element('text')\ntext_xml.attrib['text-anchor'] = 'middle'",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml = etree.Element('text')\ntext_xml.attrib['text-anchor'] = 'middle'\ntext_xml.attrib['x'] = '{}mm'.format(old_div((img_w - w), 2.) + old_div(w, 2.))\ntext_xml.attrib['y'] = '{}mm'.format(h + 2)\ntext_xml.attrib['font-size'] = '14'\ntext_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.attrib['text-anchor']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.attrib['text-anchor'] = 'middle'\ntext_xml.attrib['x'] = '{}mm'.format(old_div((img_w - w), 2.) + old_div(w, 2.))\ntext_xml.attrib['y'] = '{}mm'.format(h + 2)\ntext_xml.attrib['font-size'] = '14'\ntext_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.attrib['x']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.attrib['x'] = '{}mm'.format(old_div((img_w - w), 2.) + old_div(w, 2.))\ntext_xml.attrib['y'] = '{}mm'.format(h + 2)\ntext_xml.attrib['font-size'] = '14'\ntext_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.attrib['y']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.attrib['y'] = '{}mm'.format(h + 2)\ntext_xml.attrib['font-size'] = '14'\ntext_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:\n    fp.write(bcode_svg)",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.attrib['font-size']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.attrib['font-size'] = '14'\ntext_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:\n    fp.write(bcode_svg)\nbcode_pdf = cairosvg.svg2pdf(bcode_svg)",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.attrib['font-family']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.attrib['font-family'] = 'Verdana'\ntext_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:\n    fp.write(bcode_svg)\nbcode_pdf = cairosvg.svg2pdf(bcode_svg)\nwith open('outcode.pdf', 'w') as fp:",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "text_xml.text",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "text_xml.text = code\nbcode_xml.append(bcode_raw)\nbcode_xml.append(text_xml)\nbcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:\n    fp.write(bcode_svg)\nbcode_pdf = cairosvg.svg2pdf(bcode_svg)\nwith open('outcode.pdf', 'w') as fp:\n    fp.write(bcode_pdf)",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_svg",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_svg = etree.tostring(bcode_xml)\n# print(bcode_svg)\nwith open('outcode.svg', 'w') as fp:\n    fp.write(bcode_svg)\nbcode_pdf = cairosvg.svg2pdf(bcode_svg)\nwith open('outcode.pdf', 'w') as fp:\n    fp.write(bcode_pdf)\n## Add to PDF\ndef add_barcode(fname):\n    from PyPDF2 import PdfFileWriter, PdfFileReader",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "bcode_pdf",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "description": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "peekOfCode": "bcode_pdf = cairosvg.svg2pdf(bcode_svg)\nwith open('outcode.pdf', 'w') as fp:\n    fp.write(bcode_pdf)\n## Add to PDF\ndef add_barcode(fname):\n    from PyPDF2 import PdfFileWriter, PdfFileReader\n    pdfdoc = PdfFileReader(open(fname, 'rb'))\n    output = PdfFileWriter()\n    for i in range(pdfdoc.getNumPages()):\n        barpdf = PdfFileReader(open('outcode.pdf', 'rb'))",
        "detail": "src.components.Exam.exam_tools.scripts.iphocode_qr2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "description": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "peekOfCode": "def main():\n    exam = Exam.objects.get(name='Experiment - Marking')\n    for delegation in Delegation.objects.exclude(name='Official'):\n        for student in delegation.student_set.all():\n            all_tasks = []\n            student_languages = StudentSubmission.objects.filter(exam=exam, student=student)\n            if len(student_languages) == 0: continue\n            student_seat = Place.objects.get(exam=exam, student=student)\n            questions = exam.question_set.all()\n            grouped_questions = {k: list(g) for k, g in itertools.groupby(questions, key=lambda q: q.position)}",
        "detail": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "description": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport datetime\nimport django\ndjango.setup()\nimport itertools\nfrom ipho_core.models import *\nfrom ipho_exam.models import *\nfrom ipho_exam import tasks\ndef main():",
        "detail": "src.components.Exam.exam_tools.scripts.launch_all_compile",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    node_id = timestamp\n    dump_file = os.path.join(backup_folder, PREFIX + '_dump_' + node_id + '.json')\n    with open(dump_file, 'w') as stream:",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "def get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    node_id = timestamp\n    dump_file = os.path.join(backup_folder, PREFIX + '_dump_' + node_id + '.json')\n    with open(dump_file, 'w') as stream:\n        serializers.serialize(\n            'json',\n            Marking.objects.all(),",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "make_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "def make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    node_id = timestamp\n    dump_file = os.path.join(backup_folder, PREFIX + '_dump_' + node_id + '.json')\n    with open(dump_file, 'w') as stream:\n        serializers.serialize(\n            'json',\n            Marking.objects.all(),\n            indent=2,\n            use_natural_foreign_keys=True,",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "clean_old_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "def clean_old_backups(backup_folder, timedelta):\n    current_time = get_time()\n    files = (path for path in os.listdir(backup_folder) if path.startswith(PREFIX))\n    for path in files:\n        timestamp = path.split('.')[0].split('_')[2]\n        creation_time = datetime.datetime.strptime(timestamp, TIMESTP_FORMAT)\n        if (current_time - creation_time) > timedelta:\n            os.remove(os.path.join(backup_folder, path))\nif __name__ == '__main__':\n    backup_folder = sys.argv[1]",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport datetime\nimport django\ndjango.setup()\nfrom django.utils import timezone\nfrom django.core import serializers\nfrom ipho_marking.models import Marking\nTIMESTP_FORMAT = '%Y%m%d%H%M%S'\nPREFIX = 'marking'",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "TIMESTP_FORMAT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "TIMESTP_FORMAT = '%Y%m%d%H%M%S'\nPREFIX = 'marking'\ndef save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    node_id = timestamp",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "PREFIX",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.marking_backup",
        "description": "src.components.Exam.exam_tools.scripts.marking_backup",
        "peekOfCode": "PREFIX = 'marking'\ndef save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    node_id = timestamp\n    dump_file = os.path.join(backup_folder, PREFIX + '_dump_' + node_id + '.json')",
        "detail": "src.components.Exam.exam_tools.scripts.marking_backup",
        "documentation": {}
    },
    {
        "label": "OverrideFilesPlugin",
        "kind": 6,
        "importPath": "src.components.Exam.exam_tools.scripts.mkdocs_custom",
        "description": "src.components.Exam.exam_tools.scripts.mkdocs_custom",
        "peekOfCode": "class OverrideFilesPlugin(BasePlugin):\n    def on_files(self, nav_files, config):\n        if os.path.isdir(config['event_folder_path']):\n            fs = []\n            orig_rel_paths = [nav_file.src_path for nav_file in nav_files]\n            for nav_file in nav_files:\n                abs_path = os.path.join(config['event_folder_path'], nav_file.src_path)\n                if os.path.isfile(abs_path):\n                    f = files.File(\n                        nav_file.src_path,",
        "detail": "src.components.Exam.exam_tools.scripts.mkdocs_custom",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "description": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "peekOfCode": "def log(*args):\n    sys.stderr.write(' '.join([str(a) for a in args]) + '\\n')\ndef create_users(input):\n    reader = csv.DictReader(input)\n    created_objs = []\n    can_vote = Permission.objects.get(name='Can vote')\n    for i, row in enumerate(reader):\n        group = None\n        if row['Group'] != '':\n            group = Group.objects.get(name=row['Group'])",
        "detail": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "documentation": {}
    },
    {
        "label": "create_users",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "description": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "peekOfCode": "def create_users(input):\n    reader = csv.DictReader(input)\n    created_objs = []\n    can_vote = Permission.objects.get(name='Can vote')\n    for i, row in enumerate(reader):\n        group = None\n        if row['Group'] != '':\n            group = Group.objects.get(name=row['Group'])\n        is_admin = (row['Group'] == 'Admin')\n        is_super = (row['Superuser'] == 'yes')",
        "detail": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "description": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "peekOfCode": "def main(input, dumpdata=False):\n    created_objs = create_users(input)\n    if dumpdata:\n        serializers.serialize(\n            'json',\n            created_objs,\n            indent=2,\n            use_natural_foreign_keys=True,\n            use_natural_primary_keys=True,\n            stream=sys.stdout",
        "detail": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "description": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.core import serializers\nimport csv\nfrom django.contrib.auth.models import Permission\nfrom ipho_core.models import Group, User\nfrom ipho_poll.models import VotingRight\ndef log(*args):\n    sys.stderr.write(' '.join([str(a) for a in args]) + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.prod_01_other_users",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "description": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "peekOfCode": "def log(*args):\n    sys.stderr.write(' '.join([str(a) for a in args]) + '\\n')\ndef create_objs(input):\n    reader = csv.DictReader(input)\n    created_objs = []\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):\n        ## Delegation\n        delegation, created = Delegation.objects.get_or_create(\n            name=row['Country Code'], defaults={'country': row['Country Name']}",
        "detail": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "documentation": {}
    },
    {
        "label": "create_objs",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "description": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "peekOfCode": "def create_objs(input):\n    reader = csv.DictReader(input)\n    created_objs = []\n    delegations_group = Group.objects.get(name='Delegation')\n    for i, row in enumerate(reader):\n        ## Delegation\n        delegation, created = Delegation.objects.get_or_create(\n            name=row['Country Code'], defaults={'country': row['Country Name']}\n        )\n        if created: log(delegation, '..', 'created')",
        "detail": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "description": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "peekOfCode": "def main(input, dumpdata=False):\n    created_objs = create_objs(input)\n    if dumpdata:\n        serializers.serialize(\n            'json',\n            created_objs,\n            indent=2,\n            use_natural_foreign_keys=True,\n            use_natural_primary_keys=True,\n            stream=sys.stdout",
        "detail": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "description": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom django.core import serializers\nimport csv\nfrom ipho_core.models import Delegation, Student, Group, User, AutoLogin\nfrom ipho_poll.models import VotingRight\ndef log(*args):\n    sys.stderr.write(' '.join([str(a) for a in args]) + '\\n')\ndef create_objs(input):",
        "detail": "src.components.Exam.exam_tools.scripts.prod_02_create_delegations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "description": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "peekOfCode": "def main(input):\n    reader = csv.DictReader(input)\n    for i, row in enumerate(reader):\n        #print(row)\n        try:\n            ## Delegation\n            delegation = Delegation.objects.get(name=row['delegation'])\n            student, created = Student.objects.get_or_create(\n                code=row['code'],\n                defaults={",
        "detail": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "description": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Delegation, Student\ndef main(input):\n    reader = csv.DictReader(input)\n    for i, row in enumerate(reader):\n        #print(row)\n        try:",
        "detail": "src.components.Exam.exam_tools.scripts.prod_03_create_students",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "description": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "peekOfCode": "def main(input):\n    reader = csv.DictReader(input)\n    assert('individual_id' in reader.fieldnames)\n    header = reader.fieldnames.copy()\n    header.remove('individual_id')\n    print(header)\n    exams = [ Exam.objects.get(name=n) for n in header]\n    #theory = Exam.objects.get(name='Theory')\n    #experiment = Exam.objects.get(name='Experiment')\n    for i, row in enumerate(reader):",
        "detail": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "description": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_core.models import Student\nfrom ipho_exam.models import Place, Exam\ndef main(input):\n    reader = csv.DictReader(input)\n    assert('individual_id' in reader.fieldnames)\n    header = reader.fieldnames.copy()",
        "detail": "src.components.Exam.exam_tools.scripts.prod_04_import_student_seating",
        "documentation": {}
    },
    {
        "label": "question_points",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "description": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "peekOfCode": "def question_points(root, part_num=-1, subq_num=0):\n    part_code = lambda num: chr(65 + num)\n    for obj in root.children:\n        if isinstance(obj, qml.QMLpart):\n            part_num += 1\n            subq_num = 0\n            if not 'Part' in obj.data:\n                obj.data = 'Part {}: '.format(part_code(part_num)) + obj.data\n        if isinstance(obj, qml.QMLsubquestion):\n            subq_num += 1",
        "detail": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "description": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "peekOfCode": "def main():\n    for node in VersionNode.objects.all():\n        if not '<question' in node.text: continue\n        q = qml.make_qml(node)\n        question_points(q)\n        node.text = qml.xml2string(q.make_xml())\n        node.save()\n    for node in TranslationNode.objects.all():\n        if not '<question' in node.text: continue\n        q = qml.make_qml(node)",
        "detail": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "description": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nimport csv\nfrom ipho_exam.models import TranslationNode, VersionNode\nfrom ipho_exam import qml\ndef question_points(root, part_num=-1, subq_num=0):\n    part_code = lambda num: chr(65 + num)\n    for obj in root.children:\n        if isinstance(obj, qml.QMLpart):",
        "detail": "src.components.Exam.exam_tools.scripts.set_parts_nr",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "description": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "peekOfCode": "def main():\n    markings = Marking.objects.all()\n    i = 0\n    for marking in markings:\n        r = random.random()\n        marking.points = round(r * marking.marking_meta.max_points, 1)\n        marking.save()\n        if i % 100 == 1:\n            print(\"markings changed:\", i)\n        i += 1",
        "detail": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "description": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nroot_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_marking.models import Marking, MarkingMeta\nimport random\ndef main():\n    markings = Marking.objects.all()",
        "detail": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "description": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "peekOfCode": "root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_marking.models import Marking, MarkingMeta\nimport random\ndef main():\n    markings = Marking.objects.all()\n    i = 0\n    for marking in markings:",
        "detail": "src.components.Exam.exam_tools.scripts.set_random_marking_points",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "description": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "peekOfCode": "def main():\n    exams = Exam.objects.all()\n    print('\\nFor which exam you want to generate random seats.')\n    exams_ix = []\n    for i, exam in enumerate(exams):\n        print('[{}] {}'.format(i + 1, exam.name))\n    ix = int(eval(input('Select index > ')))\n    if ix <= 0 or ix > len(exams):\n        print('Index is invalid.')\n        return",
        "detail": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "description": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport django\ndjango.setup()\nfrom ipho_core.models import Student\nfrom ipho_exam.models import Place, Exam\nimport random\ndef main():\n    exams = Exam.objects.all()\n    print('\\nFor which exam you want to generate random seats.')\n    exams_ix = []",
        "detail": "src.components.Exam.exam_tools.scripts.set_random_seats",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "description": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nroot_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom django.db import models\nfrom django.db.models import Q, Count, Sum, Case, When\nfrom ipho_exam.models import *\nfeedbacks = Feedback.objects.filter(question__exam=1).annotate(",
        "detail": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "description": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "peekOfCode": "root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom django.db import models\nfrom django.db.models import Q, Count, Sum, Case, When\nfrom ipho_exam.models import *\nfeedbacks = Feedback.objects.filter(question__exam=1).annotate(\n    num_likes=Sum(Case(When(like__status='L', then=1), output_field=models.IntegerField())),\n    num_unlikes=Sum(Case(When(like__status='U', then=1), output_field=models.IntegerField()))",
        "detail": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "documentation": {}
    },
    {
        "label": "feedbacks",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "description": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "peekOfCode": "feedbacks = Feedback.objects.filter(question__exam=1).annotate(\n    num_likes=Sum(Case(When(like__status='L', then=1), output_field=models.IntegerField())),\n    num_unlikes=Sum(Case(When(like__status='U', then=1), output_field=models.IntegerField()))\n).values(\n    'num_likes', 'num_unlikes', 'pk', 'question__name', 'delegation__name', 'delegation__country', 'status', 'part',\n    'comment'\n)\nprint(feedbacks)",
        "detail": "src.components.Exam.exam_tools.scripts.test_query_likes",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in TranslationNode.objects.all():\n        language_id = node.language_id\n        question_id = node.question_id",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "def get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in TranslationNode.objects.all():\n        language_id = node.language_id\n        question_id = node.question_id\n        delegation_id = node.language.delegation.name\n        node_id = '{t}_d{d}_q{q}_l{l}'.format(t=timestamp, d=delegation_id, q=question_id, l=language_id)\n        dump_file = os.path.join(backup_folder, 'translation_dump_' + node_id + '.json')",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "make_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "def make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in TranslationNode.objects.all():\n        language_id = node.language_id\n        question_id = node.question_id\n        delegation_id = node.language.delegation.name\n        node_id = '{t}_d{d}_q{q}_l{l}'.format(t=timestamp, d=delegation_id, q=question_id, l=language_id)\n        dump_file = os.path.join(backup_folder, 'translation_dump_' + node_id + '.json')\n        export_file = os.path.join(backup_folder, 'translation_export_' + node_id + '.xml')\n        with open(dump_file, 'w') as stream:",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "clean_old_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "def clean_old_backups(backup_folder, timedelta):\n    current_time = get_time()\n    files = (path for path in os.listdir(backup_folder) if path.startswith('translation'))\n    for path in files:\n        timestamp = path.split('.')[0].split('_')[2]\n        creation_time = datetime.datetime.strptime(timestamp, TIMESTP_FORMAT)\n        if (current_time - creation_time) > timedelta:\n            os.remove(os.path.join(backup_folder, path))\nif __name__ == '__main__':\n    backup_folder = sys.argv[1]",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport datetime\nfrom io import open \nimport django\ndjango.setup()\nfrom django.utils import timezone\nfrom django.core import serializers\nfrom ipho_exam.models import *\nfrom ipho_exam import qml",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "TIMESTP_FORMAT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.translation_backup",
        "description": "src.components.Exam.exam_tools.scripts.translation_backup",
        "peekOfCode": "TIMESTP_FORMAT = '%Y%m%d%H%M%S'\ndef save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in TranslationNode.objects.all():\n        language_id = node.language_id",
        "detail": "src.components.Exam.exam_tools.scripts.translation_backup",
        "documentation": {}
    },
    {
        "label": "raw_cred",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "description": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "peekOfCode": "raw_cred = sys.argv[1]\nstr_cred = eval(raw_cred)\n# Instantiates a client\njson_cred = json.loads(str_cred)\ntranslate_client = translate.Client(credentials=service_account.Credentials.from_service_account_info(json_cred))\nlan_list = json.dumps(translate_client.get_languages())\nwith open(os.path.join(os.path.dirname(__file__), '../exam_tools/settings.py'), 'a') as f:\n    f.write('AUTO_TRANSLATE_LANGUAGES = ' + lan_list + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "documentation": {}
    },
    {
        "label": "str_cred",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "description": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "peekOfCode": "str_cred = eval(raw_cred)\n# Instantiates a client\njson_cred = json.loads(str_cred)\ntranslate_client = translate.Client(credentials=service_account.Credentials.from_service_account_info(json_cred))\nlan_list = json.dumps(translate_client.get_languages())\nwith open(os.path.join(os.path.dirname(__file__), '../exam_tools/settings.py'), 'a') as f:\n    f.write('AUTO_TRANSLATE_LANGUAGES = ' + lan_list + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "documentation": {}
    },
    {
        "label": "json_cred",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "description": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "peekOfCode": "json_cred = json.loads(str_cred)\ntranslate_client = translate.Client(credentials=service_account.Credentials.from_service_account_info(json_cred))\nlan_list = json.dumps(translate_client.get_languages())\nwith open(os.path.join(os.path.dirname(__file__), '../exam_tools/settings.py'), 'a') as f:\n    f.write('AUTO_TRANSLATE_LANGUAGES = ' + lan_list + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "documentation": {}
    },
    {
        "label": "translate_client",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "description": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "peekOfCode": "translate_client = translate.Client(credentials=service_account.Credentials.from_service_account_info(json_cred))\nlan_list = json.dumps(translate_client.get_languages())\nwith open(os.path.join(os.path.dirname(__file__), '../exam_tools/settings.py'), 'a') as f:\n    f.write('AUTO_TRANSLATE_LANGUAGES = ' + lan_list + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "documentation": {}
    },
    {
        "label": "lan_list",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "description": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "peekOfCode": "lan_list = json.dumps(translate_client.get_languages())\nwith open(os.path.join(os.path.dirname(__file__), '../exam_tools/settings.py'), 'a') as f:\n    f.write('AUTO_TRANSLATE_LANGUAGES = ' + lan_list + '\\n')",
        "detail": "src.components.Exam.exam_tools.scripts.update_google_language_list",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "def save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in VersionNode.objects.all():\n        question_id = node.question_id\n        version_id = node.version",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "def get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in VersionNode.objects.all():\n        question_id = node.question_id\n        version_id = node.version\n        node_id = '{t}_q{q}_v{v}'.format(\n            t=timestamp,\n            q=question_id,",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "make_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "def make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in VersionNode.objects.all():\n        question_id = node.question_id\n        version_id = node.version\n        node_id = '{t}_q{q}_v{v}'.format(\n            t=timestamp,\n            q=question_id,\n            v=version_id,\n        )",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "clean_old_backups",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "def clean_old_backups(backup_folder, timedelta):\n    current_time = get_time()\n    files = (path for path in os.listdir(backup_folder) if path.startswith('version'))\n    for path in files:\n        timestamp = path.split('.')[0].split('_')[2]\n        creation_time = datetime.datetime.strptime(timestamp, TIMESTP_FORMAT)\n        if (current_time - creation_time) > timedelta:\n            os.remove(os.path.join(backup_folder, path))\nif __name__ == '__main__':\n    backup_folder = sys.argv[1]",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nimport datetime\nimport django\ndjango.setup()\nfrom django.utils import timezone\nfrom django.core import serializers\nfrom ipho_exam.models import *\nfrom ipho_exam import qml\nTIMESTP_FORMAT = '%Y%m%d%H%M%S'",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "TIMESTP_FORMAT",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.version_backup",
        "description": "src.components.Exam.exam_tools.scripts.version_backup",
        "peekOfCode": "TIMESTP_FORMAT = '%Y%m%d%H%M%S'\ndef save(objs, stream):\n    if type(stream) == str:\n        stream = open(stream, 'w')\ndef get_time():\n    return timezone.localtime(timezone.now()).replace(tzinfo=None)\ndef make_backups(backup_folder):\n    timestamp = get_time().strftime(TIMESTP_FORMAT)\n    for node in VersionNode.objects.all():\n        question_id = node.question_id",
        "detail": "src.components.Exam.exam_tools.scripts.version_backup",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.components.Exam.exam_tools.scripts.voting_demo",
        "description": "src.components.Exam.exam_tools.scripts.voting_demo",
        "peekOfCode": "def main():\n    votingRights = VotingRight.objects.all()\n    question_dict = {\n        'title': 'How do you do?',\n        'content': 'Please answer the question',\n        'end_date': '2016-04-27T13:57:00+00:00',\n    }\n    question = Question.objects.create(**question_dict)\n    choice1_dict = {'question': question, 'label': 'A', 'choice_text': 'Fine, thanks.'}\n    choice2_dict = {'question': question, 'label': 'B', 'choice_text': 'Comme ci, comme ca.'}",
        "detail": "src.components.Exam.exam_tools.scripts.voting_demo",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.voting_demo",
        "description": "src.components.Exam.exam_tools.scripts.voting_demo",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'exam_tools.settings'\nimport sys\nroot_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_poll.models import Question, Choice, Vote, VotingRight\nimport random\ndef main():\n    votingRights = VotingRight.objects.all()",
        "detail": "src.components.Exam.exam_tools.scripts.voting_demo",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "src.components.Exam.exam_tools.scripts.voting_demo",
        "description": "src.components.Exam.exam_tools.scripts.voting_demo",
        "peekOfCode": "root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, root_dir)\nimport django\ndjango.setup()\nfrom ipho_poll.models import Question, Choice, Vote, VotingRight\nimport random\ndef main():\n    votingRights = VotingRight.objects.all()\n    question_dict = {\n        'title': 'How do you do?',",
        "detail": "src.components.Exam.exam_tools.scripts.voting_demo",
        "documentation": {}
    }
]